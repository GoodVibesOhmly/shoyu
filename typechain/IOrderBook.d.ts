/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOrderBookInterface extends ethers.utils.Interface {
  functions: {
    "orders(bytes32)": FunctionFragment;
    "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;

  events: {
    "SubmitOrder(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubmitOrder"): EventFragment;
}

export class IOrderBook extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOrderBookInterface;

  functions: {
    orders(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        signer: string;
        nft: string;
        tokenId: BigNumber;
        amount: BigNumber;
        strategy: string;
        currency: string;
        recipient: string;
        deadline: BigNumber;
        params: string;
        v: number;
        r: string;
        s: string;
      }
    >;

    "orders(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        signer: string;
        nft: string;
        tokenId: BigNumber;
        amount: BigNumber;
        strategy: string;
        currency: string;
        recipient: string;
        deadline: BigNumber;
        params: string;
        v: number;
        r: string;
        s: string;
      }
    >;

    submitOrder(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)"(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  orders(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      string,
      number,
      string,
      string
    ] & {
      signer: string;
      nft: string;
      tokenId: BigNumber;
      amount: BigNumber;
      strategy: string;
      currency: string;
      recipient: string;
      deadline: BigNumber;
      params: string;
      v: number;
      r: string;
      s: string;
    }
  >;

  "orders(bytes32)"(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      string,
      number,
      string,
      string
    ] & {
      signer: string;
      nft: string;
      tokenId: BigNumber;
      amount: BigNumber;
      strategy: string;
      currency: string;
      recipient: string;
      deadline: BigNumber;
      params: string;
      v: number;
      r: string;
      s: string;
    }
  >;

  submitOrder(
    nft: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    strategy: string,
    currency: string,
    recipient: string,
    deadline: BigNumberish,
    params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)"(
    nft: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    strategy: string,
    currency: string,
    recipient: string,
    deadline: BigNumberish,
    params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    orders(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        signer: string;
        nft: string;
        tokenId: BigNumber;
        amount: BigNumber;
        strategy: string;
        currency: string;
        recipient: string;
        deadline: BigNumber;
        params: string;
        v: number;
        r: string;
        s: string;
      }
    >;

    "orders(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        string,
        string
      ] & {
        signer: string;
        nft: string;
        tokenId: BigNumber;
        amount: BigNumber;
        strategy: string;
        currency: string;
        recipient: string;
        deadline: BigNumber;
        params: string;
        v: number;
        r: string;
        s: string;
      }
    >;

    submitOrder(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)"(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    SubmitOrder(hash: BytesLike | null): EventFilter;
  };

  estimateGas: {
    orders(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "orders(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitOrder(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)"(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    orders(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orders(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitOrder(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitOrder(address,uint256,uint256,address,address,address,uint256,bytes)"(
      nft: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      strategy: string,
      currency: string,
      recipient: string,
      deadline: BigNumberish,
      params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
