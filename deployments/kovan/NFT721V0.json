{
  "address": "0xc86245759Ae4Ff698724172E6333df37109dF49b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "label",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        }
      ],
      "name": "ParkTokenIds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "SetRoyaltyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "SetRoyaltyFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "amountFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bidReferrer",
          "type": "address"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "askHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Bid",
          "name": "bidOrder",
          "type": "tuple"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "label",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "canTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "noncesForAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        }
      ],
      "name": "parkTokenIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "parked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "permil",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setRoyaltyFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17c66045a3082db27bec6c81016a5a8bbacec454d34d8fd603512b6cd86f892d",
  "receipt": {
    "to": null,
    "from": "0x80417137E490A5091dCAB34E85C457BB97c93161",
    "contractAddress": "0xc86245759Ae4Ff698724172E6333df37109dF49b",
    "transactionIndex": 3,
    "gasUsed": "4580347",
    "logsBloom": "0x
    "blockHash": "0x3172a882d3ee52ecc9e0f780842e912de3583958f68e15e0d75e4a9ee287c1b5",
    "transactionHash": "0x17c66045a3082db27bec6c81016a5a8bbacec454d34d8fd603512b6cd86f892d",
    "logs": [],
    "blockNumber": 26773380,
    "cumulativeGasUsed": "5055483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "32583b38f67c09af81ba33af8bcbd7d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"label\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"ParkTokenIds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"SetRoyaltyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetRoyaltyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"amountFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidReferrer\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"askHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Bid\",\"name\":\"bidOrder\",\"type\":\"tuple\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"label\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"canTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noncesForAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"parkTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"parked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permil\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"}],\"name\":\"setRoyaltyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT721V0.sol\":\"NFT721V0\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT721V0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"./interfaces/INFT721.sol\\\";\\nimport \\\"./interfaces/IERC2981.sol\\\";\\nimport \\\"./base/BaseNFT721.sol\\\";\\nimport \\\"./base/BaseExchange.sol\\\";\\n\\ncontract NFT721V0 is BaseNFT721, BaseExchange, IERC2981, INFT721 {\\n    uint8 internal _MAX_ROYALTY_FEE;\\n\\n    address internal _royaltyFeeRecipient;\\n    uint8 internal _royaltyFee; // out of 1000\\n\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] memory tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override initializer {\\n        __BaseNFTExchange_init();\\n        initialize(_name, _symbol, _owner);\\n        _MAX_ROYALTY_FEE = ITokenFactory(_factory).MAX_ROYALTY_FEE();\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _safeMint(_owner, tokenIds[i]);\\n        }\\n\\n        setRoyaltyFeeRecipient(royaltyFeeRecipient);\\n        _royaltyFee = type(uint8).max;\\n        if (royaltyFee != 0) setRoyaltyFee(royaltyFee);\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override initializer {\\n        __BaseNFTExchange_init();\\n        initialize(_name, _symbol, _owner);\\n\\n        _parkTokenIds(toTokenId);\\n\\n        emit ParkTokenIds(toTokenId);\\n\\n        setRoyaltyFeeRecipient(royaltyFeeRecipient);\\n        setRoyaltyFee(royaltyFee);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Initializable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override(BaseNFT721, BaseExchange, INFT721) returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function factory() public view override(BaseNFT721, BaseExchange, INFT721) returns (address) {\\n        return _factory;\\n    }\\n\\n    function royaltyFeeInfo() public view override(BaseExchange, INFT721) returns (address recipient, uint8 permil) {\\n        return (_royaltyFeeRecipient, _royaltyFee);\\n    }\\n\\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\\n        return (_royaltyFeeRecipient, (_salePrice * _royaltyFee) / 1000);\\n    }\\n\\n    function _transfer(\\n        address,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) internal override {\\n        if (from == owner() && _parked(tokenId)) {\\n            _safeMint(to, tokenId);\\n        } else {\\n            _transfer(from, to, tokenId);\\n        }\\n    }\\n\\n    function setRoyaltyFeeRecipient(address royaltyFeeRecipient) public override onlyOwner {\\n        require(royaltyFeeRecipient != address(0), \\\"SHOYU: INVALID_FEE_RECIPIENT\\\");\\n\\n        _royaltyFeeRecipient = royaltyFeeRecipient;\\n\\n        emit SetRoyaltyFeeRecipient(royaltyFeeRecipient);\\n    }\\n\\n    function setRoyaltyFee(uint8 royaltyFee) public override onlyOwner {\\n        if (_royaltyFee == type(uint8).max) {\\n            require(royaltyFee <= _MAX_ROYALTY_FEE, \\\"SHOYU: INVALID_FEE\\\");\\n        } else {\\n            require(royaltyFee < _royaltyFee, \\\"SHOYU: INVALID_FEE\\\");\\n        }\\n\\n        _royaltyFee = royaltyFee;\\n\\n        emit SetRoyaltyFee(royaltyFee);\\n    }\\n}\\n\",\"keccak256\":\"0x0c9f0b536989a17b994f6871099528269dae9ccb5c7fa3b844761eae324d9ecd\",\"license\":\"MIT\"},\"contracts/base/BaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../interfaces/IBaseExchange.sol\\\";\\nimport \\\"../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IDividendPayingERC20.sol\\\";\\nimport \\\"../libraries/Orders.sol\\\";\\nimport \\\"./ReentrancyGuardInitializable.sol\\\";\\n\\nabstract contract BaseExchange is ReentrancyGuardInitializable, IBaseExchange {\\n    using SafeERC20 for IERC20;\\n    using Orders for Orders.Ask;\\n    using Orders for Orders.Bid;\\n\\n    struct BestBid {\\n        address bidder;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint256 blockNumber;\\n    }\\n\\n    mapping(bytes32 => BestBid) public override bestBid;\\n    mapping(bytes32 => bool) public override isCancelled;\\n    mapping(bytes32 => uint256) public override amountFilled;\\n\\n    function __BaseNFTExchange_init() internal initializer {\\n        __ReentrancyGuard_init();\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32);\\n\\n    function factory() public view virtual override returns (address);\\n\\n    function royaltyFeeInfo() public view virtual override returns (address, uint8) {\\n        return (address(0), uint8(0));\\n    }\\n\\n    function canTrade(address token) public view virtual override returns (bool) {\\n        return token == address(this);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function cancel(Orders.Ask memory order) external override {\\n        require(order.signer == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        bytes32 hash = order.hash();\\n        require(bestBid[hash].bidder == address(0), \\\"SHOYU: BID_EXISTS\\\");\\n\\n        isCancelled[hash] = true;\\n\\n        emit Cancel(hash);\\n    }\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder)\\n        external\\n        override\\n        nonReentrant\\n        returns (bool executed)\\n    {\\n        bytes32 askHash = askOrder.hash();\\n        require(askHash == bidOrder.askHash, \\\"SHOYU: UNMATCHED_HASH\\\");\\n        require(bidOrder.signer != address(0), \\\"SHOYU: INVALID_SIGNER\\\");\\n\\n        _verify(bidOrder.hash(), bidOrder.signer, bidOrder.v, bidOrder.r, bidOrder.s);\\n\\n        return\\n            _bid(\\n                askOrder,\\n                askHash,\\n                bidOrder.signer,\\n                bidOrder.amount,\\n                bidOrder.price,\\n                bidOrder.recipient,\\n                bidOrder.referrer\\n            );\\n    }\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external override nonReentrant returns (bool executed) {\\n        return _bid(askOrder, askOrder.hash(), msg.sender, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n    }\\n\\n    function _bid(\\n        Orders.Ask memory askOrder,\\n        bytes32 askHash,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) internal returns (bool executed) {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n        require(bidAmount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        uint256 _amountFilled = amountFilled[askHash];\\n        require(_amountFilled + bidAmount <= askOrder.amount, \\\"SHOYU: SOLD_OUT\\\");\\n\\n        _validate(askOrder, askHash);\\n        _verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s);\\n\\n        if (IStrategy(askOrder.strategy).canExecute(askOrder.deadline, askOrder.params, bidder, bidPrice)) {\\n            amountFilled[askHash] = _amountFilled + bidAmount;\\n\\n            address recipient = askOrder.recipient;\\n            if (recipient == address(0)) recipient = askOrder.signer;\\n            require(\\n                _transferFeesAndFunds(askOrder.currency, bidder, recipient, bidPrice * bidAmount),\\n                \\\"SHOYU: FAILED_TO_TRANSFER_FUNDS\\\"\\n            );\\n\\n            if (bidRecipient == address(0)) bidRecipient = bidder;\\n            _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, bidAmount);\\n\\n            emit Execute(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n            return true;\\n        } else {\\n            BestBid storage best = bestBid[askHash];\\n            if (\\n                IStrategy(askOrder.strategy).canBid(\\n                    askOrder.deadline,\\n                    askOrder.params,\\n                    bidder,\\n                    bidPrice,\\n                    best.price,\\n                    best.blockNumber\\n                )\\n            ) {\\n                best.bidder = bidder;\\n                best.amount = bidAmount;\\n                best.price = bidPrice;\\n                best.recipient = bidRecipient;\\n                best.referrer = bidReferrer;\\n                best.blockNumber = block.number;\\n\\n                emit Bid(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n                return false;\\n            }\\n        }\\n        revert(\\\"SHOYU: FAILURE\\\");\\n    }\\n\\n    function claim(Orders.Ask memory askOrder) external override nonReentrant {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n\\n        bytes32 askHash = askOrder.hash();\\n        _validate(askOrder, askHash);\\n        _verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s);\\n\\n        BestBid memory best = bestBid[askHash];\\n        require(\\n            IStrategy(askOrder.strategy).canExecute(askOrder.deadline, askOrder.params, best.bidder, best.price),\\n            \\\"SHOYU: FAILURE\\\"\\n        );\\n\\n        address recipient = askOrder.recipient;\\n        if (recipient == address(0)) recipient = askOrder.signer;\\n\\n        if (_transferFeesAndFunds(askOrder.currency, best.bidder, recipient, best.price * best.amount)) {\\n            amountFilled[askHash] = amountFilled[askHash] + best.amount;\\n\\n            address bidRecipient = best.recipient;\\n            if (bidRecipient == address(0)) bidRecipient = best.bidder;\\n            _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, best.amount);\\n\\n            delete bestBid[askHash];\\n\\n            emit Execute(askHash, best.bidder, best.amount, best.price, bidRecipient, best.referrer);\\n        } else {\\n            isCancelled[askHash] = true;\\n\\n            emit Cancel(askHash);\\n        }\\n    }\\n\\n    function _validate(Orders.Ask memory askOrder, bytes32 askHash) internal view {\\n        require(!isCancelled[askHash], \\\"SHOYU: CANCELLED\\\");\\n\\n        require(askOrder.signer != address(0), \\\"SHOYU: INVALID_MAKER\\\");\\n        require(askOrder.token != address(0), \\\"SHOYU: INVALID_NFT\\\");\\n        require(askOrder.amount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        require(askOrder.strategy != address(0), \\\"SHOYU: INVALID_STRATEGY\\\");\\n        require(askOrder.currency != address(0), \\\"SHOYU: INVALID_CURRENCY\\\");\\n        require(ITokenFactory(factory()).isStrategyWhitelisted(askOrder.strategy), \\\"SHOYU: STRATEGY_NOT_WHITELISTED\\\");\\n    }\\n\\n    function _verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hash));\\n        if (Address.isContract(signer)) {\\n            require(\\n                IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"SHOYU: UNAUTHORIZED\\\"\\n            );\\n        } else {\\n            require(ecrecover(digest, v, r, s) == signer, \\\"SHOYU: UNAUTHORIZED\\\");\\n        }\\n    }\\n\\n    function _transferFeesAndFunds(\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (!_safeTransferFrom(currency, from, address(this), amount)) {\\n            return false;\\n        }\\n\\n        address _factory = factory();\\n        uint256 remainder = amount;\\n        {\\n            (address protocolFeeRecipient, uint8 protocolFeePermil) = ITokenFactory(_factory).protocolFeeInfo();\\n            uint256 protocolFeeAmount = (amount * protocolFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n            remainder -= protocolFeeAmount;\\n        }\\n\\n        {\\n            (address operationalFeeRecipient, uint8 operationalFeePermil) =\\n                ITokenFactory(_factory).operationalFeeInfo();\\n            uint256 operationalFeeAmount = (amount * operationalFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(operationalFeeRecipient, operationalFeeAmount);\\n            remainder -= operationalFeeAmount;\\n        }\\n\\n        (address royaltyFeeRecipient, uint8 royaltyFeePermil) = royaltyFeeInfo();\\n        if (royaltyFeePermil != type(uint8).max) {\\n            uint256 royaltyFeeAmount = (remainder * royaltyFeePermil) / 1000;\\n            if (royaltyFeeAmount > 0) {\\n                remainder -= royaltyFeeAmount;\\n                _transferRoyaltyFee(currency, royaltyFeeRecipient, royaltyFeeAmount);\\n            }\\n        }\\n\\n        IERC20(currency).safeTransfer(to, remainder);\\n        return true;\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private returns (bool) {\\n        (bool success, bytes memory returndata) =\\n            token.call(abi.encodeWithSelector(IERC20(token).transferFrom.selector, from, to, value));\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool)));\\n    }\\n\\n    function _transferRoyaltyFee(\\n        address currency,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        IERC20(currency).safeTransfer(to, amount);\\n        if (Address.isContract(to)) {\\n            try IDividendPayingERC20(to).sync() returns (uint256) {} catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25eaf8e9d1e8089768b88b8cda93524206fdc53dcd55adaa47d11b90e510aab1\",\"license\":\"MIT\"},\"contracts/base/BaseNFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IBaseNFT721.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../base/ERC721Initializable.sol\\\";\\nimport \\\"../base/OwnableInitializable.sol\\\";\\n\\nabstract contract BaseNFT721 is ERC721Initializable, OwnableInitializable, IBaseNFT721 {\\n    // keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_ALL_TYPEHASH =\\n        0xdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df62;\\n    bytes32 internal _DOMAIN_SEPARATOR;\\n\\n    address internal _factory;\\n    string internal __baseURI;\\n    mapping(uint256 => string) internal _uris;\\n\\n    mapping(uint256 => uint256) public override nonces;\\n    mapping(address => uint256) public override noncesForAll;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner\\n    ) public override initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init(_owner);\\n        _factory = msg.sender;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                keccak256(bytes(_name)),\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\"))\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function factory() public view virtual override returns (address) {\\n        return _factory;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId) || _parked(tokenId), \\\"SHOYU: INVALID_TOKEN_ID\\\");\\n\\n        string memory _uri = _uris[tokenId];\\n        if (bytes(_uri).length > 0) {\\n            return _uri;\\n        } else {\\n            string memory baseURI = __baseURI;\\n            if (bytes(baseURI).length > 0) {\\n                return string(abi.encodePacked(baseURI, Strings.toString(tokenId), \\\".json\\\"));\\n            } else {\\n                baseURI = ITokenFactory(_factory).baseURI721();\\n                string memory addy = Strings.toHexString(uint160(address(this)), 20);\\n                return string(abi.encodePacked(baseURI, addy, \\\"/\\\", Strings.toString(tokenId), \\\".json\\\"));\\n            }\\n        }\\n    }\\n\\n    function parked(uint256 tokenId) external view override returns (bool) {\\n        return _parked(tokenId);\\n    }\\n\\n    function setTokenURI(uint256 id, string memory newURI) external override onlyOwner {\\n        _uris[id] = newURI;\\n    }\\n\\n    function setBaseURI(string memory uri) external override onlyOwner {\\n        __baseURI = uri;\\n    }\\n\\n    function parkTokenIds(uint256 toTokenId) external override {\\n        require(owner() == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _parkTokenIds(toTokenId);\\n\\n        emit ParkTokenIds(toTokenId);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override {\\n        require(_factory == msg.sender || owner() == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _safeMint(to, tokenId, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory tokenIds,\\n        bytes memory data\\n    ) external override {\\n        require(owner() == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _safeMint(to, tokenIds[i], data);\\n        }\\n    }\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 label,\\n        bytes32 data\\n    ) external override {\\n        require(ownerOf(tokenId) == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _burn(tokenId);\\n\\n        emit Burn(label, data);\\n    }\\n\\n    function burnBatch(uint256[] memory tokenIds) external override {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(ownerOf(tokenId) == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n            _burn(tokenId);\\n        }\\n    }\\n\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"SHOYU: EXPIRED\\\");\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    _DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, nonces[tokenId], deadline))\\n                )\\n            );\\n        nonces[tokenId] += 1;\\n\\n        address owner = ownerOf(tokenId);\\n        require(spender != owner, \\\"SHOYU: NOT_NECESSARY\\\");\\n\\n        if (Address.isContract(owner)) {\\n            require(\\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"SHOYU: UNAUTHORIZED\\\"\\n            );\\n        } else {\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0), \\\"SHOYU: INVALID_SIGNATURE\\\");\\n            require(recoveredAddress == owner, \\\"SHOYU: UNAUTHORIZED\\\");\\n        }\\n\\n        _approve(spender, tokenId);\\n    }\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"SHOYU: EXPIRED\\\");\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    _DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_ALL_TYPEHASH, owner, spender, noncesForAll[owner], deadline))\\n                )\\n            );\\n        noncesForAll[owner] += 1;\\n\\n        if (Address.isContract(owner)) {\\n            require(\\n                IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"SHOYU: UNAUTHORIZED\\\"\\n            );\\n        } else {\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0), \\\"SHOYU: INVALID_SIGNATURE\\\");\\n            require(recoveredAddress == owner, \\\"SHOYU: UNAUTHORIZED\\\");\\n        }\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n}\\n\",\"keccak256\":\"0x3c91d51573e538ee6d373787ca6ce975549981678574cc114223cee69910a2c2\",\"license\":\"MIT\"},\"contracts/base/ERC721Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Initializable is Initializable, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Upper bound of tokenId parked\\n    uint256 private _toTokenIdParked;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"SHOYU: INVALID_OWNER\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"SHOYU: INVALID_TOKEN_ID\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        require(to != owner, \\\"SHOYU: INVALID_TO\\\");\\n\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"SHOYU: INVALID_TOKEN_ID\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"SHOYU: FORBIDDEN\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"SHOYU: INVALID_RECEIVER\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"SHOYU: INVALID_TOKEN_ID\\\");\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(operator != owner, \\\"SHOYU: INVALID_OPERATOR\\\");\\n\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _parked(uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        return owner == address(0) && tokenId < _toTokenIdParked;\\n    }\\n\\n    function _parkTokenIds(uint256 toTokenId) internal virtual {\\n        uint256 fromTokenId = _toTokenIdParked;\\n        require(toTokenId > fromTokenId, \\\"SHOYU: INVALID_TO_TOKEN_ID\\\");\\n\\n        _toTokenIdParked = toTokenId;\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"SHOYU: INVALID_RECEIVER\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"SHOYU: INVALID_TO\\\");\\n        require(!_exists(tokenId), \\\"SHOYU: ALREADY_MINTED\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        require(owner != address(0), \\\"SHOYU: INVALID_TOKEN_ID\\\");\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Initializable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Initializable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"SHOYU: INVALID_RECEIVER\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd365264fa7d01d8980bbcd55fb4bb646c8277d68a9b7599e76ebae591fc860cf\",\"license\":\"MIT\"},\"contracts/base/OwnableInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableInitializable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address __owner) internal initializer {\\n        __Ownable_init_unchained(__owner);\\n    }\\n\\n    function __Ownable_init_unchained(address __owner) internal initializer {\\n        _owner = __owner;\\n        emit OwnershipTransferred(address(0), __owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"SHOYU: INVALID_NEW_OWNER\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x31210cb0495d9f2f3236b118f0a4b30998eba9259a17d75d2430a853a20b64e2\",\"license\":\"MIT\"},\"contracts/base/ReentrancyGuardInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardInitializable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"SHOYU: REENTRANT\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x5c8f43c10b1b6b5554afd494e1967d87b1c6c90ff4a2496626804d61d926e4e4\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IBaseExchange {\\n    event Cancel(bytes32 indexed hash);\\n    event Execute(\\n        bytes32 indexed hash,\\n        address bidder,\\n        uint256 amount,\\n        uint256 price,\\n        address recipient,\\n        address referrer\\n    );\\n    event Bid(bytes32 indexed hash, address bidder, uint256 amount, uint256 price, address recipient, address referrer);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function royaltyFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function canTrade(address token) external view returns (bool);\\n\\n    function bestBid(bytes32 hash)\\n        external\\n        view\\n        returns (\\n            address bidder,\\n            uint256 amount,\\n            uint256 price,\\n            address recipient,\\n            address referrer,\\n            uint256 blockNumber\\n        );\\n\\n    function isCancelled(bytes32 hash) external view returns (bool);\\n\\n    function amountFilled(bytes32 hash) external view returns (uint256);\\n\\n    function cancel(Orders.Ask memory order) external;\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder) external returns (bool executed);\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external returns (bool executed);\\n\\n    function claim(Orders.Ask memory order) external;\\n}\\n\",\"keccak256\":\"0x10a058fd0f01c29df2bfbce6c4fba881aa9cdd9d886dc28ac1a91e86a75c9aa9\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseNFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseNFT721 is IERC721 {\\n    event Burn(uint256 indexed label, bytes32 data);\\n\\n    event ParkTokenIds(uint256 toTokenId);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n\\n    function noncesForAll(address account) external view returns (uint256);\\n\\n    function parked(uint256 tokenId) external view returns (bool);\\n\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address _owner\\n    ) external;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function setBaseURI(string memory uri) external;\\n\\n    function parkTokenIds(uint256 toTokenId) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata tokenIds,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 label,\\n        bytes32 data\\n    ) external;\\n\\n    function burnBatch(uint256[] calldata tokenIds) external;\\n\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdd7001ae6dcc763664bb0aa11939b553542f7c0fa2e2a9a7f6a9f4465a902251\",\"license\":\"MIT\"},\"contracts/interfaces/IDividendPayingERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IDividendPayingERC20 {\\n    /// @dev This event MUST emit when erc20/ether dividend is synced.\\n    /// @param increased The amount of increased erc20/ether in wei.\\n    event Sync(uint256 increased);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws erc20/ether from this contract.\\n    /// @param amount The amount of withdrawn erc20/ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 amount);\\n\\n    function MAGNITUDE() external view returns (uint256);\\n\\n    function dividendToken() external view returns (address);\\n\\n    function totalDividend() external view returns (uint256);\\n\\n    function sync() external payable returns (uint256 increased);\\n\\n    function withdrawDividend() external;\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function dividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function withdrawableDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has withdrawn.\\n    function withdrawnDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(account) = withdrawableDividendOf(account) + withdrawnDividendOf(account)\\n    /// = (magnifiedDividendPerShare * balanceOf(account) + magnifiedDividendCorrections[account]) / magnitude\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has earned in total.\\n    function accumulativeDividendOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4233a346f1c1a944d6bee2fb58c5cce94edd0c617b354dadda364978a881cb2c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Interface for verifying contract-based account signatures\\n/// @notice Interface that verifies provided signature for the data\\n/// @dev Interface defined by EIP-1271\\ninterface IERC1271 {\\n    /// @notice Returns whether the provided signature is valid for the provided data\\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n    /// MUST allow external calls.\\n    /// @param hash Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x7115b65c073af6cadf4dad8baa66422be19ad0741d41566cc3db888def037f80\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x012b9c7ecf141a7fd2162a87cf0814f8942de12709a1c90d034a6f018ce029ce\",\"license\":\"MIT\"},\"contracts/interfaces/INFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IBaseNFT721.sol\\\";\\nimport \\\"./IBaseExchange.sol\\\";\\n\\ninterface INFT721 is IBaseNFT721, IBaseExchange {\\n    event SetRoyaltyFeeRecipient(address recipient);\\n    event SetRoyaltyFee(uint8 fee);\\n\\n    function initialize(\\n        address _owner,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint256[] calldata tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external;\\n\\n    function initialize(\\n        address _owner,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external;\\n\\n    function DOMAIN_SEPARATOR() external view override(IBaseNFT721, IBaseExchange) returns (bytes32);\\n\\n    function factory() external view override(IBaseNFT721, IBaseExchange) returns (address);\\n\\n    function royaltyFeeInfo() external view override returns (address recipient, uint8 permil);\\n\\n    function setRoyaltyFeeRecipient(address _royaltyFeeRecipient) external;\\n\\n    function setRoyaltyFee(uint8 _royaltyFee) external;\\n}\\n\",\"keccak256\":\"0x75379d10646b7c2510d1584d193dd5d76004f475383890dcaeb1c6f71fa8744c\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IStrategy {\\n    function canExecute(\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice\\n    ) external view returns (bool);\\n\\n    function canBid(\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        uint256 bestBidPrice,\\n        uint256 bestBidBlock\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c379707f5d112df6ac23a176e2d77b127b756c0a765f2eb3f10f6ab7c30212f\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ITokenFactory {\\n    event UpgradeNFT721(address newTarget);\\n    event UpgradeNFT1155(address newTarget);\\n    event UpgradeSocialToken(address newTarget);\\n    event UpgradeERC721Exchange(address exchange);\\n    event UpgradeERC1155Exchange(address exchange);\\n    event DeployNFT721(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256[] tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT721(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT1155(\\n        address indexed proxy,\\n        address indexed owner,\\n        uint256[] tokenIds,\\n        uint256[] amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeploySocialToken(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        address indexed dividendToken\\n    );\\n    event Tag(address indexed nft, uint256 indexed tokenId, string indexed tag, uint256 tagNonce);\\n\\n    function MAX_ROYALTY_FEE() external view returns (uint8);\\n\\n    function MAX_OPERATIONAL_FEE() external view returns (uint8);\\n\\n    function baseURI721() external view returns (string memory);\\n\\n    function baseURI1155() external view returns (string memory);\\n\\n    function erc721Exchange() external view returns (address);\\n\\n    function erc1155Exchange() external view returns (address);\\n\\n    function protocolFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function operationalFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function isDeployerWhitelisted(address strategy) external view returns (bool);\\n\\n    function setBaseURI721(string memory uri) external;\\n\\n    function setBaseURI1155(string memory uri) external;\\n\\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\\n\\n    function setOperationalFeeRecipient(address operationalFeeRecipient) external;\\n\\n    function setOperationalFee(uint8 operationalFee) external;\\n\\n    function setDeployerWhitelisted(address deployer, bool whitelisted) external;\\n\\n    function setStrategyWhitelisted(address strategy, bool whitelisted) external;\\n\\n    function upgradeNFT721(address newTarget) external;\\n\\n    function upgradeNFT1155(address newTarget) external;\\n\\n    function upgradeSocialToken(address newTarget) external;\\n\\n    function upgradeERC721Exchange(address exchange) external;\\n\\n    function upgradeERC1155Exchange(address exchange) external;\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256[] calldata tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT721(address query) external view returns (bool result);\\n\\n    function deployNFT1155(\\n        address owner,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT1155(address query) external view returns (bool result);\\n\\n    function deploySocialToken(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address dividendToken\\n    ) external returns (address proxy);\\n\\n    function isSocialToken(address query) external view returns (bool result);\\n\\n    function mintWithTags721(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data,\\n        string[] calldata tags\\n    ) external;\\n\\n    function mintWithTags1155(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data,\\n        string[] calldata tags\\n    ) external;\\n\\n    function setTags721(\\n        address nft,\\n        uint256 tokenId,\\n        string[] calldata tags\\n    ) external;\\n\\n    function setTags1155(\\n        address nft,\\n        uint256 tokenId,\\n        string[] calldata tags\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fc27c4d457b0616f38ddb347fe32b06ea1c338b4988ec51a178c83fcb0530e5\",\"license\":\"MIT\"},\"contracts/libraries/Orders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nlibrary Orders {\\n    // keccak256(\\\"Ask(address signer,address token,uint256 tokenId,uint256 amount,address strategy,address currency,address recipient,uint256 deadline,bytes params)\\\")\\n    bytes32 internal constant ASK_TYPEHASH = 0x17fdf8831f8bd77353b30f42ba9bc64e7144545a42a890389f298feeb45dec88;\\n    // keccak256(\\\"Bid(bytes32 askHash,address signer,uint256 amount,uint256 price,address recipient,address referrer)\\\")\\n    bytes32 internal constant BID_TYPEHASH = 0xb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b2;\\n\\n    struct Ask {\\n        address signer;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address strategy;\\n        address currency;\\n        address recipient;\\n        uint256 deadline;\\n        bytes params;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Bid {\\n        bytes32 askHash;\\n        address signer;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function hash(Ask memory ask) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ASK_TYPEHASH,\\n                    ask.signer,\\n                    ask.token,\\n                    ask.tokenId,\\n                    ask.amount,\\n                    ask.strategy,\\n                    ask.currency,\\n                    ask.recipient,\\n                    ask.deadline,\\n                    keccak256(ask.params)\\n                )\\n            );\\n    }\\n\\n    function hash(Bid memory bid) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(BID_TYPEHASH, bid.askHash, bid.signer, bid.amount, bid.price, bid.recipient, bid.referrer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa35b519fac6ea626cc3b133907138ed75f3389c0a1bb4f771cfd5ec820caca23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151e1806100206000396000f3fe608060405234801561001057600080fd5b50600436106102945760003560e01c806370a0823111610167578063a22cb465116100ce578063c87b56dd11610087578063c87b56dd146106e1578063c975e374146106f4578063def2716414610707578063e4623c1b1461071a578063e985e9c51461072d578063f2fde38b1461074057610294565b8063a22cb4651461065d578063aba0784714610670578063ac9a252114610683578063b4e13c8d14610696578063b88d4fde146106bd578063c45a0155146106d057610294565b80639443792c116101205780639443792c146105e657806394d008ef146105f957806395d89b411461060c578063994e7296146106145780639a5d4407146106275780639ecbcda21461064a57610294565b806370a0823114610567578063715018a61461057a57806375e6590f146105825780637ac2ff7b146105a25780638da5cb5b146105b5578063904dfb8e146105c657610294565b80632a55205a1161020b578063559f05dc116101c4578063559f05dc1461046a57806355f804b3146104895780635771f9971461049c5780635f7ef2fa1461052e5780636352211e146105415780636ef8e02d1461055457610294565b80632a55205a146103b657806330adf81f146103e85780633644e5151461040f57806342842e0e1461041757806344f09d111461042a57806350bf994a1461043d57610294565b80630935d6631161025d5780630935d66314610329578063095ea7b31461033c578063141a468c1461034f578063162094c41461037d578063228624821461039057806323b872dd146103a357610294565b8062893bf81461029957806301ffc9a7146102ae57806306fdde03146102d6578063077f224a146102eb578063081812fc146102fe575b600080fd5b6102ac6102a73660046149ed565b610753565b005b6102c16102bc36600461489d565b610830565b60405190151581526020015b60405180910390f35b6102de61085d565b6040516102cd9190614df5565b6102ac6102f9366004614979565b6108ef565b61031161030c366004614885565b610a11565b6040516001600160a01b0390911681526020016102cd565b6102ac6103373660046149ed565b610a61565b6102ac61034a366004614751565b610dd3565b61036f61035d366004614885565b600d6020526000908152604090205481565b6040519081526020016102cd565b6102ac61038b366004614b7e565b610e7d565b6102ac61039e366004614572565b610ec6565b6102ac6103b1366004614465565b610f4f565b6103c96103c4366004614bc2565b610fca565b604080516001600160a01b0390931683526020830191909152016102cd565b61036f7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60095461036f565b6102ac610425366004614465565b61100e565b6102c1610438366004614af1565b611029565b6013546040805161010083046001600160a01b03168152600160a81b90920460ff166020830152016102cd565b6102c1610478366004614411565b6001600160a01b0381163014919050565b6102ac6104973660046148d5565b611079565b6104ef6104aa366004614885565b6010602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293918316929091169086565b604080516001600160a01b03978816815260208101969096528501939093529084166060840152909216608082015260a081019190915260c0016102cd565b6102ac61053c366004614c0e565b6110ba565b61031161054f366004614885565b6111f5565b6102ac610562366004614411565b611210565b61036f610575366004614411565b6112e6565b6102ac611351565b61036f610590366004614885565b60126020526000908152604090205481565b6102ac6105b03660046147c8565b6113c5565b6008546001600160a01b0316610311565b61036f6105d4366004614411565b600e6020526000908152604090205481565b6102ac6105f4366004614be3565b61170c565b6102ac61060736600461477c565b611784565b6102de6117dd565b6102c1610622366004614885565b6117ec565b6102c1610635366004614885565b60116020526000908152604090205460ff1681565b6102ac610658366004614611565b6117f7565b6102ac61066b3660046145e4565b611994565b6102ac61067e36600461450e565b61199f565b6102ac6106913660046146cd565b611c94565b61036f7fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b6102ac6106cb3660046144a5565b611d4c565b600a546001600160a01b0316610311565b6102de6106ef366004614885565b611d7e565b6102ac610702366004614885565b612013565b6102c1610715366004614a1f565b612085565b6102ac610728366004614837565b6121ad565b6102c161073b36600461442d565b61223a565b6102ac61074e366004614411565b612268565b80516001600160a01b031633146107855760405162461bcd60e51b815260040161077c90614e08565b60405180910390fd5b600061079082612344565b6000818152601060205260409020549091506001600160a01b0316156107ec5760405162461bcd60e51b815260206004820152601160248201527053484f59553a204249445f45584953545360781b604482015260640161077c565b600081815260116020526040808220805460ff191660011790555182917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25050565b600063152a902d60e11b6001600160e01b031983161480610855575061085582612422565b90505b919050565b60606001805461086c906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054610898906150bd565b80156108e55780601f106108ba576101008083540402835291602001916108e5565b820191906000526020600020905b8154815290600101906020018083116108c857829003601f168201915b5050505050905090565b600054610100900460ff1680610908575060005460ff16155b6109245760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015610946576000805461ffff19166101011790555b6109508484612472565b610959826124e9565b600a80546001600160a01b031916331790558351602080860191909120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f938101939093528201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c00160408051601f198184030181529190528051602090910120600955508015610a0b576000805461ff00191690555b50505050565b6000818152600460205260408120546001600160a01b0316610a455760405162461bcd60e51b815260040161077c90614e93565b506000908152600660205260409020546001600160a01b031690565b6002600f541415610a845760405162461bcd60e51b815260040161077c90614e69565b6002600f5560208101516001600160a01b03163014610adf5760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b604482015260640161077c565b6000610aea82612344565b9050610af6828261255e565b610b16818360000151846101200151856101400151866101600151612823565b600081815260106020908152604091829020825160c08101845281546001600160a01b039081168083526001840154948301949094526002830154828601819052600384015482166060840152600480850154831660808086019190915260059095015460a08501529388015160e08901516101008a0151975163e01be26360e01b81529497919093169563e01be26395610bb5959293919201614f45565b60206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190614869565b610c425760405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b604482015260640161077c565b60c08301516001600160a01b038116610c59575082515b610c808460a0015183600001518385602001518660400151610c7b9190615044565b6129d2565b15610d875760208083015160008581526012909252604090912054610ca59190615018565b60008481526012602052604090205560608201516001600160a01b038116610ccb575081515b610ce8856020015186600001518388604001518760200151612c10565b600084815260106020908152604080832080546001600160a01b03199081168255600182018590556002820185905560038201805482169055600482018054909116905560050192909255845190850151858301516080870151935188947f72fd87c5ad3903eb05815544ef7ea4640a18e631c9c02eb099c810834f82355594610d79949093909290918891614daa565b60405180910390a250610dc8565b600083815260116020526040808220805460ff191660011790555184917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25b50506001600f555050565b6000610dde826111f5565b9050806001600160a01b0316836001600160a01b03161415610e365760405162461bcd60e51b815260206004820152601160248201527053484f59553a20494e56414c49445f544f60781b604482015260640161077c565b336001600160a01b0382161480610e525750610e52813361223a565b610e6e5760405162461bcd60e51b815260040161077c90614e08565b610e788383612c57565b505050565b6008546001600160a01b03163314610ea75760405162461bcd60e51b815260040161077c90614e08565b6000828152600c602090815260409091208251610e78928401906141a6565b33610ed96008546001600160a01b031690565b6001600160a01b031614610eff5760405162461bcd60e51b815260040161077c90614e08565b60005b8251811015610a0b57610f3d84848381518110610f2f57634e487b7160e01b600052603260045260246000fd5b602002602001015184612cc5565b80610f47816150f2565b915050610f02565b610f593382612cf8565b610fbf5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161077c565b610e78838383612d82565b601354600090819061010081046001600160a01b0316906103e890610ff990600160a81b900460ff1686615044565b6110039190615030565b915091509250929050565b610e7883838360405180602001604052806000815250611d4c565b60006002600f54141561104e5760405162461bcd60e51b815260040161077c90614e69565b6002600f5561106a8661106081612344565b3388888888612f22565b6001600f559695505050505050565b6008546001600160a01b031633146110a35760405162461bcd60e51b815260040161077c90614e08565b80516110b690600b9060208401906141a6565b5050565b6008546001600160a01b031633146110e45760405162461bcd60e51b815260040161077c90614e08565b601354600160a81b900460ff908116141561114c5760135460ff90811690821611156111475760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b604482015260640161077c565b6111a0565b60135460ff600160a81b9091048116908216106111a05760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b604482015260640161077c565b6013805460ff60a81b1916600160a81b60ff8416908102919091179091556040519081527fd9ac3bc8ad92267d0b101786ddb4d37746ed1e3ee77637846294edf17dd9eb8a906020015b60405180910390a150565b6000908152600460205260409020546001600160a01b031690565b6008546001600160a01b0316331461123a5760405162461bcd60e51b815260040161077c90614e08565b6001600160a01b0381166112905760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e5400000000604482015260640161077c565b60138054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f1ce5f25607cb1a4fa6c947b55700213a9ed6a1d7ef1cf1d02ab467efd02a993e906020016111ea565b60006001600160a01b0382166113355760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa7aba722a960611b604482015260640161077c565b506001600160a01b031660009081526005602052604090205490565b6008546001600160a01b0316331461137b5760405162461bcd60e51b815260040161077c90614e08565b6008546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600880546001600160a01b0319169055565b834211156114065760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b604482015260640161077c565b6009546000868152600d602090815260408083205481517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad818501526001600160a01b038c1681840152606081018b9052608081019190915260a08082018a90528251808303909101815260c0820190925281519190920120919261148f92909160e001614d52565b6040516020818303038152906040528051906020012090506001600d600088815260200190815260200160002060008282546114cb9190615018565b90915550600090506114dc876111f5565b9050806001600160a01b0316886001600160a01b031614156115375760405162461bcd60e51b815260206004820152601460248201527353484f59553a204e4f545f4e454345535341525960601b604482015260640161077c565b803b1561161357806001600160a01b0316631626ba7e8386868960405160200161156393929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161158f929190614ddc565b60206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906148b9565b6001600160e01b031916631626ba7e60e01b1461160e5760405162461bcd60e51b815260040161077c90614f18565b6116f8565b6040805160008082526020820180845285905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611667573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116c55760405162461bcd60e51b815260206004820152601860248201527753484f59553a20494e56414c49445f5349474e415455524560401b604482015260640161077c565b816001600160a01b0316816001600160a01b0316146116f65760405162461bcd60e51b815260040161077c90614f18565b505b6117028888612c57565b5050505050505050565b33611716846111f5565b6001600160a01b03161461173c5760405162461bcd60e51b815260040161077c90614e08565b61174583613379565b817f94b3f0faea6b3f73e3a1aa978781772e16c3f2198f55f3ee6802f60bbdc5ae4d8260405161177791815260200190565b60405180910390a2505050565b600a546001600160a01b03163314806117b65750336117ab6008546001600160a01b031690565b6001600160a01b0316145b6117d25760405162461bcd60e51b815260040161077c90614e08565b610e78838383612cc5565b60606002805461086c906150bd565b60006108558261343a565b600054610100900460ff1680611810575060005460ff16155b61182c5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff1615801561184e576000805461ffff19166101011790555b611856613467565b6118618686896108ef565b600a60009054906101000a90046001600160a01b03166001600160a01b03166317e1f82e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190614c2a565b6013805460ff191660ff9290921691909117905560005b845181101561194a576119388886838151811061192b57634e487b7160e01b600052603260045260246000fd5b60200260200101516134db565b80611942816150f2565b9150506118fe565b5061195483611210565b6013805460ff60a81b191660ff60a81b17905560ff82161561197957611979826110ba565b801561198b576000805461ff00191690555b50505050505050565b6110b63383836134f5565b834211156119e05760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b604482015260640161077c565b6009546001600160a01b038781166000818152600e602090815260408083205481517fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6293810193909352908201939093529289166060840152608083019190915260a08201879052919060c00160405160208183030381529060405280519060200120604051602001611a74929190614d52565b6040516020818303038152906040528051906020012090506001600e6000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ac29190615018565b9091555050863b15611ba357866001600160a01b0316631626ba7e82858588604051602001611af393929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611b1f929190614ddc565b60206040518083038186803b158015611b3757600080fd5b505afa158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f91906148b9565b6001600160e01b031916631626ba7e60e01b14611b9e5760405162461bcd60e51b815260040161077c90614f18565b611c88565b6040805160008082526020820180845284905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611bf7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c555760405162461bcd60e51b815260206004820152601860248201527753484f59553a20494e56414c49445f5349474e415455524560401b604482015260640161077c565b876001600160a01b0316816001600160a01b031614611c865760405162461bcd60e51b815260040161077c90614f18565b505b61198b878760016134f5565b600054610100900460ff1680611cad575060005460ff16155b611cc95760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015611ceb576000805461ffff19166101011790555b611cf3613467565b611cfe8686896108ef565b611d07846135c4565b6040518481527fbd3ebe8ad09ded9d19d849088ef41c06e6369d712810f47ad52751826c17ff949060200160405180910390a1611d4383611210565b611979826110ba565b611d563383612cf8565b611d725760405162461bcd60e51b815260040161077c90614e08565b610a0b8484848461361c565b6000818152600460205260409020546060906001600160a01b0316151580611daa5750611daa8261343a565b611dc65760405162461bcd60e51b815260040161077c90614e93565b6000828152600c602052604081208054611ddf906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b906150bd565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b50505050509050600081511115611e70579050610858565b6000600b8054611e7f906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611eab906150bd565b8015611ef85780601f10611ecd57610100808354040283529160200191611ef8565b820191906000526020600020905b815481529060010190602001808311611edb57829003601f168201915b50505050509050600081511115611f3c5780611f138561364f565b604051602001611f24929190614cb1565b60405160208183030381529060405292505050610858565b600a60009054906101000a90046001600160a01b03166001600160a01b0316633683a63d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fc69190810190614907565b90506000611fd5306014613769565b90508181611fe28761364f565b604051602001611ff493929190614cf0565b6040516020818303038152906040529350505050610858565b50919050565b336120266008546001600160a01b031690565b6001600160a01b03161461204c5760405162461bcd60e51b815260040161077c90614e08565b612055816135c4565b6040518181527fbd3ebe8ad09ded9d19d849088ef41c06e6369d712810f47ad52751826c17ff94906020016111ea565b60006002600f5414156120aa5760405162461bcd60e51b815260040161077c90614e69565b6002600f5560006120ba84612344565b835190915081146121055760405162461bcd60e51b81526020600482015260156024820152740a6909eb2aa7440aa9c9a82a886908a88be9082a69605b1b604482015260640161077c565b60208301516001600160a01b03166121575760405162461bcd60e51b815260206004820152601560248201527429a427acaa9d1024a72b20a624a22fa9a4a3a722a960591b604482015260640161077c565b61217d6121638461394a565b84602001518560c001518660e00151876101000151612823565b6121a0848285602001518660400151876060015188608001518960a00151612f22565b6001600f55949350505050565b60005b81518110156110b65760008282815181106121db57634e487b7160e01b600052603260045260246000fd5b60200260200101519050336001600160a01b03166121f8826111f5565b6001600160a01b03161461221e5760405162461bcd60e51b815260040161077c90614e08565b61222781613379565b5080612232816150f2565b9150506121b0565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6008546001600160a01b031633146122925760405162461bcd60e51b815260040161077c90614e08565b6001600160a01b0381166122e85760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f4e45575f4f574e45520000000000000000604482015260640161077c565b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01518051908a0120965160009a6124059a7f17fdf8831f8bd77353b30f42ba9bc64e7144545a42a890389f298feeb45dec889a9199919897969594939201998a526001600160a01b0398891660208b015296881660408a01526060890195909552608088019390935290851660a0870152841660c086015290921660e08401526101008301919091526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b60006001600160e01b031982166380ac58cd60e01b148061245357506001600160e01b03198216635b5e139f60e01b145b8061085557506301ffc9a760e01b6001600160e01b0319831614610855565b600054610100900460ff168061248b575060005460ff16155b6124a75760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff161580156124c9576000805461ffff19166101011790555b6124d383836139d5565b8015610e78576000805461ff0019169055505050565b600054610100900460ff1680612502575060005460ff16155b61251e5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015612540576000805461ffff19166101011790555b61254982613a6a565b80156110b6576000805461ff00191690555050565b60008181526011602052604090205460ff16156125b05760405162461bcd60e51b815260206004820152601060248201526f14d213d6554e8810d05390d15313115160821b604482015260640161077c565b81516001600160a01b03166125fe5760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa6a0a5a2a960611b604482015260640161077c565b60208201516001600160a01b031661264d5760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881253959053125117d3919560721b604482015260640161077c565b60008260600151116126995760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b604482015260640161077c565b60808201516001600160a01b03166126f35760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f5354524154454759000000000000000000604482015260640161077c565b60a08201516001600160a01b031661274d5760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f43555252454e4359000000000000000000604482015260640161077c565b600a546001600160a01b03166080830151604051632666e89f60e21b81526001600160a01b03918216600482015291169063999ba27c9060240160206040518083038186803b15801561279f57600080fd5b505afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190614869565b6110b65760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a2053545241544547595f4e4f545f57484954454c495354454400604482015260640161077c565b600061282e60095490565b86604051602001612840929190614d52565b604051602081830303815290604052805190602001209050612862853b151590565b1561293c57846001600160a01b0316631626ba7e8285858860405160200161288c93929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016128b8929190614ddc565b60206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290891906148b9565b6001600160e01b031916631626ba7e60e01b146129375760405162461bcd60e51b815260040161077c90614f18565b6129ca565b60408051600081526020810180835283905260ff86169181019190915260608101849052608081018390526001600160a01b0386169060019060a0016020604051602081039080840390855afa15801561299a573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146129ca5760405162461bcd60e51b815260040161077c90614f18565b505050505050565b60006129e085853085613b1f565b6129ec57506000612c08565b6000612a00600a546001600160a01b031690565b90506000839050600080836001600160a01b031663aec0b5436040518163ffffffff1660e01b8152600401604080518083038186803b158015612a4257600080fd5b505afa158015612a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7a9190614809565b909250905060006103e8612a9160ff841689615044565b612a9b9190615030565b9050612ab16001600160a01b038b168483613bf1565b612abb8185615063565b9350505050600080836001600160a01b031663c2b11e186040518163ffffffff1660e01b8152600401604080518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b339190614809565b909250905060006103e8612b4a60ff841689615044565b612b549190615030565b9050612b6a6001600160a01b038b168483613bf1565b612b748185615063565b9350505050600080612b9f60135461010081046001600160a01b031691600160a81b90910460ff1690565b909250905060ff80821614612beb5760006103e8612bc060ff841686615044565b612bca9190615030565b90508015612be957612bdc8185615063565b9350612be98a8483613c43565b505b612bff6001600160a01b038a168885613bf1565b60019450505050505b949350505050565b6008546001600160a01b038581169116148015612c315750612c318261343a565b15612c4557612c4083836134db565b612c50565b612c50848484612d82565b5050505050565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612c8c826111f5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b612ccf8383613cd2565b612cdc6000848484613e00565b610e785760405162461bcd60e51b815260040161077c90614e32565b6000818152600460205260408120546001600160a01b0316612d2c5760405162461bcd60e51b815260040161077c90614e93565b6000612d37836111f5565b9050806001600160a01b0316846001600160a01b03161480612d725750836001600160a01b0316612d6784610a11565b6001600160a01b0316145b80612c085750612c08818561223a565b826001600160a01b0316612d95826111f5565b6001600160a01b031614612dfd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161077c565b6001600160a01b038216612e5f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161077c565b612e6a600082612c57565b6001600160a01b0383166000908152600560205260408120805460019290612e93908490615063565b90915550506001600160a01b0382166000908152600560205260408120805460019290612ec1908490615018565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60208701516000906001600160a01b03163014612f7b5760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b604482015260640161077c565b60008511612fc35760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b604482015260640161077c565b6000878152601260205260409020546060890151612fe18783615018565b11156130215760405162461bcd60e51b815260206004820152600f60248201526e14d213d6554e8814d3d31117d3d555608a1b604482015260640161077c565b61302b898961255e565b61304b888a600001518b61012001518c61014001518d6101600151612823565b88608001516001600160a01b031663e01be2638a60e001518b61010001518a896040518563ffffffff1660e01b815260040161308a9493929190614f45565b60206040518083038186803b1580156130a257600080fd5b505afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190614869565b156131e6576130e98682615018565b60008981526012602052604090205560c08901516001600160a01b03811661310f575088515b60a08a0151613124908983610c7b8b8b615044565b6131705760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e445300604482015260640161077c565b6001600160a01b038516613182578794505b61319b8a602001518b60000151878d604001518b612c10565b887f72fd87c5ad3903eb05815544ef7ea4640a18e631c9c02eb099c810834f82355589898989896040516131d3959493929190614daa565b60405180910390a260019250505061336e565b6000888152601060205260409081902060808b015160e08c01516101008d0151600284015460058501549551633140c34d60e11b815294956001600160a01b0390941694636281869a946132439493928f928e9290600401614f7a565b60206040518083038186803b15801561325b57600080fd5b505afa15801561326f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132939190614869565b156133345780546001600160a01b03808a166001600160a01b031992831617835560018301899055600283018890556003830180548883169084161790556004830180549187169190921617905543600582015560405189907f4055f76fe1f351fec66b9ba790ddbdc29eb45c038163a6b1327277441a8c65f190613321908b908b908b908b908b90614daa565b60405180910390a260009250505061336e565b5060405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b604482015260640161077c565b979650505050505050565b6000613384826111f5565b90506001600160a01b0381166133ac5760405162461bcd60e51b815260040161077c90614e93565b6133b7600083612c57565b6001600160a01b03811660009081526005602052604081208054600192906133e0908490615063565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080613446836111f5565b90506001600160a01b038116158015613460575060035483105b9392505050565b600054610100900460ff1680613480575060005460ff16155b61349c5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff161580156134be576000805461ffff19166101011790555b6134c6613f0a565b80156134d8576000805461ff00191690555b50565b6110b6828260405180602001604052806000815250612cc5565b826001600160a01b0316826001600160a01b031614156135575760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f4f50455241544f52000000000000000000604482015260640161077c565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6003548082116136165760405162461bcd60e51b815260206004820152601a60248201527f53484f59553a20494e56414c49445f544f5f544f4b454e5f4944000000000000604482015260640161077c565b50600355565b613627848484612d82565b61363384848484613e00565b610a0b5760405162461bcd60e51b815260040161077c90614e32565b60608161367457506040805180820190915260018152600360fc1b6020820152610858565b8160005b811561369e5780613688816150f2565b91506136979050600a83615030565b9150613678565b6000816001600160401b038111156136c657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136f0576020820181803683370190505b5090505b8415612c0857613705600183615063565b9150613712600a8661510d565b61371d906030615018565b60f81b81838151811061374057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613762600a86615030565b94506136f4565b60606000613778836002615044565b613783906002615018565b6001600160401b038111156137a857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137d2576020820181803683370190505b509050600360fc1b816000815181106137fb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061383857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061385c846002615044565b613867906001615018565b90505b60018111156138fb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106138a957634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106138cd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936138f4816150a6565b905061386a565b5083156134605760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161077c565b80516020808301516040808501516060860151608087015160a08801519351600097612405977fb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b297919691959493920196875260208701959095526001600160a01b03938416604087015260608601929092526080850152811660a08401521660c082015260e00190565b600054610100900460ff16806139ee575060005460ff16155b613a0a5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613a2c576000805461ffff19166101011790555b8251613a3f9060019060208601906141a6565b508151613a539060029060208501906141a6565b508015610e78576000805461ff0019169055505050565b600054610100900460ff1680613a83575060005460ff16155b613a9f5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613ac1576000805461ffff19166101011790555b600880546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156110b6576000805461ff00191690555050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392839291891691613b859190614c95565b6000604051808303816000865af19150503d8060008114613bc2576040519150601f19603f3d011682016040523d82523d6000602084013e613bc7565b606091505b509150915081801561336e57508051158061336e57508080602001905181019061336e9190614869565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e78908490613f69565b613c576001600160a01b0384168383613bf1565b813b15610e7857816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613c9957600080fd5b505af1925050508015613cc9575060408051601f3d908101601f19168201909252613cc691810190614b66565b60015b610a0b57610e78565b6001600160a01b038216613d1c5760405162461bcd60e51b815260206004820152601160248201527053484f59553a20494e56414c49445f544f60781b604482015260640161077c565b6000818152600460205260409020546001600160a01b031615613d795760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881053149150511657d35253951151605a1b604482015260640161077c565b6001600160a01b0382166000908152600560205260408120805460019290613da2908490615018565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613f0257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613e44903390899088908890600401614d6d565b602060405180830381600087803b158015613e5e57600080fd5b505af1925050508015613e8e575060408051601f3d908101601f19168201909252613e8b918101906148b9565b60015b613ee8573d808015613ebc576040519150601f19603f3d011682016040523d82523d6000602084013e613ec1565b606091505b508051613ee05760405162461bcd60e51b815260040161077c90614e32565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c08565b506001612c08565b600054610100900460ff1680613f23575060005460ff16155b613f3f5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613f61576000805461ffff19166101011790555b6134c661403b565b6000613fbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140ab9092919063ffffffff16565b805190915015610e785780806020019051810190613fdc9190614869565b610e785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161077c565b600054610100900460ff1680614054575060005460ff16155b6140705760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015614092576000805461ffff19166101011790555b6001600f5580156134d8576000805461ff001916905550565b6060612c08848460008585843b6141045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077c565b600080866001600160a01b031685876040516141209190614c95565b60006040518083038185875af1925050503d806000811461415d576040519150601f19603f3d011682016040523d82523d6000602084013e614162565b606091505b509150915061336e8282866060831561417c575081613460565b82511561418c5782518084602001fd5b8160405162461bcd60e51b815260040161077c9190614df5565b8280546141b2906150bd565b90600052602060002090601f0160209004810192826141d4576000855561421a565b82601f106141ed57805160ff191683800117855561421a565b8280016001018555821561421a579182015b8281111561421a5782518255916020019190600101906141ff565b5061422692915061422a565b5090565b5b80821115614226576000815560010161422b565b803561085881615163565b600082601f83011261425a578081fd5b813560206001600160401b038211156142755761427561514d565b8160051b614284828201614fc1565b83815282810190868401838801850189101561429e578687fd5b8693505b858410156142c05780358352600193909301929184019184016142a2565b50979650505050505050565b600082601f8301126142dc578081fd5b81356142ef6142ea82614ff1565b614fc1565b818152846020838601011115614303578283fd5b816020850160208301379081016020019190915292915050565b6000610180808385031215614330578182fd5b61433981614fc1565b9150506143458261423f565b81526143536020830161423f565b602082015260408201356040820152606082013560608201526143786080830161423f565b608082015261438960a0830161423f565b60a082015261439a60c0830161423f565b60c082015260e082013560e0820152610100808301356001600160401b038111156143c457600080fd5b6143d0858286016142cc565b8284015250506101206143e4818401614406565b9082015261014082810135908201526101609182013591810191909152919050565b80356108588161519c565b600060208284031215614422578081fd5b813561346081615163565b6000806040838503121561443f578081fd5b823561444a81615163565b9150602083013561445a81615163565b809150509250929050565b600080600060608486031215614479578081fd5b833561448481615163565b9250602084013561449481615163565b929592945050506040919091013590565b600080600080608085870312156144ba578182fd5b84356144c581615163565b935060208501356144d581615163565b92506040850135915060608501356001600160401b038111156144f6578182fd5b614502878288016142cc565b91505092959194509250565b60008060008060008060c08789031215614526578384fd5b863561453181615163565b9550602087013561454181615163565b94506040870135935060608701356145588161519c565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614586578081fd5b833561459181615163565b925060208401356001600160401b03808211156145ac578283fd5b6145b88783880161424a565b935060408601359150808211156145cd578283fd5b506145da868287016142cc565b9150509250925092565b600080604083850312156145f6578182fd5b823561460181615163565b9150602083013561445a81615178565b60008060008060008060c08789031215614629578384fd5b863561463481615163565b955060208701356001600160401b038082111561464f578586fd5b61465b8a838b016142cc565b96506040890135915080821115614670578586fd5b61467c8a838b016142cc565b95506060890135915080821115614691578384fd5b5061469e89828a0161424a565b93505060808701356146af81615163565b915060a08701356146bf8161519c565b809150509295509295509295565b60008060008060008060c087890312156146e5578384fd5b86356146f081615163565b955060208701356001600160401b038082111561470b578586fd5b6147178a838b016142cc565b9650604089013591508082111561472c578586fd5b5061473989828a016142cc565b9450506060870135925060808701356146af81615163565b60008060408385031215614763578182fd5b823561476e81615163565b946020939093013593505050565b600080600060608486031215614790578081fd5b833561479b81615163565b92506020840135915060408401356001600160401b038111156147bc578182fd5b6145da868287016142cc565b60008060008060008060c087890312156147e0578384fd5b86356147eb81615163565b9550602087013594506040870135935060608701356145588161519c565b6000806040838503121561481b578182fd5b825161482681615163565b602084015190925061445a8161519c565b600060208284031215614848578081fd5b81356001600160401b0381111561485d578182fd5b612c088482850161424a565b60006020828403121561487a578081fd5b815161346081615178565b600060208284031215614896578081fd5b5035919050565b6000602082840312156148ae578081fd5b813561346081615186565b6000602082840312156148ca578081fd5b815161346081615186565b6000602082840312156148e6578081fd5b81356001600160401b038111156148fb578182fd5b612c08848285016142cc565b600060208284031215614918578081fd5b81516001600160401b0381111561492d578182fd5b8201601f8101841361493d578182fd5b805161494b6142ea82614ff1565b81815285602083850101111561495f578384fd5b61497082602083016020860161507a565b95945050505050565b60008060006060848603121561498d578081fd5b83356001600160401b03808211156149a3578283fd5b6149af878388016142cc565b945060208601359150808211156149c4578283fd5b506149d1868287016142cc565b92505060408401356149e281615163565b809150509250925092565b6000602082840312156149fe578081fd5b81356001600160401b03811115614a13578182fd5b612c088482850161431d565b600080828403610140811215614a33578283fd5b83356001600160401b03811115614a48578384fd5b614a548682870161431d565b93505061012080601f1983011215614a6a578283fd5b614a7381614fc1565b915060208501358252614a886040860161423f565b60208301526060850135604083015260808501356060830152614aad60a0860161423f565b6080830152614abe60c0860161423f565b60a0830152614acf60e08601614406565b60c08301526101008581013560e0840152940135938101939093525092909150565b600080600080600060a08688031215614b08578283fd5b85356001600160401b03811115614b1d578384fd5b614b298882890161431d565b95505060208601359350604086013592506060860135614b4881615163565b91506080860135614b5881615163565b809150509295509295909350565b600060208284031215614b77578081fd5b5051919050565b60008060408385031215614b90578182fd5b8235915060208301356001600160401b03811115614bac578182fd5b614bb8858286016142cc565b9150509250929050565b60008060408385031215614bd4578182fd5b50508035926020909101359150565b600080600060608486031215614bf7578081fd5b505081359360208301359350604090920135919050565b600060208284031215614c1f578081fd5b81356134608161519c565b600060208284031215614c3b578081fd5b81516134608161519c565b60008151808452614c5e81602086016020860161507a565b601f01601f19169290920160200192915050565b928352602083019190915260f81b6001600160f81b031916604082015260410190565b60008251614ca781846020870161507a565b9190910192915050565b60008351614cc381846020880161507a565b835190830190614cd781836020880161507a565b64173539b7b760d91b9101908152600501949350505050565b60008451614d0281846020890161507a565b845190830190614d1681836020890161507a565b602f60f81b91019081528351614d3381600184016020880161507a565b64173539b7b760d91b6001929091019182015260060195945050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614da090830184614c46565b9695505050505050565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b600083825260406020830152612c086040830184614c46565b6000602082526134606020830184614c46565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b60208082526017908201527f53484f59553a20494e56414c49445f5245434549564552000000000000000000604082015260600190565b60208082526010908201526f14d213d6554e8814915153951490539560821b604082015260600190565b60208082526017908201527f53484f59553a20494e56414c49445f544f4b454e5f4944000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526013908201527214d213d6554e8815539055551213d492569151606a1b604082015260600190565b600085825260806020830152614f5e6080830186614c46565b6001600160a01b03949094166040830152506060015292915050565b600087825260c06020830152614f9360c0830188614c46565b6001600160a01b03969096166040830152506060810193909352608083019190915260a09091015292915050565b604051601f8201601f191681016001600160401b0381118282101715614fe957614fe961514d565b604052919050565b60006001600160401b0382111561500a5761500a61514d565b50601f01601f191660200190565b6000821982111561502b5761502b615121565b500190565b60008261503f5761503f615137565b500490565b600081600019048311821515161561505e5761505e615121565b500290565b60008282101561507557615075615121565b500390565b60005b8381101561509557818101518382015260200161507d565b83811115610a0b5750506000910152565b6000816150b5576150b5615121565b506000190190565b600181811c908216806150d157607f821691505b6020821081141561200d57634e487b7160e01b600052602260045260246000fd5b600060001982141561510657615106615121565b5060010190565b60008261511c5761511c615137565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134d857600080fd5b80151581146134d857600080fd5b6001600160e01b0319811681146134d857600080fd5b60ff811681146134d857600080fdfea2646970667358221220860a716efe75d647ff70fba93a66008701cb45a62688f5ed1494f316d3040d6c64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102945760003560e01c806370a0823111610167578063a22cb465116100ce578063c87b56dd11610087578063c87b56dd146106e1578063c975e374146106f4578063def2716414610707578063e4623c1b1461071a578063e985e9c51461072d578063f2fde38b1461074057610294565b8063a22cb4651461065d578063aba0784714610670578063ac9a252114610683578063b4e13c8d14610696578063b88d4fde146106bd578063c45a0155146106d057610294565b80639443792c116101205780639443792c146105e657806394d008ef146105f957806395d89b411461060c578063994e7296146106145780639a5d4407146106275780639ecbcda21461064a57610294565b806370a0823114610567578063715018a61461057a57806375e6590f146105825780637ac2ff7b146105a25780638da5cb5b146105b5578063904dfb8e146105c657610294565b80632a55205a1161020b578063559f05dc116101c4578063559f05dc1461046a57806355f804b3146104895780635771f9971461049c5780635f7ef2fa1461052e5780636352211e146105415780636ef8e02d1461055457610294565b80632a55205a146103b657806330adf81f146103e85780633644e5151461040f57806342842e0e1461041757806344f09d111461042a57806350bf994a1461043d57610294565b80630935d6631161025d5780630935d66314610329578063095ea7b31461033c578063141a468c1461034f578063162094c41461037d578063228624821461039057806323b872dd146103a357610294565b8062893bf81461029957806301ffc9a7146102ae57806306fdde03146102d6578063077f224a146102eb578063081812fc146102fe575b600080fd5b6102ac6102a73660046149ed565b610753565b005b6102c16102bc36600461489d565b610830565b60405190151581526020015b60405180910390f35b6102de61085d565b6040516102cd9190614df5565b6102ac6102f9366004614979565b6108ef565b61031161030c366004614885565b610a11565b6040516001600160a01b0390911681526020016102cd565b6102ac6103373660046149ed565b610a61565b6102ac61034a366004614751565b610dd3565b61036f61035d366004614885565b600d6020526000908152604090205481565b6040519081526020016102cd565b6102ac61038b366004614b7e565b610e7d565b6102ac61039e366004614572565b610ec6565b6102ac6103b1366004614465565b610f4f565b6103c96103c4366004614bc2565b610fca565b604080516001600160a01b0390931683526020830191909152016102cd565b61036f7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60095461036f565b6102ac610425366004614465565b61100e565b6102c1610438366004614af1565b611029565b6013546040805161010083046001600160a01b03168152600160a81b90920460ff166020830152016102cd565b6102c1610478366004614411565b6001600160a01b0381163014919050565b6102ac6104973660046148d5565b611079565b6104ef6104aa366004614885565b6010602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293918316929091169086565b604080516001600160a01b03978816815260208101969096528501939093529084166060840152909216608082015260a081019190915260c0016102cd565b6102ac61053c366004614c0e565b6110ba565b61031161054f366004614885565b6111f5565b6102ac610562366004614411565b611210565b61036f610575366004614411565b6112e6565b6102ac611351565b61036f610590366004614885565b60126020526000908152604090205481565b6102ac6105b03660046147c8565b6113c5565b6008546001600160a01b0316610311565b61036f6105d4366004614411565b600e6020526000908152604090205481565b6102ac6105f4366004614be3565b61170c565b6102ac61060736600461477c565b611784565b6102de6117dd565b6102c1610622366004614885565b6117ec565b6102c1610635366004614885565b60116020526000908152604090205460ff1681565b6102ac610658366004614611565b6117f7565b6102ac61066b3660046145e4565b611994565b6102ac61067e36600461450e565b61199f565b6102ac6106913660046146cd565b611c94565b61036f7fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b6102ac6106cb3660046144a5565b611d4c565b600a546001600160a01b0316610311565b6102de6106ef366004614885565b611d7e565b6102ac610702366004614885565b612013565b6102c1610715366004614a1f565b612085565b6102ac610728366004614837565b6121ad565b6102c161073b36600461442d565b61223a565b6102ac61074e366004614411565b612268565b80516001600160a01b031633146107855760405162461bcd60e51b815260040161077c90614e08565b60405180910390fd5b600061079082612344565b6000818152601060205260409020549091506001600160a01b0316156107ec5760405162461bcd60e51b815260206004820152601160248201527053484f59553a204249445f45584953545360781b604482015260640161077c565b600081815260116020526040808220805460ff191660011790555182917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25050565b600063152a902d60e11b6001600160e01b031983161480610855575061085582612422565b90505b919050565b60606001805461086c906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054610898906150bd565b80156108e55780601f106108ba576101008083540402835291602001916108e5565b820191906000526020600020905b8154815290600101906020018083116108c857829003601f168201915b5050505050905090565b600054610100900460ff1680610908575060005460ff16155b6109245760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015610946576000805461ffff19166101011790555b6109508484612472565b610959826124e9565b600a80546001600160a01b031916331790558351602080860191909120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f938101939093528201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c00160408051601f198184030181529190528051602090910120600955508015610a0b576000805461ff00191690555b50505050565b6000818152600460205260408120546001600160a01b0316610a455760405162461bcd60e51b815260040161077c90614e93565b506000908152600660205260409020546001600160a01b031690565b6002600f541415610a845760405162461bcd60e51b815260040161077c90614e69565b6002600f5560208101516001600160a01b03163014610adf5760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b604482015260640161077c565b6000610aea82612344565b9050610af6828261255e565b610b16818360000151846101200151856101400151866101600151612823565b600081815260106020908152604091829020825160c08101845281546001600160a01b039081168083526001840154948301949094526002830154828601819052600384015482166060840152600480850154831660808086019190915260059095015460a08501529388015160e08901516101008a0151975163e01be26360e01b81529497919093169563e01be26395610bb5959293919201614f45565b60206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190614869565b610c425760405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b604482015260640161077c565b60c08301516001600160a01b038116610c59575082515b610c808460a0015183600001518385602001518660400151610c7b9190615044565b6129d2565b15610d875760208083015160008581526012909252604090912054610ca59190615018565b60008481526012602052604090205560608201516001600160a01b038116610ccb575081515b610ce8856020015186600001518388604001518760200151612c10565b600084815260106020908152604080832080546001600160a01b03199081168255600182018590556002820185905560038201805482169055600482018054909116905560050192909255845190850151858301516080870151935188947f72fd87c5ad3903eb05815544ef7ea4640a18e631c9c02eb099c810834f82355594610d79949093909290918891614daa565b60405180910390a250610dc8565b600083815260116020526040808220805460ff191660011790555184917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25b50506001600f555050565b6000610dde826111f5565b9050806001600160a01b0316836001600160a01b03161415610e365760405162461bcd60e51b815260206004820152601160248201527053484f59553a20494e56414c49445f544f60781b604482015260640161077c565b336001600160a01b0382161480610e525750610e52813361223a565b610e6e5760405162461bcd60e51b815260040161077c90614e08565b610e788383612c57565b505050565b6008546001600160a01b03163314610ea75760405162461bcd60e51b815260040161077c90614e08565b6000828152600c602090815260409091208251610e78928401906141a6565b33610ed96008546001600160a01b031690565b6001600160a01b031614610eff5760405162461bcd60e51b815260040161077c90614e08565b60005b8251811015610a0b57610f3d84848381518110610f2f57634e487b7160e01b600052603260045260246000fd5b602002602001015184612cc5565b80610f47816150f2565b915050610f02565b610f593382612cf8565b610fbf5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161077c565b610e78838383612d82565b601354600090819061010081046001600160a01b0316906103e890610ff990600160a81b900460ff1686615044565b6110039190615030565b915091509250929050565b610e7883838360405180602001604052806000815250611d4c565b60006002600f54141561104e5760405162461bcd60e51b815260040161077c90614e69565b6002600f5561106a8661106081612344565b3388888888612f22565b6001600f559695505050505050565b6008546001600160a01b031633146110a35760405162461bcd60e51b815260040161077c90614e08565b80516110b690600b9060208401906141a6565b5050565b6008546001600160a01b031633146110e45760405162461bcd60e51b815260040161077c90614e08565b601354600160a81b900460ff908116141561114c5760135460ff90811690821611156111475760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b604482015260640161077c565b6111a0565b60135460ff600160a81b9091048116908216106111a05760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b604482015260640161077c565b6013805460ff60a81b1916600160a81b60ff8416908102919091179091556040519081527fd9ac3bc8ad92267d0b101786ddb4d37746ed1e3ee77637846294edf17dd9eb8a906020015b60405180910390a150565b6000908152600460205260409020546001600160a01b031690565b6008546001600160a01b0316331461123a5760405162461bcd60e51b815260040161077c90614e08565b6001600160a01b0381166112905760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e5400000000604482015260640161077c565b60138054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f1ce5f25607cb1a4fa6c947b55700213a9ed6a1d7ef1cf1d02ab467efd02a993e906020016111ea565b60006001600160a01b0382166113355760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa7aba722a960611b604482015260640161077c565b506001600160a01b031660009081526005602052604090205490565b6008546001600160a01b0316331461137b5760405162461bcd60e51b815260040161077c90614e08565b6008546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600880546001600160a01b0319169055565b834211156114065760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b604482015260640161077c565b6009546000868152600d602090815260408083205481517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad818501526001600160a01b038c1681840152606081018b9052608081019190915260a08082018a90528251808303909101815260c0820190925281519190920120919261148f92909160e001614d52565b6040516020818303038152906040528051906020012090506001600d600088815260200190815260200160002060008282546114cb9190615018565b90915550600090506114dc876111f5565b9050806001600160a01b0316886001600160a01b031614156115375760405162461bcd60e51b815260206004820152601460248201527353484f59553a204e4f545f4e454345535341525960601b604482015260640161077c565b803b1561161357806001600160a01b0316631626ba7e8386868960405160200161156393929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161158f929190614ddc565b60206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906148b9565b6001600160e01b031916631626ba7e60e01b1461160e5760405162461bcd60e51b815260040161077c90614f18565b6116f8565b6040805160008082526020820180845285905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611667573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116c55760405162461bcd60e51b815260206004820152601860248201527753484f59553a20494e56414c49445f5349474e415455524560401b604482015260640161077c565b816001600160a01b0316816001600160a01b0316146116f65760405162461bcd60e51b815260040161077c90614f18565b505b6117028888612c57565b5050505050505050565b33611716846111f5565b6001600160a01b03161461173c5760405162461bcd60e51b815260040161077c90614e08565b61174583613379565b817f94b3f0faea6b3f73e3a1aa978781772e16c3f2198f55f3ee6802f60bbdc5ae4d8260405161177791815260200190565b60405180910390a2505050565b600a546001600160a01b03163314806117b65750336117ab6008546001600160a01b031690565b6001600160a01b0316145b6117d25760405162461bcd60e51b815260040161077c90614e08565b610e78838383612cc5565b60606002805461086c906150bd565b60006108558261343a565b600054610100900460ff1680611810575060005460ff16155b61182c5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff1615801561184e576000805461ffff19166101011790555b611856613467565b6118618686896108ef565b600a60009054906101000a90046001600160a01b03166001600160a01b03166317e1f82e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190614c2a565b6013805460ff191660ff9290921691909117905560005b845181101561194a576119388886838151811061192b57634e487b7160e01b600052603260045260246000fd5b60200260200101516134db565b80611942816150f2565b9150506118fe565b5061195483611210565b6013805460ff60a81b191660ff60a81b17905560ff82161561197957611979826110ba565b801561198b576000805461ff00191690555b50505050505050565b6110b63383836134f5565b834211156119e05760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b604482015260640161077c565b6009546001600160a01b038781166000818152600e602090815260408083205481517fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6293810193909352908201939093529289166060840152608083019190915260a08201879052919060c00160405160208183030381529060405280519060200120604051602001611a74929190614d52565b6040516020818303038152906040528051906020012090506001600e6000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ac29190615018565b9091555050863b15611ba357866001600160a01b0316631626ba7e82858588604051602001611af393929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611b1f929190614ddc565b60206040518083038186803b158015611b3757600080fd5b505afa158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f91906148b9565b6001600160e01b031916631626ba7e60e01b14611b9e5760405162461bcd60e51b815260040161077c90614f18565b611c88565b6040805160008082526020820180845284905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611bf7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c555760405162461bcd60e51b815260206004820152601860248201527753484f59553a20494e56414c49445f5349474e415455524560401b604482015260640161077c565b876001600160a01b0316816001600160a01b031614611c865760405162461bcd60e51b815260040161077c90614f18565b505b61198b878760016134f5565b600054610100900460ff1680611cad575060005460ff16155b611cc95760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015611ceb576000805461ffff19166101011790555b611cf3613467565b611cfe8686896108ef565b611d07846135c4565b6040518481527fbd3ebe8ad09ded9d19d849088ef41c06e6369d712810f47ad52751826c17ff949060200160405180910390a1611d4383611210565b611979826110ba565b611d563383612cf8565b611d725760405162461bcd60e51b815260040161077c90614e08565b610a0b8484848461361c565b6000818152600460205260409020546060906001600160a01b0316151580611daa5750611daa8261343a565b611dc65760405162461bcd60e51b815260040161077c90614e93565b6000828152600c602052604081208054611ddf906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b906150bd565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b50505050509050600081511115611e70579050610858565b6000600b8054611e7f906150bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611eab906150bd565b8015611ef85780601f10611ecd57610100808354040283529160200191611ef8565b820191906000526020600020905b815481529060010190602001808311611edb57829003601f168201915b50505050509050600081511115611f3c5780611f138561364f565b604051602001611f24929190614cb1565b60405160208183030381529060405292505050610858565b600a60009054906101000a90046001600160a01b03166001600160a01b0316633683a63d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fc69190810190614907565b90506000611fd5306014613769565b90508181611fe28761364f565b604051602001611ff493929190614cf0565b6040516020818303038152906040529350505050610858565b50919050565b336120266008546001600160a01b031690565b6001600160a01b03161461204c5760405162461bcd60e51b815260040161077c90614e08565b612055816135c4565b6040518181527fbd3ebe8ad09ded9d19d849088ef41c06e6369d712810f47ad52751826c17ff94906020016111ea565b60006002600f5414156120aa5760405162461bcd60e51b815260040161077c90614e69565b6002600f5560006120ba84612344565b835190915081146121055760405162461bcd60e51b81526020600482015260156024820152740a6909eb2aa7440aa9c9a82a886908a88be9082a69605b1b604482015260640161077c565b60208301516001600160a01b03166121575760405162461bcd60e51b815260206004820152601560248201527429a427acaa9d1024a72b20a624a22fa9a4a3a722a960591b604482015260640161077c565b61217d6121638461394a565b84602001518560c001518660e00151876101000151612823565b6121a0848285602001518660400151876060015188608001518960a00151612f22565b6001600f55949350505050565b60005b81518110156110b65760008282815181106121db57634e487b7160e01b600052603260045260246000fd5b60200260200101519050336001600160a01b03166121f8826111f5565b6001600160a01b03161461221e5760405162461bcd60e51b815260040161077c90614e08565b61222781613379565b5080612232816150f2565b9150506121b0565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6008546001600160a01b031633146122925760405162461bcd60e51b815260040161077c90614e08565b6001600160a01b0381166122e85760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f4e45575f4f574e45520000000000000000604482015260640161077c565b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01518051908a0120965160009a6124059a7f17fdf8831f8bd77353b30f42ba9bc64e7144545a42a890389f298feeb45dec889a9199919897969594939201998a526001600160a01b0398891660208b015296881660408a01526060890195909552608088019390935290851660a0870152841660c086015290921660e08401526101008301919091526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b60006001600160e01b031982166380ac58cd60e01b148061245357506001600160e01b03198216635b5e139f60e01b145b8061085557506301ffc9a760e01b6001600160e01b0319831614610855565b600054610100900460ff168061248b575060005460ff16155b6124a75760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff161580156124c9576000805461ffff19166101011790555b6124d383836139d5565b8015610e78576000805461ff0019169055505050565b600054610100900460ff1680612502575060005460ff16155b61251e5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015612540576000805461ffff19166101011790555b61254982613a6a565b80156110b6576000805461ff00191690555050565b60008181526011602052604090205460ff16156125b05760405162461bcd60e51b815260206004820152601060248201526f14d213d6554e8810d05390d15313115160821b604482015260640161077c565b81516001600160a01b03166125fe5760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa6a0a5a2a960611b604482015260640161077c565b60208201516001600160a01b031661264d5760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881253959053125117d3919560721b604482015260640161077c565b60008260600151116126995760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b604482015260640161077c565b60808201516001600160a01b03166126f35760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f5354524154454759000000000000000000604482015260640161077c565b60a08201516001600160a01b031661274d5760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f43555252454e4359000000000000000000604482015260640161077c565b600a546001600160a01b03166080830151604051632666e89f60e21b81526001600160a01b03918216600482015291169063999ba27c9060240160206040518083038186803b15801561279f57600080fd5b505afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190614869565b6110b65760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a2053545241544547595f4e4f545f57484954454c495354454400604482015260640161077c565b600061282e60095490565b86604051602001612840929190614d52565b604051602081830303815290604052805190602001209050612862853b151590565b1561293c57846001600160a01b0316631626ba7e8285858860405160200161288c93929190614c72565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016128b8929190614ddc565b60206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290891906148b9565b6001600160e01b031916631626ba7e60e01b146129375760405162461bcd60e51b815260040161077c90614f18565b6129ca565b60408051600081526020810180835283905260ff86169181019190915260608101849052608081018390526001600160a01b0386169060019060a0016020604051602081039080840390855afa15801561299a573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146129ca5760405162461bcd60e51b815260040161077c90614f18565b505050505050565b60006129e085853085613b1f565b6129ec57506000612c08565b6000612a00600a546001600160a01b031690565b90506000839050600080836001600160a01b031663aec0b5436040518163ffffffff1660e01b8152600401604080518083038186803b158015612a4257600080fd5b505afa158015612a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7a9190614809565b909250905060006103e8612a9160ff841689615044565b612a9b9190615030565b9050612ab16001600160a01b038b168483613bf1565b612abb8185615063565b9350505050600080836001600160a01b031663c2b11e186040518163ffffffff1660e01b8152600401604080518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b339190614809565b909250905060006103e8612b4a60ff841689615044565b612b549190615030565b9050612b6a6001600160a01b038b168483613bf1565b612b748185615063565b9350505050600080612b9f60135461010081046001600160a01b031691600160a81b90910460ff1690565b909250905060ff80821614612beb5760006103e8612bc060ff841686615044565b612bca9190615030565b90508015612be957612bdc8185615063565b9350612be98a8483613c43565b505b612bff6001600160a01b038a168885613bf1565b60019450505050505b949350505050565b6008546001600160a01b038581169116148015612c315750612c318261343a565b15612c4557612c4083836134db565b612c50565b612c50848484612d82565b5050505050565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612c8c826111f5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b612ccf8383613cd2565b612cdc6000848484613e00565b610e785760405162461bcd60e51b815260040161077c90614e32565b6000818152600460205260408120546001600160a01b0316612d2c5760405162461bcd60e51b815260040161077c90614e93565b6000612d37836111f5565b9050806001600160a01b0316846001600160a01b03161480612d725750836001600160a01b0316612d6784610a11565b6001600160a01b0316145b80612c085750612c08818561223a565b826001600160a01b0316612d95826111f5565b6001600160a01b031614612dfd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161077c565b6001600160a01b038216612e5f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161077c565b612e6a600082612c57565b6001600160a01b0383166000908152600560205260408120805460019290612e93908490615063565b90915550506001600160a01b0382166000908152600560205260408120805460019290612ec1908490615018565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60208701516000906001600160a01b03163014612f7b5760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b604482015260640161077c565b60008511612fc35760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b604482015260640161077c565b6000878152601260205260409020546060890151612fe18783615018565b11156130215760405162461bcd60e51b815260206004820152600f60248201526e14d213d6554e8814d3d31117d3d555608a1b604482015260640161077c565b61302b898961255e565b61304b888a600001518b61012001518c61014001518d6101600151612823565b88608001516001600160a01b031663e01be2638a60e001518b61010001518a896040518563ffffffff1660e01b815260040161308a9493929190614f45565b60206040518083038186803b1580156130a257600080fd5b505afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190614869565b156131e6576130e98682615018565b60008981526012602052604090205560c08901516001600160a01b03811661310f575088515b60a08a0151613124908983610c7b8b8b615044565b6131705760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e445300604482015260640161077c565b6001600160a01b038516613182578794505b61319b8a602001518b60000151878d604001518b612c10565b887f72fd87c5ad3903eb05815544ef7ea4640a18e631c9c02eb099c810834f82355589898989896040516131d3959493929190614daa565b60405180910390a260019250505061336e565b6000888152601060205260409081902060808b015160e08c01516101008d0151600284015460058501549551633140c34d60e11b815294956001600160a01b0390941694636281869a946132439493928f928e9290600401614f7a565b60206040518083038186803b15801561325b57600080fd5b505afa15801561326f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132939190614869565b156133345780546001600160a01b03808a166001600160a01b031992831617835560018301899055600283018890556003830180548883169084161790556004830180549187169190921617905543600582015560405189907f4055f76fe1f351fec66b9ba790ddbdc29eb45c038163a6b1327277441a8c65f190613321908b908b908b908b908b90614daa565b60405180910390a260009250505061336e565b5060405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b604482015260640161077c565b979650505050505050565b6000613384826111f5565b90506001600160a01b0381166133ac5760405162461bcd60e51b815260040161077c90614e93565b6133b7600083612c57565b6001600160a01b03811660009081526005602052604081208054600192906133e0908490615063565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080613446836111f5565b90506001600160a01b038116158015613460575060035483105b9392505050565b600054610100900460ff1680613480575060005460ff16155b61349c5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff161580156134be576000805461ffff19166101011790555b6134c6613f0a565b80156134d8576000805461ff00191690555b50565b6110b6828260405180602001604052806000815250612cc5565b826001600160a01b0316826001600160a01b031614156135575760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f4f50455241544f52000000000000000000604482015260640161077c565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6003548082116136165760405162461bcd60e51b815260206004820152601a60248201527f53484f59553a20494e56414c49445f544f5f544f4b454e5f4944000000000000604482015260640161077c565b50600355565b613627848484612d82565b61363384848484613e00565b610a0b5760405162461bcd60e51b815260040161077c90614e32565b60608161367457506040805180820190915260018152600360fc1b6020820152610858565b8160005b811561369e5780613688816150f2565b91506136979050600a83615030565b9150613678565b6000816001600160401b038111156136c657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136f0576020820181803683370190505b5090505b8415612c0857613705600183615063565b9150613712600a8661510d565b61371d906030615018565b60f81b81838151811061374057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613762600a86615030565b94506136f4565b60606000613778836002615044565b613783906002615018565b6001600160401b038111156137a857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137d2576020820181803683370190505b509050600360fc1b816000815181106137fb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061383857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061385c846002615044565b613867906001615018565b90505b60018111156138fb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106138a957634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106138cd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936138f4816150a6565b905061386a565b5083156134605760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161077c565b80516020808301516040808501516060860151608087015160a08801519351600097612405977fb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b297919691959493920196875260208701959095526001600160a01b03938416604087015260608601929092526080850152811660a08401521660c082015260e00190565b600054610100900460ff16806139ee575060005460ff16155b613a0a5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613a2c576000805461ffff19166101011790555b8251613a3f9060019060208601906141a6565b508151613a539060029060208501906141a6565b508015610e78576000805461ff0019169055505050565b600054610100900460ff1680613a83575060005460ff16155b613a9f5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613ac1576000805461ffff19166101011790555b600880546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156110b6576000805461ff00191690555050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392839291891691613b859190614c95565b6000604051808303816000865af19150503d8060008114613bc2576040519150601f19603f3d011682016040523d82523d6000602084013e613bc7565b606091505b509150915081801561336e57508051158061336e57508080602001905181019061336e9190614869565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e78908490613f69565b613c576001600160a01b0384168383613bf1565b813b15610e7857816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613c9957600080fd5b505af1925050508015613cc9575060408051601f3d908101601f19168201909252613cc691810190614b66565b60015b610a0b57610e78565b6001600160a01b038216613d1c5760405162461bcd60e51b815260206004820152601160248201527053484f59553a20494e56414c49445f544f60781b604482015260640161077c565b6000818152600460205260409020546001600160a01b031615613d795760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881053149150511657d35253951151605a1b604482015260640161077c565b6001600160a01b0382166000908152600560205260408120805460019290613da2908490615018565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613f0257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613e44903390899088908890600401614d6d565b602060405180830381600087803b158015613e5e57600080fd5b505af1925050508015613e8e575060408051601f3d908101601f19168201909252613e8b918101906148b9565b60015b613ee8573d808015613ebc576040519150601f19603f3d011682016040523d82523d6000602084013e613ec1565b606091505b508051613ee05760405162461bcd60e51b815260040161077c90614e32565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c08565b506001612c08565b600054610100900460ff1680613f23575060005460ff16155b613f3f5760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015613f61576000805461ffff19166101011790555b6134c661403b565b6000613fbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140ab9092919063ffffffff16565b805190915015610e785780806020019051810190613fdc9190614869565b610e785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161077c565b600054610100900460ff1680614054575060005460ff16155b6140705760405162461bcd60e51b815260040161077c90614eca565b600054610100900460ff16158015614092576000805461ffff19166101011790555b6001600f5580156134d8576000805461ff001916905550565b6060612c08848460008585843b6141045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161077c565b600080866001600160a01b031685876040516141209190614c95565b60006040518083038185875af1925050503d806000811461415d576040519150601f19603f3d011682016040523d82523d6000602084013e614162565b606091505b509150915061336e8282866060831561417c575081613460565b82511561418c5782518084602001fd5b8160405162461bcd60e51b815260040161077c9190614df5565b8280546141b2906150bd565b90600052602060002090601f0160209004810192826141d4576000855561421a565b82601f106141ed57805160ff191683800117855561421a565b8280016001018555821561421a579182015b8281111561421a5782518255916020019190600101906141ff565b5061422692915061422a565b5090565b5b80821115614226576000815560010161422b565b803561085881615163565b600082601f83011261425a578081fd5b813560206001600160401b038211156142755761427561514d565b8160051b614284828201614fc1565b83815282810190868401838801850189101561429e578687fd5b8693505b858410156142c05780358352600193909301929184019184016142a2565b50979650505050505050565b600082601f8301126142dc578081fd5b81356142ef6142ea82614ff1565b614fc1565b818152846020838601011115614303578283fd5b816020850160208301379081016020019190915292915050565b6000610180808385031215614330578182fd5b61433981614fc1565b9150506143458261423f565b81526143536020830161423f565b602082015260408201356040820152606082013560608201526143786080830161423f565b608082015261438960a0830161423f565b60a082015261439a60c0830161423f565b60c082015260e082013560e0820152610100808301356001600160401b038111156143c457600080fd5b6143d0858286016142cc565b8284015250506101206143e4818401614406565b9082015261014082810135908201526101609182013591810191909152919050565b80356108588161519c565b600060208284031215614422578081fd5b813561346081615163565b6000806040838503121561443f578081fd5b823561444a81615163565b9150602083013561445a81615163565b809150509250929050565b600080600060608486031215614479578081fd5b833561448481615163565b9250602084013561449481615163565b929592945050506040919091013590565b600080600080608085870312156144ba578182fd5b84356144c581615163565b935060208501356144d581615163565b92506040850135915060608501356001600160401b038111156144f6578182fd5b614502878288016142cc565b91505092959194509250565b60008060008060008060c08789031215614526578384fd5b863561453181615163565b9550602087013561454181615163565b94506040870135935060608701356145588161519c565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614586578081fd5b833561459181615163565b925060208401356001600160401b03808211156145ac578283fd5b6145b88783880161424a565b935060408601359150808211156145cd578283fd5b506145da868287016142cc565b9150509250925092565b600080604083850312156145f6578182fd5b823561460181615163565b9150602083013561445a81615178565b60008060008060008060c08789031215614629578384fd5b863561463481615163565b955060208701356001600160401b038082111561464f578586fd5b61465b8a838b016142cc565b96506040890135915080821115614670578586fd5b61467c8a838b016142cc565b95506060890135915080821115614691578384fd5b5061469e89828a0161424a565b93505060808701356146af81615163565b915060a08701356146bf8161519c565b809150509295509295509295565b60008060008060008060c087890312156146e5578384fd5b86356146f081615163565b955060208701356001600160401b038082111561470b578586fd5b6147178a838b016142cc565b9650604089013591508082111561472c578586fd5b5061473989828a016142cc565b9450506060870135925060808701356146af81615163565b60008060408385031215614763578182fd5b823561476e81615163565b946020939093013593505050565b600080600060608486031215614790578081fd5b833561479b81615163565b92506020840135915060408401356001600160401b038111156147bc578182fd5b6145da868287016142cc565b60008060008060008060c087890312156147e0578384fd5b86356147eb81615163565b9550602087013594506040870135935060608701356145588161519c565b6000806040838503121561481b578182fd5b825161482681615163565b602084015190925061445a8161519c565b600060208284031215614848578081fd5b81356001600160401b0381111561485d578182fd5b612c088482850161424a565b60006020828403121561487a578081fd5b815161346081615178565b600060208284031215614896578081fd5b5035919050565b6000602082840312156148ae578081fd5b813561346081615186565b6000602082840312156148ca578081fd5b815161346081615186565b6000602082840312156148e6578081fd5b81356001600160401b038111156148fb578182fd5b612c08848285016142cc565b600060208284031215614918578081fd5b81516001600160401b0381111561492d578182fd5b8201601f8101841361493d578182fd5b805161494b6142ea82614ff1565b81815285602083850101111561495f578384fd5b61497082602083016020860161507a565b95945050505050565b60008060006060848603121561498d578081fd5b83356001600160401b03808211156149a3578283fd5b6149af878388016142cc565b945060208601359150808211156149c4578283fd5b506149d1868287016142cc565b92505060408401356149e281615163565b809150509250925092565b6000602082840312156149fe578081fd5b81356001600160401b03811115614a13578182fd5b612c088482850161431d565b600080828403610140811215614a33578283fd5b83356001600160401b03811115614a48578384fd5b614a548682870161431d565b93505061012080601f1983011215614a6a578283fd5b614a7381614fc1565b915060208501358252614a886040860161423f565b60208301526060850135604083015260808501356060830152614aad60a0860161423f565b6080830152614abe60c0860161423f565b60a0830152614acf60e08601614406565b60c08301526101008581013560e0840152940135938101939093525092909150565b600080600080600060a08688031215614b08578283fd5b85356001600160401b03811115614b1d578384fd5b614b298882890161431d565b95505060208601359350604086013592506060860135614b4881615163565b91506080860135614b5881615163565b809150509295509295909350565b600060208284031215614b77578081fd5b5051919050565b60008060408385031215614b90578182fd5b8235915060208301356001600160401b03811115614bac578182fd5b614bb8858286016142cc565b9150509250929050565b60008060408385031215614bd4578182fd5b50508035926020909101359150565b600080600060608486031215614bf7578081fd5b505081359360208301359350604090920135919050565b600060208284031215614c1f578081fd5b81356134608161519c565b600060208284031215614c3b578081fd5b81516134608161519c565b60008151808452614c5e81602086016020860161507a565b601f01601f19169290920160200192915050565b928352602083019190915260f81b6001600160f81b031916604082015260410190565b60008251614ca781846020870161507a565b9190910192915050565b60008351614cc381846020880161507a565b835190830190614cd781836020880161507a565b64173539b7b760d91b9101908152600501949350505050565b60008451614d0281846020890161507a565b845190830190614d1681836020890161507a565b602f60f81b91019081528351614d3381600184016020880161507a565b64173539b7b760d91b6001929091019182015260060195945050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614da090830184614c46565b9695505050505050565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b600083825260406020830152612c086040830184614c46565b6000602082526134606020830184614c46565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b60208082526017908201527f53484f59553a20494e56414c49445f5245434549564552000000000000000000604082015260600190565b60208082526010908201526f14d213d6554e8814915153951490539560821b604082015260600190565b60208082526017908201527f53484f59553a20494e56414c49445f544f4b454e5f4944000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526013908201527214d213d6554e8815539055551213d492569151606a1b604082015260600190565b600085825260806020830152614f5e6080830186614c46565b6001600160a01b03949094166040830152506060015292915050565b600087825260c06020830152614f9360c0830188614c46565b6001600160a01b03969096166040830152506060810193909352608083019190915260a09091015292915050565b604051601f8201601f191681016001600160401b0381118282101715614fe957614fe961514d565b604052919050565b60006001600160401b0382111561500a5761500a61514d565b50601f01601f191660200190565b6000821982111561502b5761502b615121565b500190565b60008261503f5761503f615137565b500490565b600081600019048311821515161561505e5761505e615121565b500290565b60008282101561507557615075615121565b500390565b60005b8381101561509557818101518382015260200161507d565b83811115610a0b5750506000910152565b6000816150b5576150b5615121565b506000190190565b600181811c908216806150d157607f821691505b6020821081141561200d57634e487b7160e01b600052602260045260246000fd5b600060001982141561510657615106615121565b5060010190565b60008261511c5761511c615137565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134d857600080fd5b80151581146134d857600080fd5b6001600160e01b0319811681146134d857600080fd5b60ff811681146134d857600080fdfea2646970667358221220860a716efe75d647ff70fba93a66008701cb45a62688f5ed1494f316d3040d6c64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9409,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 9411,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 9413,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_toTokenIdParked",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9417,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9421,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9425,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9431,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10285,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6449,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 6451,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_factory",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6453,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "__baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 6457,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6462,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "nonces",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6467,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "noncesForAll",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10468,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_status",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4974,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "bestBid",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_struct(BestBid)4968_storage)"
      },
      {
        "astId": 4979,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "isCancelled",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4984,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "amountFilled",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3226,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_MAX_ROYALTY_FEE",
        "offset": 0,
        "slot": "19",
        "type": "t_uint8"
      },
      {
        "astId": 3228,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_royaltyFeeRecipient",
        "offset": 1,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 3230,
        "contract": "contracts/NFT721V0.sol:NFT721V0",
        "label": "_royaltyFee",
        "offset": 21,
        "slot": "19",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(BestBid)4968_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BaseExchange.BestBid)",
        "numberOfBytes": "32",
        "value": "t_struct(BestBid)4968_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BestBid)4968_storage": {
        "encoding": "inplace",
        "label": "struct BaseExchange.BestBid",
        "members": [
          {
            "astId": 4957,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4959,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4961,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4963,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "recipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4965,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "referrer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4967,
            "contract": "contracts/NFT721V0.sol:NFT721V0",
            "label": "blockNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}