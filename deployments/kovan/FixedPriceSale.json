{
  "address": "0xa6b28EbF1d888bC5a9693C77A1289181E8ba7Ec5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda5696de5df8e35628e87e988a6edfc6eed305c8289f3d9afe30a385141326ed",
  "receipt": {
    "to": null,
    "from": "0x80417137E490A5091dCAB34E85C457BB97c93161",
    "contractAddress": "0xa6b28EbF1d888bC5a9693C77A1289181E8ba7Ec5",
    "transactionIndex": 0,
    "gasUsed": "219530",
    "logsBloom": "0x
    "blockHash": "0xee1d736d839ac9d1ef2d612cb38c6e6849fd3fd895861b15895b896d713368ef",
    "transactionHash": "0xda5696de5df8e35628e87e988a6edfc6eed305c8289f3d9afe30a385141326ed",
    "logs": [],
    "blockNumber": 28087445,
    "cumulativeGasUsed": "219530",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cb373d8b36db2c818fd0f331d5b9d473",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/FixedPriceSale.sol\":\"FixedPriceSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IStrategy {\\n    function canClaim(\\n        address proxy,\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        address bestBidder,\\n        uint256 bestBidPrice,\\n        uint256 bestBidTimestamp\\n    ) external view returns (bool);\\n\\n    function canBid(\\n        address proxy,\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        address bestBidder,\\n        uint256 bestBidPrice,\\n        uint256 bestBidTimestamp\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9523c2173e0661cecb24d35404c65dc63660772f5247bacc141e485513d22b5f\",\"license\":\"MIT\"},\"contracts/libraries/Orders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nlibrary Orders {\\n    // keccak256(\\\"Ask(address signer,address proxy,address token,uint256 tokenId,uint256 amount,address strategy,address currency,address recipient,uint256 deadline,bytes params)\\\")\\n    bytes32 internal constant ASK_TYPEHASH = 0x5fbc9a24e1532fa5245d1ec2dc5592849ae97ac5475f361b1a1f7a6e2ac9b2fd;\\n    // keccak256(\\\"Bid(bytes32 askHash,address signer,uint256 amount,uint256 price,address recipient,address referrer)\\\")\\n    bytes32 internal constant BID_TYPEHASH = 0xb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b2;\\n\\n    struct Ask {\\n        address signer;\\n        address proxy;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address strategy;\\n        address currency;\\n        address recipient;\\n        uint256 deadline;\\n        bytes params;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Bid {\\n        bytes32 askHash;\\n        address signer;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function hash(Ask memory ask) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ASK_TYPEHASH,\\n                    ask.signer,\\n                    ask.proxy,\\n                    ask.token,\\n                    ask.tokenId,\\n                    ask.amount,\\n                    ask.strategy,\\n                    ask.currency,\\n                    ask.recipient,\\n                    ask.deadline,\\n                    keccak256(ask.params)\\n                )\\n            );\\n    }\\n\\n    function hash(Bid memory bid) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(BID_TYPEHASH, bid.askHash, bid.signer, bid.amount, bid.price, bid.recipient, bid.referrer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf6bf58506ceb341b7d4664dd3ba50b682a2d823dfa1473180328e170226e877d\",\"license\":\"MIT\"},\"contracts/strategies/FixedPriceSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\ncontract FixedPriceSale is IStrategy {\\n    function canClaim(\\n        address proxy,\\n        uint256 deadline,\\n        bytes memory params,\\n        address,\\n        uint256 bidPrice,\\n        address,\\n        uint256,\\n        uint256\\n    ) external view override returns (bool) {\\n        (uint256 price, uint256 startedAt) = abi.decode(params, (uint256, uint256));\\n        require(price > 0, \\\"SHOYU: INVALID_PRICE\\\");\\n        require(startedAt < deadline, \\\"SHOYU: INVALID_STARTED_AT\\\");\\n        uint256 timestamp = block.timestamp;\\n        return (proxy != address(0) || (startedAt <= timestamp && timestamp < deadline)) && bidPrice == price;\\n    }\\n\\n    function canBid(\\n        address,\\n        uint256,\\n        bytes memory,\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x94e6a34cac9752b138113c00ca3de791a928ac14c531bca91e123d14f9df286e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610302806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063610e2d3b1461003b578063e9b3838f14610062575b600080fd5b61004e61004936600461018f565b61007e565b604051901515815260200160405180910390f35b61004e61007036600461018f565b600098975050505050505050565b6000806000888060200190518101906100979190610293565b91509150600082116100e75760405162461bcd60e51b815260206004820152601460248201527353484f59553a20494e56414c49445f505249434560601b60448201526064015b60405180910390fd5b8981106101365760405162461bcd60e51b815260206004820152601960248201527f53484f59553a20494e56414c49445f535441525445445f41540000000000000060448201526064016100de565b426001600160a01b038c16151580610158575080821115801561015857508a81105b801561016357508288145b9c9b505050505050505050505050565b80356001600160a01b038116811461018a57600080fd5b919050565b600080600080600080600080610100898b0312156101ab578384fd5b6101b489610173565b975060208901359650604089013567ffffffffffffffff808211156101d7578586fd5b818b0191508b601f8301126101ea578586fd5b8135818111156101fc576101fc6102b6565b604051601f8201601f19908116603f01168101908382118183101715610224576102246102b6565b816040528281528e602084870101111561023c578889fd5b8260208601602083013791820160200188905250975061026191505060608a01610173565b94506080890135935061027660a08a01610173565b925060c0890135915060e089013590509295985092959890939650565b600080604083850312156102a5578182fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c372b22357efe11005e0856fe5f82114bc04780837884878be7677a3df6a783464736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063610e2d3b1461003b578063e9b3838f14610062575b600080fd5b61004e61004936600461018f565b61007e565b604051901515815260200160405180910390f35b61004e61007036600461018f565b600098975050505050505050565b6000806000888060200190518101906100979190610293565b91509150600082116100e75760405162461bcd60e51b815260206004820152601460248201527353484f59553a20494e56414c49445f505249434560601b60448201526064015b60405180910390fd5b8981106101365760405162461bcd60e51b815260206004820152601960248201527f53484f59553a20494e56414c49445f535441525445445f41540000000000000060448201526064016100de565b426001600160a01b038c16151580610158575080821115801561015857508a81105b801561016357508288145b9c9b505050505050505050505050565b80356001600160a01b038116811461018a57600080fd5b919050565b600080600080600080600080610100898b0312156101ab578384fd5b6101b489610173565b975060208901359650604089013567ffffffffffffffff808211156101d7578586fd5b818b0191508b601f8301126101ea578586fd5b8135818111156101fc576101fc6102b6565b604051601f8201601f19908116603f01168101908382118183101715610224576102246102b6565b816040528281528e602084870101111561023c578889fd5b8260208601602083013791820160200188905250975061026191505060608a01610173565b94506080890135935061027660a08a01610173565b925060c0890135915060e089013590509295985092959890939650565b600080604083850312156102a5578182fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c372b22357efe11005e0856fe5f82114bc04780837884878be7677a3df6a783464736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}