{
  "address": "0x1acCfcD44a980a0E272fd208Cc785E612170680B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "label",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "SetLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "SetName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "SetRoyaltyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "SetRoyaltyFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "askHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "UpdateApprovedBidHash",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "amountFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "askHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "approvedBidHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bidReferrer",
          "type": "address"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "askHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Bid",
          "name": "bidOrder",
          "type": "tuple"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "label",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "canTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Orders.Ask",
          "name": "askOrder",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isCancelledOrClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "setLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setRoyaltyFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "askHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "bidHash",
          "type": "bytes32"
        }
      ],
      "name": "updateApprovedBidHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe86797c440980752f8b96993264d1a2e4d6cc82ac4a02bbb7264c1a154155f35",
  "receipt": {
    "to": null,
    "from": "0x80417137E490A5091dCAB34E85C457BB97c93161",
    "contractAddress": "0x1acCfcD44a980a0E272fd208Cc785E612170680B",
    "transactionIndex": 1,
    "gasUsed": "5039049",
    "logsBloom": "0x
    "blockHash": "0xb327791c3af7d8bf0a0e99fce161fcb0228cfc80cf62744af23e4d3720769971",
    "transactionHash": "0xe86797c440980752f8b96993264d1a2e4d6cc82ac4a02bbb7264c1a154155f35",
    "logs": [],
    "blockNumber": 27817600,
    "cumulativeGasUsed": "5060049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "52ddc8f1c47974b88927e6d7aa0f6f1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"label\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"SetLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"SetName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"SetRoyaltyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetRoyaltyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"askHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateApprovedBidHash\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"amountFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"askHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"approvedBidHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidReferrer\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"askHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Bid\",\"name\":\"bidOrder\",\"type\":\"tuple\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"label\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"canTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Orders.Ask\",\"name\":\"askOrder\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isCancelledOrClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"}],\"name\":\"setRoyaltyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"askHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"name\":\"updateApprovedBidHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT1155V2.sol\":\"NFT1155V2\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT1155V0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"./interfaces/INFT1155.sol\\\";\\nimport \\\"./interfaces/IERC2981.sol\\\";\\nimport \\\"./base/BaseNFT1155.sol\\\";\\nimport \\\"./base/BaseExchange.sol\\\";\\n\\ncontract NFT1155V0 is BaseNFT1155, BaseExchange, IERC2981, INFT1155 {\\n    uint8 internal _MAX_ROYALTY_FEE;\\n\\n    address internal _royaltyFeeRecipient;\\n    uint8 internal _royaltyFee; // out of 1000\\n\\n    function initialize(\\n        address _owner,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override initializer {\\n        __BaseNFTExchange_init();\\n        initialize(_owner);\\n        _MAX_ROYALTY_FEE = ITokenFactory(_factory).MAX_ROYALTY_FEE();\\n\\n        if (tokenIds.length > 0) {\\n            _mintBatch(_owner, tokenIds, amounts, \\\"\\\");\\n        }\\n\\n        _setRoyaltyFeeRecipient(royaltyFeeRecipient);\\n        _royaltyFee = type(uint8).max;\\n        if (royaltyFee != 0) _setRoyaltyFee(royaltyFee);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Initializable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override(BaseNFT1155, BaseExchange, INFT1155) returns (bytes32) {\\n        return BaseNFT1155.DOMAIN_SEPARATOR();\\n    }\\n\\n    function factory() public view override(BaseNFT1155, BaseExchange, INFT1155) returns (address) {\\n        return _factory;\\n    }\\n\\n    function royaltyInfo(uint256, uint256 _salePrice) external view override returns (address, uint256) {\\n        uint256 royaltyAmount;\\n        if (_royaltyFee != type(uint8).max) royaltyAmount = (_salePrice * _royaltyFee) / 1000;\\n        return (_royaltyFeeRecipient, royaltyAmount);\\n    }\\n\\n    function _transfer(\\n        address,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal override {\\n        _transfer(from, to, tokenId, amount);\\n        emit TransferSingle(msg.sender, from, to, tokenId, amount);\\n    }\\n\\n    function setRoyaltyFeeRecipient(address royaltyFeeRecipient) public override onlyOwner {\\n        _setRoyaltyFeeRecipient(royaltyFeeRecipient);\\n    }\\n\\n    function setRoyaltyFee(uint8 royaltyFee) public override onlyOwner {\\n        _setRoyaltyFee(royaltyFee);\\n    }\\n\\n    function _setRoyaltyFeeRecipient(address royaltyFeeRecipient) internal {\\n        require(royaltyFeeRecipient != address(0), \\\"SHOYU: INVALID_FEE_RECIPIENT\\\");\\n\\n        _royaltyFeeRecipient = royaltyFeeRecipient;\\n\\n        emit SetRoyaltyFeeRecipient(royaltyFeeRecipient);\\n    }\\n\\n    function _setRoyaltyFee(uint8 royaltyFee) internal {\\n        if (_royaltyFee == type(uint8).max) {\\n            require(royaltyFee <= _MAX_ROYALTY_FEE, \\\"SHOYU: INVALID_FEE\\\");\\n        } else {\\n            require(royaltyFee < _royaltyFee, \\\"SHOYU: INVALID_FEE\\\");\\n        }\\n\\n        _royaltyFee = royaltyFee;\\n\\n        emit SetRoyaltyFee(royaltyFee);\\n    }\\n}\\n\",\"keccak256\":\"0x1c918889c5205e5b69a96f76a02fc9e0915ca33a092d8eb119d8fdb11722b7c8\",\"license\":\"MIT\"},\"contracts/NFT1155V1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"./NFT1155V0.sol\\\";\\nimport \\\"./base/NFTLockable.sol\\\";\\n\\ncontract NFT1155V1 is NFT1155V0, NFTLockable {\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override ensureUnlocked(from) {\\n        super._transfer(from, to, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2003d76ab377f793bd56f5dd9e338304ce22ea772467e9e8b865ccf097fc759f\",\"license\":\"MIT\"},\"contracts/NFT1155V2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"./interfaces/INFT1155Metadata.sol\\\";\\nimport \\\"./NFT1155V1.sol\\\";\\n\\ncontract NFT1155V2 is NFT1155V1, INFT1155Metadata {\\n    string public override name;\\n\\n    function setName(string calldata _name) external override onlyOwner {\\n        require(bytes(name).length == 0, \\\"SHOYU: NAME_ALREADY_SET\\\");\\n\\n        name = _name;\\n\\n        emit SetName(_name);\\n    }\\n}\\n\",\"keccak256\":\"0x170f20a1cf9e84e72bec59f8787a5674424b15d67b662ba9c651ce4bb28f4d13\",\"license\":\"MIT\"},\"contracts/base/BaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IBaseExchange.sol\\\";\\nimport \\\"../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IDividendPayingERC20.sol\\\";\\nimport \\\"./ReentrancyGuardInitializable.sol\\\";\\nimport \\\"../libraries/Signature.sol\\\";\\nimport \\\"../interfaces/IERC2981.sol\\\";\\n\\nabstract contract BaseExchange is ReentrancyGuardInitializable, IBaseExchange {\\n    using SafeERC20 for IERC20;\\n    using Orders for Orders.Ask;\\n    using Orders for Orders.Bid;\\n\\n    struct BestBid {\\n        address bidder;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(address => mapping(bytes32 => mapping(address => bytes32))) internal _bidHashes;\\n\\n    mapping(bytes32 => BestBid) public override bestBid;\\n    mapping(bytes32 => bool) public override isCancelledOrClaimed;\\n    mapping(bytes32 => uint256) public override amountFilled;\\n\\n    function __BaseNFTExchange_init() internal initializer {\\n        __ReentrancyGuard_init();\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32);\\n\\n    function factory() public view virtual override returns (address);\\n\\n    function canTrade(address token) public view virtual override returns (bool) {\\n        return token == address(this);\\n    }\\n\\n    function approvedBidHash(\\n        address proxy,\\n        bytes32 askHash,\\n        address bidder\\n    ) external view override returns (bytes32 bidHash) {\\n        return _bidHashes[proxy][askHash][bidder];\\n    }\\n\\n    function _transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function cancel(Orders.Ask memory order) external override {\\n        require(order.signer == msg.sender || order.proxy == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        bytes32 hash = order.hash();\\n        require(bestBid[hash].bidder == address(0), \\\"SHOYU: BID_EXISTS\\\");\\n\\n        isCancelledOrClaimed[hash] = true;\\n\\n        emit Cancel(hash);\\n    }\\n\\n    function updateApprovedBidHash(\\n        bytes32 askHash,\\n        address bidder,\\n        bytes32 bidHash\\n    ) external override {\\n        _bidHashes[msg.sender][askHash][bidder] = bidHash;\\n        emit UpdateApprovedBidHash(msg.sender, askHash, bidder, bidHash);\\n    }\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder)\\n        external\\n        override\\n        nonReentrant\\n        returns (bool executed)\\n    {\\n        bytes32 askHash = askOrder.hash();\\n        require(askHash == bidOrder.askHash, \\\"SHOYU: UNMATCHED_HASH\\\");\\n        require(bidOrder.signer != address(0), \\\"SHOYU: INVALID_SIGNER\\\");\\n\\n        bytes32 bidHash = bidOrder.hash();\\n        if (askOrder.proxy != address(0)) {\\n            require(\\n                askOrder.proxy == msg.sender || _bidHashes[askOrder.proxy][askHash][bidOrder.signer] == bidHash,\\n                \\\"SHOYU: FORBIDDEN\\\"\\n            );\\n            delete _bidHashes[askOrder.proxy][askHash][bidOrder.signer];\\n            emit UpdateApprovedBidHash(askOrder.proxy, askHash, bidOrder.signer, bytes32(0));\\n        }\\n\\n        Signature.verify(bidHash, bidOrder.signer, bidOrder.v, bidOrder.r, bidOrder.s, DOMAIN_SEPARATOR());\\n\\n        return\\n            _bid(\\n                askOrder,\\n                askHash,\\n                bidOrder.signer,\\n                bidOrder.amount,\\n                bidOrder.price,\\n                bidOrder.recipient,\\n                bidOrder.referrer\\n            );\\n    }\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external override nonReentrant returns (bool executed) {\\n        require(askOrder.proxy == address(0), \\\"SHOYU: FORBIDDEN\\\");\\n\\n        return _bid(askOrder, askOrder.hash(), msg.sender, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n    }\\n\\n    function _bid(\\n        Orders.Ask memory askOrder,\\n        bytes32 askHash,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) internal returns (bool executed) {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n        require(bidAmount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        uint256 _amountFilled = amountFilled[askHash];\\n        require(_amountFilled + bidAmount <= askOrder.amount, \\\"SHOYU: SOLD_OUT\\\");\\n\\n        _validate(askOrder, askHash);\\n        Signature.verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s, DOMAIN_SEPARATOR());\\n\\n        BestBid storage best = bestBid[askHash];\\n        if (\\n            IStrategy(askOrder.strategy).canClaim(\\n                askOrder.proxy,\\n                askOrder.deadline,\\n                askOrder.params,\\n                bidder,\\n                bidPrice,\\n                best.bidder,\\n                best.price,\\n                best.timestamp\\n            )\\n        ) {\\n            amountFilled[askHash] = _amountFilled + bidAmount;\\n            if (_amountFilled + bidAmount == askOrder.amount) isCancelledOrClaimed[askHash] = true;\\n\\n            address recipient = askOrder.recipient;\\n            if (recipient == address(0)) recipient = askOrder.signer;\\n            require(\\n                _transferFeesAndFunds(\\n                    askOrder.token,\\n                    askOrder.tokenId,\\n                    askOrder.currency,\\n                    bidder,\\n                    recipient,\\n                    bidPrice * bidAmount\\n                ),\\n                \\\"SHOYU: FAILED_TO_TRANSFER_FUNDS\\\"\\n            );\\n\\n            if (bidRecipient == address(0)) bidRecipient = bidder;\\n            _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, bidAmount);\\n\\n            emit Claim(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n            return true;\\n        } else {\\n            if (\\n                IStrategy(askOrder.strategy).canBid(\\n                    askOrder.proxy,\\n                    askOrder.deadline,\\n                    askOrder.params,\\n                    bidder,\\n                    bidPrice,\\n                    best.bidder,\\n                    best.price,\\n                    best.timestamp\\n                )\\n            ) {\\n                best.bidder = bidder;\\n                best.amount = bidAmount;\\n                best.price = bidPrice;\\n                best.recipient = bidRecipient;\\n                best.referrer = bidReferrer;\\n                best.timestamp = block.timestamp;\\n\\n                emit Bid(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n                return false;\\n            }\\n        }\\n        revert(\\\"SHOYU: FAILURE\\\");\\n    }\\n\\n    function claim(Orders.Ask memory askOrder) external override nonReentrant {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n\\n        bytes32 askHash = askOrder.hash();\\n        _validate(askOrder, askHash);\\n        Signature.verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s, DOMAIN_SEPARATOR());\\n\\n        BestBid memory best = bestBid[askHash];\\n        require(\\n            IStrategy(askOrder.strategy).canClaim(\\n                askOrder.proxy,\\n                askOrder.deadline,\\n                askOrder.params,\\n                best.bidder,\\n                best.price,\\n                best.bidder,\\n                best.price,\\n                best.timestamp\\n            ),\\n            \\\"SHOYU: FAILURE\\\"\\n        );\\n\\n        address recipient = askOrder.recipient;\\n        if (recipient == address(0)) recipient = askOrder.signer;\\n\\n        isCancelledOrClaimed[askHash] = true;\\n        require(\\n            _transferFeesAndFunds(\\n                askOrder.token,\\n                askOrder.tokenId,\\n                askOrder.currency,\\n                best.bidder,\\n                recipient,\\n                best.price * best.amount\\n            ),\\n            \\\"SHOYU: FAILED_TO_TRANSFER_FUNDS\\\"\\n        );\\n        amountFilled[askHash] = amountFilled[askHash] + best.amount;\\n\\n        address bidRecipient = best.recipient;\\n        if (bidRecipient == address(0)) bidRecipient = best.bidder;\\n        _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, best.amount);\\n\\n        delete bestBid[askHash];\\n\\n        emit Claim(askHash, best.bidder, best.amount, best.price, bidRecipient, best.referrer);\\n    }\\n\\n    function _validate(Orders.Ask memory askOrder, bytes32 askHash) internal view {\\n        require(!isCancelledOrClaimed[askHash], \\\"SHOYU: CANCELLED_OR_CLAIMED\\\");\\n\\n        require(askOrder.signer != address(0), \\\"SHOYU: INVALID_MAKER\\\");\\n        require(askOrder.token != address(0), \\\"SHOYU: INVALID_NFT\\\");\\n        require(askOrder.amount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        require(askOrder.strategy != address(0), \\\"SHOYU: INVALID_STRATEGY\\\");\\n        require(askOrder.currency != address(0), \\\"SHOYU: INVALID_CURRENCY\\\");\\n        require(ITokenFactory(factory()).isStrategyWhitelisted(askOrder.strategy), \\\"SHOYU: STRATEGY_NOT_WHITELISTED\\\");\\n    }\\n\\n    function _transferFeesAndFunds(\\n        address token,\\n        uint256 tokenId,\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (!_safeTransferFrom(currency, from, address(this), amount)) {\\n            return false;\\n        }\\n\\n        address _factory = factory();\\n        uint256 remainder = amount;\\n        {\\n            (address protocolFeeRecipient, uint8 protocolFeePermil) = ITokenFactory(_factory).protocolFeeInfo();\\n            uint256 protocolFeeAmount = (amount * protocolFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n            remainder -= protocolFeeAmount;\\n        }\\n\\n        {\\n            (address operationalFeeRecipient, uint8 operationalFeePermil) =\\n                ITokenFactory(_factory).operationalFeeInfo();\\n            uint256 operationalFeeAmount = (amount * operationalFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(operationalFeeRecipient, operationalFeeAmount);\\n            remainder -= operationalFeeAmount;\\n        }\\n\\n        try IERC2981(token).royaltyInfo(tokenId, amount) returns (\\n            address royaltyFeeRecipient,\\n            uint256 royaltyFeeAmount\\n        ) {\\n            if (royaltyFeeAmount > 0) {\\n                remainder -= royaltyFeeAmount;\\n                _transferRoyaltyFee(currency, royaltyFeeRecipient, royaltyFeeAmount);\\n            }\\n        } catch {}\\n\\n        IERC20(currency).safeTransfer(to, remainder);\\n        return true;\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private returns (bool) {\\n        (bool success, bytes memory returndata) =\\n            token.call(abi.encodeWithSelector(IERC20(token).transferFrom.selector, from, to, value));\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool)));\\n    }\\n\\n    function _transferRoyaltyFee(\\n        address currency,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        IERC20(currency).safeTransfer(to, amount);\\n        if (Address.isContract(to)) {\\n            try IDividendPayingERC20(to).sync() returns (uint256) {} catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0add4e53a9b7d10722f6231ac8754ce69787e7655a9b0cadd7b9071b4b8f0c72\",\"license\":\"MIT\"},\"contracts/base/BaseNFT1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IBaseNFT1155.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../base/ERC1155Initializable.sol\\\";\\nimport \\\"../base/OwnableInitializable.sol\\\";\\nimport \\\"../libraries/Signature.sol\\\";\\n\\nabstract contract BaseNFT1155 is ERC1155Initializable, OwnableInitializable, IBaseNFT1155 {\\n    using Strings for uint256;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0xdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df62;\\n    bytes32 internal _DOMAIN_SEPARATOR;\\n    uint256 internal _CACHED_CHAIN_ID;\\n    uint8 internal MAX_ROYALTY_FEE;\\n\\n    address internal _factory;\\n    string internal _baseURI;\\n    mapping(uint256 => string) internal _uris;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    function initialize(address _owner) public override initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __Ownable_init(_owner);\\n        _factory = msg.sender;\\n\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                keccak256(bytes(Strings.toHexString(uint160(address(this))))),\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\"))\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n        bytes32 domainSeparator;\\n        if (_CACHED_CHAIN_ID == block.chainid) domainSeparator = _DOMAIN_SEPARATOR;\\n        else {\\n            domainSeparator = keccak256(\\n                abi.encode(\\n                    // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                    keccak256(bytes(Strings.toHexString(uint160(address(this))))),\\n                    0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\"))\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n        }\\n        return domainSeparator;\\n    }\\n\\n    function factory() public view virtual override returns (address) {\\n        return _factory;\\n    }\\n\\n    function uri(uint256 id)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Initializable, IERC1155MetadataURI)\\n        returns (string memory)\\n    {\\n        string memory _uri = _uris[id];\\n        if (bytes(_uri).length > 0) {\\n            return _uri;\\n        } else {\\n            string memory baseURI = _baseURI;\\n            if (bytes(baseURI).length > 0) {\\n                return string(abi.encodePacked(baseURI, Strings.toString(id), \\\".json\\\"));\\n            } else {\\n                baseURI = ITokenFactory(_factory).baseURI1155();\\n                string memory addy = Strings.toHexString(uint160(address(this)), 20);\\n                return string(abi.encodePacked(baseURI, addy, \\\"/\\\", Strings.toString(id), \\\".json\\\"));\\n            }\\n        }\\n    }\\n\\n    function setURI(uint256 id, string memory newURI) external override onlyOwner {\\n        _uris[id] = newURI;\\n\\n        emit SetURI(id, newURI);\\n    }\\n\\n    function setBaseURI(string memory baseURI) external override onlyOwner {\\n        _baseURI = baseURI;\\n\\n        emit SetBaseURI(baseURI);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external override {\\n        require(owner() == msg.sender || _factory == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _mint(to, tokenId, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external override {\\n        require(owner() == msg.sender || _factory == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        _mintBatch(to, tokenIds, amounts, data);\\n    }\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 label,\\n        bytes32 data\\n    ) external override {\\n        _burn(msg.sender, tokenId, amount);\\n\\n        emit Burn(tokenId, amount, label, data);\\n    }\\n\\n    function burnBatch(uint256[] calldata tokenIds, uint256[] calldata amounts) external override {\\n        _burnBatch(msg.sender, tokenIds, amounts);\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"SHOYU: EXPIRED\\\");\\n        require(owner != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        require(spender != owner, \\\"SHOYU: NOT_NECESSARY\\\");\\n\\n        bytes32 hash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, nonces[owner]++, deadline));\\n        Signature.verify(hash, owner, v, r, s, DOMAIN_SEPARATOR());\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n}\\n\",\"keccak256\":\"0x25769b8146f9dc7c0af43d8dd9f0f9494a56e802b01dfd1d67f29559b66eed25\",\"license\":\"MIT\"},\"contracts/base/ERC1155Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Initializable is Initializable, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"SHOYU: LENGTHS_NOT_EQUAL\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(to != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        require(from == msg.sender || isApprovedForAll(from, msg.sender), \\\"SHOYU: FORBIDDEN\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _transfer(from, to, id, amount);\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"SHOYU: INSUFFICIENT_BALANCE\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(ids.length == amounts.length, \\\"SHOYU: LENGTHS_NOT_EQUAL\\\");\\n        require(to != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        require(from == msg.sender || isApprovedForAll(from, msg.sender), \\\"SHOYU: FORBIDDEN\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"SHOYU: INSUFFICIENT_BALANCE\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    function _setApprovalForAll(\\n        address account,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(account != operator, \\\"SHOYU: NOT_ALLOWED\\\");\\n\\n        _operatorApprovals[account][operator] = approved;\\n        emit ApprovalForAll(account, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        require(ids.length == amounts.length, \\\"SHOYU: LENGTHS_NOT_EQUAL\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"SHOYU: INSUFFICIENT_BALANCE\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n        require(ids.length == amounts.length, \\\"SHOYU: LENGTHS_NOT_EQUAL\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"SHOYU: INSUFFICIENT_BALANCE\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"SHOYU: INVALID_RECEIVER\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"SHOYU: NO_RECEIVER\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"SHOYU: INVALID_RECEIVER\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"SHOYU: NO_RECEIVER\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xea3fd8e330f88048aae096c6441bd2d45b6b91501092e6a74a3c22b715f8c862\",\"license\":\"MIT\"},\"contracts/base/NFTLockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"./OwnableInitializable.sol\\\";\\nimport \\\"../interfaces/INFTLockable.sol\\\";\\n\\ncontract NFTLockable is OwnableInitializable, INFTLockable {\\n    bool internal _wasLocked;\\n    bool public override locked;\\n\\n    modifier ensureUnlocked(address from) {\\n        require(msg.sender == owner() || from == owner() || !locked, \\\"SHOYU: LOCKED\\\");\\n        _;\\n    }\\n\\n    function setLocked(bool _locked) external override onlyOwner {\\n        if (_locked) {\\n            require(!_wasLocked, \\\"SHOYU: FORBIDDEN\\\");\\n            _wasLocked = true;\\n        }\\n        locked = _locked;\\n        emit SetLocked(_locked);\\n    }\\n}\\n\",\"keccak256\":\"0x24a55b13513c8636c1b583f005207f579cf16626dc5fa133a56687ab057d1057\",\"license\":\"MIT\"},\"contracts/base/OwnableInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableInitializable is Initializable, IOwnable {\\n    address private _owner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address __owner) internal initializer {\\n        __Ownable_init_unchained(__owner);\\n    }\\n\\n    function __Ownable_init_unchained(address __owner) internal initializer {\\n        _owner = __owner;\\n        emit OwnershipTransferred(address(0), __owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"SHOYU: INVALID_NEW_OWNER\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x091ffb15b20c53f5071056d56d05f4fa6f48c8edf143b8c40ba7d8ad91d83bff\",\"license\":\"MIT\"},\"contracts/base/ReentrancyGuardInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardInitializable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    bool private constant _NOT_ENTERED = false;\\n    bool private constant _ENTERED = true;\\n\\n    bool private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"SHOYU: REENTRANT\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xfb6fcf02d4ee8616d85b623bb2decaa5dde19da928bdf38d7b15d967cc026a71\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IBaseExchange {\\n    event Cancel(bytes32 indexed hash);\\n    event Claim(\\n        bytes32 indexed hash,\\n        address bidder,\\n        uint256 amount,\\n        uint256 price,\\n        address recipient,\\n        address referrer\\n    );\\n    event Bid(bytes32 indexed hash, address bidder, uint256 amount, uint256 price, address recipient, address referrer);\\n    event UpdateApprovedBidHash(\\n        address indexed proxy,\\n        bytes32 indexed askHash,\\n        address indexed bidder,\\n        bytes32 bidHash\\n    );\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function canTrade(address token) external view returns (bool);\\n\\n    function bestBid(bytes32 hash)\\n        external\\n        view\\n        returns (\\n            address bidder,\\n            uint256 amount,\\n            uint256 price,\\n            address recipient,\\n            address referrer,\\n            uint256 blockNumber\\n        );\\n\\n    function isCancelledOrClaimed(bytes32 hash) external view returns (bool);\\n\\n    function amountFilled(bytes32 hash) external view returns (uint256);\\n\\n    function approvedBidHash(\\n        address proxy,\\n        bytes32 askHash,\\n        address bidder\\n    ) external view returns (bytes32 bidHash);\\n\\n    function cancel(Orders.Ask memory order) external;\\n\\n    function updateApprovedBidHash(\\n        bytes32 askHash,\\n        address bidder,\\n        bytes32 bidHash\\n    ) external;\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder) external returns (bool executed);\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external returns (bool executed);\\n\\n    function claim(Orders.Ask memory order) external;\\n}\\n\",\"keccak256\":\"0x9c047abc46851fc44c2395bcbf49f3b0900d80f6263f91f65d7f526825aa9b2f\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseNFT1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IBaseNFT1155 is IERC1155, IERC1155MetadataURI, IOwnable {\\n    event SetURI(uint256 indexed id, string uri);\\n    event SetBaseURI(string uri);\\n    event Burn(uint256 indexed tokenId, uint256 amount, uint256 indexed label, bytes32 data);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function nonces(address account) external view returns (uint256);\\n\\n    function initialize(address _owner) external;\\n\\n    function setURI(uint256 id, string memory uri) external;\\n\\n    function setBaseURI(string memory baseURI) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 label,\\n        bytes32 data\\n    ) external;\\n\\n    function burnBatch(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0d0b9fb2d7f1fef65094a7640ecf3a62544535bcdc9470053f12a5d7a4e4c946\",\"license\":\"MIT\"},\"contracts/interfaces/IDividendPayingERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDividendPayingERC20 is IERC20, IERC20Metadata {\\n    /// @dev This event MUST emit when erc20/ether dividend is synced.\\n    /// @param increased The amount of increased erc20/ether in wei.\\n    event Sync(uint256 increased);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws erc20/ether from this contract.\\n    /// @param amount The amount of withdrawn erc20/ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 amount);\\n\\n    function MAGNITUDE() external view returns (uint256);\\n\\n    function dividendToken() external view returns (address);\\n\\n    function totalDividend() external view returns (uint256);\\n\\n    function sync() external payable returns (uint256 increased);\\n\\n    function withdrawDividend() external;\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function dividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function withdrawableDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has withdrawn.\\n    function withdrawnDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(account) = withdrawableDividendOf(account) + withdrawnDividendOf(account)\\n    /// = (magnifiedDividendPerShare * balanceOf(account) + magnifiedDividendCorrections[account]) / magnitude\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has earned in total.\\n    function accumulativeDividendOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66581b3336f4d4a90beb3291661c34c21803fb5522b54a4dfcc59bafa68d4617\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Interface for verifying contract-based account signatures\\n/// @notice Interface that verifies provided signature for the data\\n/// @dev Interface defined by EIP-1271\\ninterface IERC1271 {\\n    /// @notice Returns whether the provided signature is valid for the provided data\\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n    /// MUST allow external calls.\\n    /// @param hash Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x7115b65c073af6cadf4dad8baa66422be19ad0741d41566cc3db888def037f80\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x012b9c7ecf141a7fd2162a87cf0814f8942de12709a1c90d034a6f018ce029ce\",\"license\":\"MIT\"},\"contracts/interfaces/INFT1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IBaseNFT1155.sol\\\";\\nimport \\\"./IBaseExchange.sol\\\";\\n\\ninterface INFT1155 is IBaseNFT1155, IBaseExchange {\\n    event SetRoyaltyFeeRecipient(address recipient);\\n    event SetRoyaltyFee(uint8 fee);\\n\\n    function initialize(\\n        address _owner,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external;\\n\\n    function DOMAIN_SEPARATOR() external view override(IBaseNFT1155, IBaseExchange) returns (bytes32);\\n\\n    function factory() external view override(IBaseNFT1155, IBaseExchange) returns (address);\\n\\n    function setRoyaltyFeeRecipient(address _royaltyFeeRecipient) external;\\n\\n    function setRoyaltyFee(uint8 _royaltyFee) external;\\n}\\n\",\"keccak256\":\"0x4817ae60f0f1a572256a223201b81cfe74e46d844f8e77b8f7ec0f4aad1ab8ae\",\"license\":\"MIT\"},\"contracts/interfaces/INFT1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface INFT1155Metadata {\\n    event SetName(string name);\\n\\n    function name() external view returns (string memory);\\n\\n    function setName(string calldata _name) external;\\n}\\n\",\"keccak256\":\"0x3266141224ff4f2a04fb73c2b7d363fdc124ea7ff5698ab058acf82a53e67ea0\",\"license\":\"MIT\"},\"contracts/interfaces/INFTLockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\ninterface INFTLockable {\\n    event SetLocked(bool locked);\\n\\n    function locked() external view returns (bool);\\n\\n    function setLocked(bool _locked) external;\\n}\\n\",\"keccak256\":\"0x024b42fbe8391a6001dc7d25edfb6a149d14ba90bf4c5b9e57a4aca8bd83b842\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOwnable {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x59ab7135720d591a800eade4077b4a6a1f6c807cd982edc40132f9de39755ce2\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IStrategy {\\n    function canClaim(\\n        address proxy,\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        address bestBidder,\\n        uint256 bestBidPrice,\\n        uint256 bestBidTimestamp\\n    ) external view returns (bool);\\n\\n    function canBid(\\n        address proxy,\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        address bestBidder,\\n        uint256 bestBidPrice,\\n        uint256 bestBidTimestamp\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9523c2173e0661cecb24d35404c65dc63660772f5247bacc141e485513d22b5f\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ITokenFactory {\\n    event SetBaseURI721(string uri);\\n    event SetBaseURI1155(string uri);\\n    event SetProtocolFeeRecipient(address recipient);\\n    event SetOperationalFee(uint8 fee);\\n    event SetOperationalFeeRecipient(address recipient);\\n    event SetDeployerWhitelisted(address deployer, bool whitelisted);\\n    event SetStrategyWhitelisted(address strategy, bool whitelisted);\\n    event UpgradeNFT721(address newTarget);\\n    event UpgradeNFT1155(address newTarget);\\n    event UpgradeSocialToken(address newTarget);\\n    event UpgradeERC721Exchange(address exchange);\\n    event UpgradeERC1155Exchange(address exchange);\\n    event DeployNFT721AndMintBatch(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256[] tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT721AndPark(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT1155AndMintBatch(\\n        address indexed proxy,\\n        address indexed owner,\\n        uint256[] tokenIds,\\n        uint256[] amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeploySocialToken(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        address indexed dividendToken,\\n        uint256 initialSupply\\n    );\\n\\n    function MAX_ROYALTY_FEE() external view returns (uint8);\\n\\n    function MAX_OPERATIONAL_FEE() external view returns (uint8);\\n\\n    function PARK_TOKEN_IDS_721_TYPEHASH() external view returns (bytes32);\\n\\n    function MINT_BATCH_721_TYPEHASH() external view returns (bytes32);\\n\\n    function MINT_BATCH_1155_TYPEHASH() external view returns (bytes32);\\n\\n    function MINT_SOCIAL_TOKEN_TYPEHASH() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address account) external view returns (uint256);\\n\\n    function baseURI721() external view returns (string memory);\\n\\n    function baseURI1155() external view returns (string memory);\\n\\n    function erc721Exchange() external view returns (address);\\n\\n    function erc1155Exchange() external view returns (address);\\n\\n    function protocolFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function operationalFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function isDeployerWhitelisted(address strategy) external view returns (bool);\\n\\n    function setBaseURI721(string memory uri) external;\\n\\n    function setBaseURI1155(string memory uri) external;\\n\\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\\n\\n    function setOperationalFeeRecipient(address operationalFeeRecipient) external;\\n\\n    function setOperationalFee(uint8 operationalFee) external;\\n\\n    function setDeployerWhitelisted(address deployer, bool whitelisted) external;\\n\\n    function setStrategyWhitelisted(address strategy, bool whitelisted) external;\\n\\n    function upgradeNFT721(address newTarget) external;\\n\\n    function upgradeNFT1155(address newTarget) external;\\n\\n    function upgradeSocialToken(address newTarget) external;\\n\\n    function upgradeERC721Exchange(address exchange) external;\\n\\n    function upgradeERC1155Exchange(address exchange) external;\\n\\n    function deployNFT721AndMintBatch(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256[] calldata tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function deployNFT721AndPark(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT721(address query) external view returns (bool result);\\n\\n    function deployNFT1155AndMintBatch(\\n        address owner,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT1155(address query) external view returns (bool result);\\n\\n    function deploySocialToken(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address dividendToken,\\n        uint256 initialSupply\\n    ) external returns (address proxy);\\n\\n    function isSocialToken(address query) external view returns (bool result);\\n\\n    function parkTokenIds721(\\n        address nft,\\n        uint256 toTokenId,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function mintBatch721(\\n        address nft,\\n        address to,\\n        uint256[] calldata tokenIds,\\n        bytes calldata data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function mintBatch1155(\\n        address nft,\\n        address to,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        bytes calldata data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function mintSocialToken(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb1cf197210d684662bd0a3b222e97b2f6f250b1ddc43d02580f31e8deb6c34e0\",\"license\":\"MIT\"},\"contracts/libraries/Orders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nlibrary Orders {\\n    // keccak256(\\\"Ask(address signer,address proxy,address token,uint256 tokenId,uint256 amount,address strategy,address currency,address recipient,uint256 deadline,bytes params)\\\")\\n    bytes32 internal constant ASK_TYPEHASH = 0x5fbc9a24e1532fa5245d1ec2dc5592849ae97ac5475f361b1a1f7a6e2ac9b2fd;\\n    // keccak256(\\\"Bid(bytes32 askHash,address signer,uint256 amount,uint256 price,address recipient,address referrer)\\\")\\n    bytes32 internal constant BID_TYPEHASH = 0xb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b2;\\n\\n    struct Ask {\\n        address signer;\\n        address proxy;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address strategy;\\n        address currency;\\n        address recipient;\\n        uint256 deadline;\\n        bytes params;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Bid {\\n        bytes32 askHash;\\n        address signer;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function hash(Ask memory ask) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ASK_TYPEHASH,\\n                    ask.signer,\\n                    ask.proxy,\\n                    ask.token,\\n                    ask.tokenId,\\n                    ask.amount,\\n                    ask.strategy,\\n                    ask.currency,\\n                    ask.recipient,\\n                    ask.deadline,\\n                    keccak256(ask.params)\\n                )\\n            );\\n    }\\n\\n    function hash(Bid memory bid) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(BID_TYPEHASH, bid.askHash, bid.signer, bid.amount, bid.price, bid.recipient, bid.referrer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf6bf58506ceb341b7d4664dd3ba50b682a2d823dfa1473180328e170226e877d\",\"license\":\"MIT\"},\"contracts/libraries/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary Signature {\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"SHOYU: INVALID_SIGNATURE_S_VALUE\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"SHOYU: INVALID_SIGNATURE_V_VALUE\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"SHOYU: INVALID_SIGNATURE\\\");\\n\\n        return signer;\\n    }\\n\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            require(\\n                IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"SHOYU: UNAUTHORIZED\\\"\\n            );\\n        } else {\\n            require(recover(digest, v, r, s) == signer, \\\"SHOYU: UNAUTHORIZED\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3b74e1743233cbe28f2e6a3efd5cfbc1c48ed8a2a8a555b198927f510483ade\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a2d80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c8063715018a611610146578063bff5e79d116100c3578063cf30901211610087578063cf309012146105fc578063d0d0924614610610578063e331a71514610623578063e985e9c514610646578063f242432a14610659578063f2fde38b1461066c57610252565b8063bff5e79d14610599578063c45a0155146105ac578063c47f0027146105c3578063c4d66de8146105d6578063cb27e1b6146105e957610252565b806383ca4b6f1161010a57806383ca4b6f14610528578063862440e21461053b5780638da5cb5b1461054e578063a22cb46514610573578063b81e84661461058657610252565b8063715018a6146104ba578063731133e9146104c257806375e6590f146104d557806376882663146104f55780637ecebe001461050857610252565b80633644e515116101d4578063559f05dc11610198578063559f05dc146103d057806355f804b3146103ef5780635771f997146104025780635f7ef2fa146104945780636ef8e02d146104a757610252565b80633644e5151461036f57806338bc54cd146103775780633cf32cd11461038a57806348613c281461039d5780634e1273f4146103b057610252565b80631f7fdffa1161021b5780631f7fdffa146102dd578063211e28b6146102f05780632a55205a146103035780632eb2c2d61461033557806330adf81f1461034857610252565b8062fdd58e1461025757806301ffc9a71461027d57806306fdde03146102a05780630e89341c146102b5578063177315e3146102c8575b600080fd5b61026a610265366004614cdc565b61067f565b6040519081526020015b60405180910390f35b61029061028b366004614f71565b6106d8565b6040519015158152602001610274565b6102a8610705565b60405161027491906155c6565b6102a86102c3366004614f22565b610793565b6102db6102d6366004615298565b6109e5565b005b6102db6102eb366004614bd8565b610a33565b6102db6102fe366004614eea565b610a98565b610316610311366004615277565b610b5e565b604080516001600160a01b039093168352602083019190915201610274565b6102db6103433660046149cb565b610bbe565b61026a7fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b61026a610dfc565b6102906103853660046151be565b610e0c565b6102db6103983660046150ba565b610e9a565b6102db6103ab366004614ada565b610f85565b6103c36103be366004614db6565b611106565b6040516102749190615546565b6102906103de366004614977565b6001600160a01b0381163014919050565b6102db6103fd366004615015565b611225565b610455610410366004614f22565b600d602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293918316929091169086565b604080516001600160a01b03978816815260208101969096528501939093529084166060840152909216608082015260a081019190915260c001610274565b6102db6104a23660046152c9565b611292565b6102db6104b5366004614977565b6112c8565b6102db6112fb565b6102db6104d0366004614d34565b61136f565b61026a6104e3366004614f22565b600f6020526000908152604090205481565b6102db610503366004614f3a565b6113ce565b61026a610516366004614977565b600a6020526000908152604090205481565b6102db610536366004614e82565b611439565b6102db61054936600461523d565b6114a7565b6004546001600160a01b03165b6040516001600160a01b039091168152602001610274565b6102db610581366004614c6e565b61152d565b6102906105943660046150ec565b61153c565b6102db6105a7366004614b3e565b611778565b61055b60075461010090046001600160a01b031690565b6102db6105d1366004614fa9565b6118e3565b6102db6105e4366004614977565b6119b3565b61026a6105f7366004614c9b565b611aef565b60105461029090600160b81b900460ff1681565b6102db61061e3660046150ba565b611b25565b610290610631366004614f22565b600e6020526000908152604090205460ff1681565b610290610654366004614993565b611ee2565b6102db610667366004614a74565b611f10565b6102db61067a366004614977565b611ff6565b60006001600160a01b0383166106b05760405162461bcd60e51b81526004016106a79061567b565b60405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b600063152a902d60e11b6001600160e01b0319831614806106fd57506106fd826120d2565b90505b919050565b6011805461071290615815565b80601f016020809104026020016040519081016040528092919081815260200182805461073e90615815565b801561078b5780601f106107605761010080835404028352916020019161078b565b820191906000526020600020905b81548152906001019060200180831161076e57829003601f168201915b505050505081565b6000818152600960205260408120805460609291906107b190615815565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd90615815565b801561082a5780601f106107ff5761010080835404028352916020019161082a565b820191906000526020600020905b81548152906001019060200180831161080d57829003601f168201915b50505050509050600081511115610842579050610700565b60006008805461085190615815565b80601f016020809104026020016040519081016040528092919081815260200182805461087d90615815565b80156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b5050505050905060008151111561090e57806108e585612122565b6040516020016108f6929190615383565b60405160208183030381529060405292505050610700565b600760019054906101000a90046001600160a01b03166001600160a01b031663c6edbca46040518163ffffffff1660e01b815260040160006040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109989190810190615047565b905060006109a7306014612244565b905081816109b487612122565b6040516020016109c6939291906153c2565b6040516020818303038152906040529350505050610700565b50919050565b6109f0338585612425565b6040805184815260208101839052839186917fed1397de7c11c080337d84f0acdca9b26b1237affe97a486bb12549594a70731910160405180910390a350505050565b33610a466004546001600160a01b031690565b6001600160a01b03161480610a6a575060075461010090046001600160a01b031633145b610a865760405162461bcd60e51b81526004016106a7906155d9565b610a9284848484612522565b50505050565b6004546001600160a01b03163314610ac25760405162461bcd60e51b81526004016106a7906155d9565b8015610b0657601054600160b01b900460ff1615610af25760405162461bcd60e51b81526004016106a7906155d9565b6010805460ff60b01b1916600160b01b1790555b60108054821515600160b81b0260ff60b81b199091161790556040517f9514871d395e6e24ef28f340cbcdcaa89f790cdf4a4fa6c25cf83a81fb27a86d90610b5390831515815260200190565b60405180910390a150565b60105460009081908190600160a81b900460ff90811614610ba1576010546103e890610b9490600160a81b900460ff168661579c565b610b9e9190615788565b90505b60105461010090046001600160a01b0316925090505b9250929050565b8151835114610bdf5760405162461bcd60e51b81526004016106a7906156ab565b6001600160a01b038416610c055760405162461bcd60e51b81526004016106a79061567b565b6001600160a01b038516331480610c215750610c218533611ee2565b610c3d5760405162461bcd60e51b81526004016106a7906155d9565b3360005b8451811015610d8e576000858281518110610c6c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610c9857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526001835260408082206001600160a01b038e168352909352919091205490915081811015610ce95760405162461bcd60e51b81526004016106a7906156e2565b610cf382826157bb565b6001600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816001600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610d739190615770565b9250508190555050505080610d8790615876565b9050610c41565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610dde929190615559565b60405180910390a4610df4818787878787612686565b505050505050565b6000610e066127f3565b90505b90565b600b5460009060ff16151560011415610e375760405162461bcd60e51b81526004016106a790615603565b600b805460ff1916600117905560208601516001600160a01b031615610e6f5760405162461bcd60e51b81526004016106a7906155d9565b610e8686610e7c8861289f565b338888888861298c565b600b805460ff191690559695505050505050565b80516001600160a01b0316331480610ebe575060208101516001600160a01b031633145b610eda5760405162461bcd60e51b81526004016106a7906155d9565b6000610ee58261289f565b6000818152600d60205260409020549091506001600160a01b031615610f415760405162461bcd60e51b815260206004820152601160248201527053484f59553a204249445f45584953545360781b60448201526064016106a7565b6000818152600e6020526040808220805460ff191660011790555182917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25050565b83421115610fc65760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b60448201526064016106a7565b6001600160a01b038616610fec5760405162461bcd60e51b81526004016106a79061567b565b856001600160a01b0316856001600160a01b031614156110455760405162461bcd60e51b815260206004820152601460248201527353484f59553a204e4f545f4e454345535341525960601b60448201526064016106a7565b6001600160a01b0386166000908152600a6020526040812080547fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6291899189918561108f83615876565b909155506040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506110f181888686866110ec610dfc565b612e71565b6110fd87876001613027565b50505050505050565b606081518351146111295760405162461bcd60e51b81526004016106a7906156ab565b600083516001600160401b0381111561115257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561117b578160200160208202803683370190505b50905060005b845181101561121d576111e28582815181106111ad57634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111d557634e487b7160e01b600052603260045260246000fd5b602002602001015161067f565b82828151811061120257634e487b7160e01b600052603260045260246000fd5b602090810291909101015261121681615876565b9050611181565b509392505050565b6004546001600160a01b0316331461124f5760405162461bcd60e51b81526004016106a7906155d9565b805161126290600890602084019061464c565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa81604051610b5391906155c6565b6004546001600160a01b031633146112bc5760405162461bcd60e51b81526004016106a7906155d9565b6112c5816130eb565b50565b6004546001600160a01b031633146112f25760405162461bcd60e51b81526004016106a7906155d9565b6112c5816131f5565b6004546001600160a01b031633146113255760405162461bcd60e51b81526004016106a7906155d9565b6004546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600480546001600160a01b0319169055565b336113826004546001600160a01b031690565b6001600160a01b031614806113a6575060075461010090046001600160a01b031633145b6113c25760405162461bcd60e51b81526004016106a7906155d9565b610a92848484846132a1565b336000818152600c6020908152604080832087845282528083206001600160a01b03871680855290835292819020859055518481529192869290917fb45107556fea5943927a97bcb8910e249aea88961a6a30fb2f06674dbd44004b910160405180910390a4505050565b610a92338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061335892505050565b6004546001600160a01b031633146114d15760405162461bcd60e51b81526004016106a7906155d9565b600082815260096020908152604090912082516114f09284019061464c565b50817fee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e468260405161152191906155c6565b60405180910390a25050565b611538338383613027565b5050565b600b5460009060ff161515600114156115675760405162461bcd60e51b81526004016106a790615603565b600b805460ff19166001179055600061157f8461289f565b835190915081146115ca5760405162461bcd60e51b81526020600482015260156024820152740a6909eb2aa7440aa9c9a82a886908a88be9082a69605b1b60448201526064016106a7565b60208301516001600160a01b031661161c5760405162461bcd60e51b815260206004820152601560248201527429a427acaa9d1024a72b20a624a22fa9a4a3a722a960591b60448201526064016106a7565b6000611627846134ff565b60208601519091506001600160a01b0316156117215760208501516001600160a01b031633148061168d57506020808601516001600160a01b039081166000908152600c8352604080822086835284528082208885015190931682529190925290205481145b6116a95760405162461bcd60e51b81526004016106a7906155d9565b602085810180516001600160a01b039081166000908152600c8452604080822087835285528082208986018051851684529086528183208390555193519051918252928216938693909216917fb45107556fea5943927a97bcb8910e249aea88961a6a30fb2f06674dbd44004b910160405180910390a45b6117428185602001518660c001518760e001518861010001516110ec610dfc565b611765858386602001518760400151886060015189608001518a60a0015161298c565b600b805460ff1916905595945050505050565b600054610100900460ff1680611791575060005460ff16155b6117ad5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156117cf576000805461ffff19166101011790555b6117d761358a565b6117e0866119b3565b600760019054906101000a90046001600160a01b03166001600160a01b03166317e1f82e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182e57600080fd5b505afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186691906152e5565b6010805460ff191660ff9290921691909117905584511561189c5761189c86868660405180602001604052806000815250612522565b6118a5836131f5565b6010805460ff60a81b191660ff60a81b17905560ff8216156118ca576118ca826130eb565b8015610df4576000805461ff0019169055505050505050565b6004546001600160a01b0316331461190d5760405162461bcd60e51b81526004016106a7906155d9565b6011805461191a90615815565b1590506119695760405162461bcd60e51b815260206004820152601760248201527f53484f59553a204e414d455f414c52454144595f53455400000000000000000060448201526064016106a7565b611975601183836146d0565b507f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf0282826040516119a7929190615597565b60405180910390a15050565b600054610100900460ff16806119cc575060005460ff16155b6119e85760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff16158015611a0a576000805461ffff19166101011790555b611a22604051806020016040528060008152506135fd565b611a2b82613672565b60078054610100600160a81b0319163361010002179055466006557f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611a70306136d2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206005558015611538576000805461ff00191690555050565b6001600160a01b038084166000908152600c602090815260408083208684528252808320938516835292905220545b9392505050565b600b5460ff16151560011415611b4d5760405162461bcd60e51b81526004016106a790615603565b600b805460ff1916600117905560408101516001600160a01b03163014611bb05760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b60448201526064016106a7565b6000611bbb8261289f565b9050611bc78282613727565b611bea8183600001518461014001518561016001518661018001516110ec610dfc565b6000818152600d6020908152604091829020825160c08101845281546001600160a01b0390811680835260018401548386015260028401548387018190526003850154831660608501526004808601548416608086015260059095015460a08086018290528a0151968a01516101008b01516101208c0151995163610e2d3b60e01b81529699989095169763610e2d3b97611c9497929695919491939192849284929091016154bc565b60206040518083038186803b158015611cac57600080fd5b505afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce49190614f06565b611d215760405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b60448201526064016106a7565b60e08301516001600160a01b038116611d38575082515b6000838152600e6020908152604091829020805460ff1916600117905585820151606087015160c088015186519387015194870151611d8995939492939192918791611d84919061579c565b613a04565b611dd55760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e44530060448201526064016106a7565b6020808301516000858152600f909252604090912054611df59190615770565b6000848152600f602052604090205560608201516001600160a01b038116611e1b575081515b611e38856040015186600001518388606001518760200151613c76565b6000848152600d6020908152604080832080546001600160a01b03199081168255600182018590556002820185905560038201805482169055600482018054909116905560050192909255845190850151858301516080870151935188947f0642c67a22e8657a7126bb3b9fb3f01965503642f884e4c6a1efd8ed24f46c0d94611ec9949093909290918891615514565b60405180910390a25050600b805460ff19169055505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416611f365760405162461bcd60e51b81526004016106a79061567b565b6001600160a01b038516331480611f525750611f528533611ee2565b611f6e5760405162461bcd60e51b81526004016106a7906155d9565b33611f8e818787611f7e88613cb8565b611f8788613cb8565b5050505050565b611f9a86868686613d11565b846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206159d88339815191528787604051611fe0929190918252602082015260400190565b60405180910390a4610df4818787878787613dad565b6004546001600160a01b031633146120205760405162461bcd60e51b81526004016106a7906155d9565b6001600160a01b0381166120765760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f4e45575f4f574e4552000000000000000060448201526064016106a7565b6004546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216636cdb3d1360e11b148061210357506001600160e01b031982166303a24d0760e21b145b806106fd57506301ffc9a760e01b6001600160e01b03198316146106fd565b60608161214757506040805180820190915260018152600360fc1b6020820152610700565b8160005b8115612171578061215b81615876565b915061216a9050600a83615788565b915061214b565b6000816001600160401b0381111561219957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121c3576020820181803683370190505b5090505b841561223c576121d86001836157bb565b91506121e5600a86615891565b6121f0906030615770565b60f81b81838151811061221357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612235600a86615788565b94506121c7565b949350505050565b6060600061225383600261579c565b61225e906002615770565b6001600160401b0381111561228357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122ad576020820181803683370190505b509050600360fc1b816000815181106122d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061231357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061233784600261579c565b612342906001615770565b90505b60018111156123d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061238457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106123a857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936123cf816157fe565b9050612345565b508315611b1e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a7565b6001600160a01b03831661244b5760405162461bcd60e51b81526004016106a79061567b565b3361247b8185600061245c87613cb8565b61246587613cb8565b5050604080516020810190915260009052505050565b60008381526001602090815260408083206001600160a01b0388168452909152902054828110156124be5760405162461bcd60e51b81526004016106a7906156e2565b6124c883826157bb565b60008581526001602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616916000805160206159d883398151915291015b60405180910390a45050505050565b6001600160a01b0384166125485760405162461bcd60e51b81526004016106a79061567b565b81518351146125695760405162461bcd60e51b81526004016106a7906156ab565b3360005b84518110156126225783818151811061259657634e487b7160e01b600052603260045260246000fd5b6020026020010151600160008784815181106125c257634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461260a9190615770565b9091555081905061261a81615876565b91505061256d565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612673929190615559565b60405180910390a4611f87816000878787875b6001600160a01b0384163b15610df45760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126ca9089908990889088908890600401615424565b602060405180830381600087803b1580156126e457600080fd5b505af1925050508015612714575060408051601f3d908101601f1916820190925261271191810190614f8d565b60015b612799576127206158e7565b806308c379a0141561275a57506127356158fe565b80612740575061275c565b8060405162461bcd60e51b81526004016106a791906155c6565b505b60405162461bcd60e51b815260206004820152601260248201527129a427acaa9d102727afa922a1a2a4ab22a960711b60448201526064016106a7565b6001600160e01b0319811663bc197c8160e01b146110fd5760405162461bcd60e51b815260206004820152601760248201527629a427acaa9d1024a72b20a624a22fa922a1a2a4ab22a960491b60448201526064016106a7565b6000804660065414156128095750600554610e06565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612833306136d2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001209050905090565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01518051908b0120975160009b61296f9b7f5fbc9a24e1532fa5245d1ec2dc5592849ae97ac5475f361b1a1f7a6e2ac9b2fd9b919a919998979695949392019a8b526001600160a01b03998a1660208c015297891660408b015295881660608a0152608089019490945260a0880192909252851660c0870152841660e08601529092166101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60408701516000906001600160a01b031630146129e55760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b60448201526064016106a7565b60008511612a2d5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b60448201526064016106a7565b6000878152600f60205260409020546080890151612a4b8783615770565b1115612a8b5760405162461bcd60e51b815260206004820152600f60248201526e14d213d6554e8814d3d31117d3d555608a1b60448201526064016106a7565b612a958989613727565b612ab8888a600001518b61014001518c61016001518d61018001516110ec610dfc565b6000600d60008a815260200190815260200160002090508960a001516001600160a01b031663610e2d3b8b602001518c61010001518d61012001518c8b8760000160009054906101000a90046001600160a01b0316886002015489600501546040518963ffffffff1660e01b8152600401612b3a9897969594939291906154bc565b60206040518083038186803b158015612b5257600080fd5b505afa158015612b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8a9190614f06565b15612cd157612b998783615770565b60008a8152600f602052604090205560808a0151612bb78884615770565b1415612bd7576000898152600e60205260409020805460ff191660011790555b60e08a01516001600160a01b038116612bee575089515b612c0e8b604001518c606001518d60c001518c858d8d611d84919061579c565b612c5a5760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e44530060448201526064016106a7565b6001600160a01b038616612c6c578895505b612c858b604001518c60000151888e606001518c613c76565b897f0642c67a22e8657a7126bb3b9fb3f01965503642f884e4c6a1efd8ed24f46c0d8a8a8a8a8a604051612cbd959493929190615514565b60405180910390a260019350505050612e66565b8960a001516001600160a01b031663e9b3838f8b602001518c61010001518d61012001518c8b8760000160009054906101000a90046001600160a01b0316886002015489600501546040518963ffffffff1660e01b8152600401612d3c9897969594939291906154bc565b60206040518083038186803b158015612d5457600080fd5b505afa158015612d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8c9190614f06565b15612e2d5780546001600160a01b03808a166001600160a01b031992831617835560018301899055600283018890556003830180548883169084161790556004830180549187169190921617905542600582015560405189907f4055f76fe1f351fec66b9ba790ddbdc29eb45c038163a6b1327277441a8c65f190612e1a908b908b908b908b908b90615514565b60405180910390a2600092505050612e66565b60405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b60448201526064016106a7565b979650505050505050565b60405161190160f01b60208201526022810182905260428101879052600090606201604051602081830303815290604052805190602001209050612eb5863b151590565b15612fc557604080516020810186905280820185905260f887901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03881691631626ba7e91612f1b91859160650161557e565b60206040518083038186803b158015612f3357600080fd5b505afa158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b9190614f8d565b6001600160e01b031916631626ba7e60e01b14612fc05760405162461bcd60e51b815260206004820152601360248201527214d213d6554e8815539055551213d492569151606a1b60448201526064016106a7565b6110fd565b856001600160a01b0316612fdb82878787613ea1565b6001600160a01b0316146110fd5760405162461bcd60e51b815260206004820152601360248201527214d213d6554e8815539055551213d492569151606a1b60448201526064016106a7565b816001600160a01b0316836001600160a01b0316141561307e5760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881393d517d0531313d5d15160721b60448201526064016106a7565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b601054600160a81b900460ff90811614156131535760105460ff908116908216111561314e5760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016106a7565b6131a7565b60105460ff600160a81b9091048116908216106131a75760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016106a7565b6010805460ff60a81b1916600160a81b60ff8416908102919091179091556040519081527fd9ac3bc8ad92267d0b101786ddb4d37746ed1e3ee77637846294edf17dd9eb8a90602001610b53565b6001600160a01b03811661324b5760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e540000000060448201526064016106a7565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f1ce5f25607cb1a4fa6c947b55700213a9ed6a1d7ef1cf1d02ab467efd02a993e90602001610b53565b6001600160a01b0384166132c75760405162461bcd60e51b81526004016106a79061567b565b336132d881600087611f7e88613cb8565b60008481526001602090815260408083206001600160a01b03891684529091528120805485929061330a908490615770565b909155505060408051858152602081018590526001600160a01b0380881692600092918516916000805160206159d8833981519152910160405180910390a4611f8781600087878787613dad565b6001600160a01b03831661337e5760405162461bcd60e51b81526004016106a79061567b565b805182511461339f5760405162461bcd60e51b81526004016106a7906156ab565b6040805160208101909152600090523360005b83518110156134a05760008482815181106133dd57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061340957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526001835260408082206001600160a01b038c16835290935291909120549091508181101561345a5760405162461bcd60e51b81526004016106a7906156e2565b61346482826157bb565b60009384526001602090815260408086206001600160a01b038c168752909152909320929092555081905061349881615876565b9150506133b2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516134f1929190615559565b60405180910390a450505050565b80516020808301516040808501516060860151608087015160a0880151935160009761296f977fb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b297919691959493920196875260208701959095526001600160a01b03938416604087015260608601929092526080850152811660a08401521660c082015260e00190565b600054610100900460ff16806135a3575060005460ff16155b6135bf5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156135e1576000805461ffff19166101011790555b6135e9614034565b80156112c5576000805461ff001916905550565b600054610100900460ff1680613616575060005460ff16155b6136325760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff16158015613654576000805461ffff19166101011790555b61365d82614093565b8015611538576000805461ff00191690555050565b600054610100900460ff168061368b575060005460ff16155b6136a75760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156136c9576000805461ffff19166101011790555b61365d826140f3565b6060816136fa57506040805180820190915260048152630307830360e41b6020820152610700565b8160005b811561371d578061370e81615876565b915050600882901c91506136fe565b61223c8482612244565b6000818152600e602052604090205460ff16156137865760405162461bcd60e51b815260206004820152601b60248201527f53484f59553a2043414e43454c4c45445f4f525f434c41494d4544000000000060448201526064016106a7565b81516001600160a01b03166137d45760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa6a0a5a2a960611b60448201526064016106a7565b60408201516001600160a01b03166138235760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881253959053125117d3919560721b60448201526064016106a7565b600082608001511161386f5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b60448201526064016106a7565b60a08201516001600160a01b03166138c95760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f535452415445475900000000000000000060448201526064016106a7565b60c08201516001600160a01b03166139235760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f43555252454e435900000000000000000060448201526064016106a7565b61393a60075461010090046001600160a01b031690565b60a0830151604051632666e89f60e21b81526001600160a01b03918216600482015291169063999ba27c9060240160206040518083038186803b15801561398057600080fd5b505afa158015613994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b89190614f06565b6115385760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a2053545241544547595f4e4f545f57484954454c49535445440060448201526064016106a7565b6000613a12858530856141a8565b613a1e57506000613c6c565b6000613a3760075461010090046001600160a01b031690565b90506000839050600080836001600160a01b031663aec0b5436040518163ffffffff1660e01b8152600401604080518083038186803b158015613a7957600080fd5b505afa158015613a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab19190614d88565b909250905060006103e8613ac860ff84168961579c565b613ad29190615788565b9050613ae86001600160a01b038b16848361427a565b613af281856157bb565b9350505050600080836001600160a01b031663c2b11e186040518163ffffffff1660e01b8152600401604080518083038186803b158015613b3257600080fd5b505afa158015613b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6a9190614d88565b909250905060006103e8613b8160ff84168961579c565b613b8b9190615788565b9050613ba16001600160a01b038b16848361427a565b613bab81856157bb565b60405163152a902d60e11b8152600481018d9052602481018990529094506001600160a01b038d169350632a55205a92506044019050604080518083038186803b158015613bf857600080fd5b505afa925050508015613c28575060408051601f3d908101601f19168201909252613c2591810190614d07565b60015b613c3157613c51565b8015613c4e57613c4181846157bb565b9250613c4e8983836142d1565b50505b613c656001600160a01b038816868361427a565b6001925050505b9695505050505050565b613c8284848484613d11565b60408051838152602081018390526001600160a01b03808616929087169133916000805160206159d88339815191529101612513565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613d0057634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b83613d246004546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480613d5057506004546001600160a01b038281169116145b80613d655750601054600160b81b900460ff16155b613da15760405162461bcd60e51b815260206004820152600d60248201526c14d213d6554e881313d0d2d151609a1b60448201526064016106a7565b611f8785858585614360565b6001600160a01b0384163b15610df45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613df19089908990889088908890600401615482565b602060405180830381600087803b158015613e0b57600080fd5b505af1925050508015613e3b575060408051601f3d908101601f19168201909252613e3891810190614f8d565b60015b613e47576127206158e7565b6001600160e01b0319811663f23a6e6160e01b146110fd5760405162461bcd60e51b815260206004820152601760248201527629a427acaa9d1024a72b20a624a22fa922a1a2a4ab22a960491b60448201526064016106a7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613f135760405162461bcd60e51b815260206004820181905260248201527f53484f59553a20494e56414c49445f5349474e41545552455f535f56414c554560448201526064016106a7565b8360ff16601b1480613f2857508360ff16601c145b613f745760405162461bcd60e51b815260206004820181905260248201527f53484f59553a20494e56414c49445f5349474e41545552455f565f56414c554560448201526064016106a7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613fc8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661402b5760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f5349474e4154555245000000000000000060448201526064016106a7565b95945050505050565b600054610100900460ff168061404d575060005460ff16155b6140695760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561408b576000805461ffff19166101011790555b6135e96143f7565b600054610100900460ff16806140ac575060005460ff16155b6140c85760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156140ea576000805461ffff19166101011790555b61365d8261446c565b600054610100900460ff168061410c575060005460ff16155b6141285760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561414a576000805461ffff19166101011790555b600480546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015611538576000805461ff00191690555050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839283929189169161420e9190615367565b6000604051808303816000865af19150503d806000811461424b576040519150601f19603f3d011682016040523d82523d6000602084013e614250565b606091505b5091509150818015612e66575080511580612e66575080806020019051810190612e669190614f06565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526142cc90849061447f565b505050565b6142e56001600160a01b038416838361427a565b813b156142cc57816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561432757600080fd5b505af1925050508015614357575060408051601f3d908101601f1916820190925261435491810190615225565b60015b610a92576142cc565b60008281526001602090815260408083206001600160a01b0388168452909152902054818110156143a35760405162461bcd60e51b81526004016106a7906156e2565b6143ad82826157bb565b60008481526001602090815260408083206001600160a01b038a811685529252808320939093558616815290812080548492906143eb908490615770565b90915550505050505050565b600054610100900460ff1680614410575060005460ff16155b61442c5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561444e576000805461ffff19166101011790555b600b805460ff1916905580156112c5576000805461ff001916905550565b805161153890600390602084019061464c565b60006144d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145519092919063ffffffff16565b8051909150156142cc57808060200190518101906144f29190614f06565b6142cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a7565b606061223c848460008585843b6145aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a7565b600080866001600160a01b031685876040516145c69190615367565b60006040518083038185875af1925050503d8060008114614603576040519150601f19603f3d011682016040523d82523d6000602084013e614608565b606091505b5091509150612e6682828660608315614622575081611b1e565b8251156146325782518084602001fd5b8160405162461bcd60e51b81526004016106a791906155c6565b82805461465890615815565b90600052602060002090601f01602090048101928261467a57600085556146c0565b82601f1061469357805160ff19168380011785556146c0565b828001600101855582156146c0579182015b828111156146c05782518255916020019190600101906146a5565b506146cc929150614744565b5090565b8280546146dc90615815565b90600052602060002090601f0160209004810192826146fe57600085556146c0565b82601f106147175782800160ff198235161785556146c0565b828001600101855582156146c0579182015b828111156146c0578235825591602001919060010190614729565b5b808211156146cc5760008155600101614745565b80356107008161598f565b60008083601f840112614775578182fd5b5081356001600160401b0381111561478b578182fd5b6020830191508360208260051b8501011115610bb757600080fd5b600082601f8301126147b6578081fd5b813560206147c382615726565b6040516147d0828261584a565b8381528281019150858301600585901b870184018810156147ef578586fd5b855b8581101561480d578135845292840192908401906001016147f1565b5090979650505050505050565b600082601f83011261482a578081fd5b813561483581615749565b604051614842828261584a565b828152856020848701011115614856578384fd5b82602086016020830137918201602001929092529392505050565b60006101a0808385031215614884578182fd5b61488d81615719565b91505061489982614759565b81526148a760208301614759565b60208201526148b860408301614759565b604082015260608201356060820152608082013560808201526148dd60a08301614759565b60a08201526148ee60c08301614759565b60c08201526148ff60e08301614759565b60e08201526101008281013590820152610120808301356001600160401b0381111561492a57600080fd5b6149368582860161481a565b82840152505061014061494a81840161496c565b9082015261016082810135908201526101809182013591810191909152919050565b8035610700816159c8565b600060208284031215614988578081fd5b8135611b1e8161598f565b600080604083850312156149a5578081fd5b82356149b08161598f565b915060208301356149c08161598f565b809150509250929050565b600080600080600060a086880312156149e2578081fd5b85356149ed8161598f565b945060208601356149fd8161598f565b935060408601356001600160401b0380821115614a18578283fd5b614a2489838a016147a6565b94506060880135915080821115614a39578283fd5b614a4589838a016147a6565b93506080880135915080821115614a5a578283fd5b50614a678882890161481a565b9150509295509295909350565b600080600080600060a08688031215614a8b578283fd5b8535614a968161598f565b94506020860135614aa68161598f565b9350604086013592506060860135915060808601356001600160401b03811115614ace578182fd5b614a678882890161481a565b60008060008060008060c08789031215614af2578384fd5b8635614afd8161598f565b95506020870135614b0d8161598f565b9450604087013593506060870135614b24816159c8565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614b55578283fd5b8535614b608161598f565b945060208601356001600160401b0380821115614b7b578485fd5b614b8789838a016147a6565b95506040880135915080821115614b9c578485fd5b50614ba9888289016147a6565b9350506060860135614bba8161598f565b91506080860135614bca816159c8565b809150509295509295909350565b60008060008060808587031215614bed578182fd5b8435614bf88161598f565b935060208501356001600160401b0380821115614c13578384fd5b614c1f888389016147a6565b94506040870135915080821115614c34578384fd5b614c40888389016147a6565b93506060870135915080821115614c55578283fd5b50614c628782880161481a565b91505092959194509250565b60008060408385031215614c80578182fd5b8235614c8b8161598f565b915060208301356149c0816159a4565b600080600060608486031215614caf578081fd5b8335614cba8161598f565b9250602084013591506040840135614cd18161598f565b809150509250925092565b60008060408385031215614cee578182fd5b8235614cf98161598f565b946020939093013593505050565b60008060408385031215614d19578182fd5b8251614d248161598f565b6020939093015192949293505050565b60008060008060808587031215614d49578182fd5b8435614d548161598f565b9350602085013592506040850135915060608501356001600160401b03811115614d7c578182fd5b614c628782880161481a565b60008060408385031215614d9a578182fd5b8251614da58161598f565b60208401519092506149c0816159c8565b60008060408385031215614dc8578182fd5b82356001600160401b0380821115614dde578384fd5b818501915085601f830112614df1578384fd5b81356020614dfe82615726565b604051614e0b828261584a565b8381528281019150858301600585901b870184018b1015614e2a578889fd5b8896505b84871015614e55578035614e418161598f565b835260019690960195918301918301614e2e565b5096505086013592505080821115614e6b578283fd5b50614e78858286016147a6565b9150509250929050565b60008060008060408587031215614e97578182fd5b84356001600160401b0380821115614ead578384fd5b614eb988838901614764565b90965094506020870135915080821115614ed1578384fd5b50614ede87828801614764565b95989497509550505050565b600060208284031215614efb578081fd5b8135611b1e816159a4565b600060208284031215614f17578081fd5b8151611b1e816159a4565b600060208284031215614f33578081fd5b5035919050565b600080600060608486031215614f4e578081fd5b833592506020840135614f608161598f565b929592945050506040919091013590565b600060208284031215614f82578081fd5b8135611b1e816159b2565b600060208284031215614f9e578081fd5b8151611b1e816159b2565b60008060208385031215614fbb578182fd5b82356001600160401b0380821115614fd1578384fd5b818501915085601f830112614fe4578384fd5b813581811115614ff2578485fd5b866020828501011115615003578485fd5b60209290920196919550909350505050565b600060208284031215615026578081fd5b81356001600160401b0381111561503b578182fd5b61223c8482850161481a565b600060208284031215615058578081fd5b81516001600160401b0381111561506d578182fd5b8201601f8101841361507d578182fd5b805161508881615749565b604051615095828261584a565b8281528660208486010111156150a9578485fd5b613c6c8360208301602087016157d2565b6000602082840312156150cb578081fd5b81356001600160401b038111156150e0578182fd5b61223c84828501614871565b600080828403610140811215615100578283fd5b83356001600160401b03811115615115578384fd5b61512186828701614871565b93505061012080601f1983011215615137578283fd5b61514081615719565b91506020850135825261515560408601614759565b6020830152606085013560408301526080850135606083015261517a60a08601614759565b608083015261518b60c08601614759565b60a083015261519c60e0860161496c565b60c08301526101008581013560e0840152940135938101939093525092909150565b600080600080600060a086880312156151d5578283fd5b85356001600160401b038111156151ea578384fd5b6151f688828901614871565b955050602086013593506040860135925060608601356152158161598f565b91506080860135614bca8161598f565b600060208284031215615236578081fd5b5051919050565b6000806040838503121561524f578182fd5b8235915060208301356001600160401b0381111561526b578182fd5b614e788582860161481a565b60008060408385031215615289578182fd5b50508035926020909101359150565b600080600080608085870312156152ad578182fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156152da578081fd5b8135611b1e816159c8565b6000602082840312156152f6578081fd5b8151611b1e816159c8565b6000815180845260208085019450808401835b8381101561533057815187529582019590820190600101615314565b509495945050505050565b600081518084526153538160208601602086016157d2565b601f01601f19169290920160200192915050565b600082516153798184602087016157d2565b9190910192915050565b600083516153958184602088016157d2565b8351908301906153a98183602088016157d2565b64173539b7b760d91b9101908152600501949350505050565b600084516153d48184602089016157d2565b8451908301906153e88183602089016157d2565b602f60f81b910190815283516154058160018401602088016157d2565b64173539b7b760d91b6001929091019182015260060195945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061545090830186615301565b82810360608401526154628186615301565b90508281036080840152615476818561533b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612e669083018461533b565b6001600160a01b03898116825260208201899052610100604083018190526000916154e98483018b61533b565b9881166060850152608084019790975250509290931660a083015260c082015260e001529392505050565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b600060208252611b1e6020830184615301565b60006040825261556c6040830185615301565b828103602084015261402b8185615301565b60008382526040602083015261223c604083018461533b565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252611b1e602083018461533b565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b60208082526010908201526f14d213d6554e8814915153951490539560821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526016908201527553484f59553a20494e56414c49445f4144445245535360501b604082015260600190565b60208082526018908201527f53484f59553a204c454e475448535f4e4f545f455155414c0000000000000000604082015260600190565b6020808252601b908201527f53484f59553a20494e53554646494349454e545f42414c414e43450000000000604082015260600190565b604051610700828261584a565b60006001600160401b0382111561573f5761573f6158d1565b5060051b60200190565b60006001600160401b03821115615762576157626158d1565b50601f01601f191660200190565b60008219821115615783576157836158a5565b500190565b600082615797576157976158bb565b500490565b60008160001904831182151516156157b6576157b66158a5565b500290565b6000828210156157cd576157cd6158a5565b500390565b60005b838110156157ed5781810151838201526020016157d5565b83811115610a925750506000910152565b60008161580d5761580d6158a5565b506000190190565b600181811c9082168061582957607f821691505b602082108114156109df57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561586f5761586f6158d1565b6040525050565b600060001982141561588a5761588a6158a5565b5060010190565b6000826158a0576158a06158bb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610e0957600481823e5160e01c90565b600060443d101561590e57610e09565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561593f575050505050610e09565b828501915081518181111561595957505050505050610e09565b843d870101602082850101111561597557505050505050610e09565b6159846020828601018761584a565b509094505050505090565b6001600160a01b03811681146112c557600080fd5b80151581146112c557600080fd5b6001600160e01b0319811681146112c557600080fd5b60ff811681146112c557600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a264697066735822122044ae92560ebf3c6cf8e286df76d278e1d38f8114a62d4b838bb72c9be225195a64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c8063715018a611610146578063bff5e79d116100c3578063cf30901211610087578063cf309012146105fc578063d0d0924614610610578063e331a71514610623578063e985e9c514610646578063f242432a14610659578063f2fde38b1461066c57610252565b8063bff5e79d14610599578063c45a0155146105ac578063c47f0027146105c3578063c4d66de8146105d6578063cb27e1b6146105e957610252565b806383ca4b6f1161010a57806383ca4b6f14610528578063862440e21461053b5780638da5cb5b1461054e578063a22cb46514610573578063b81e84661461058657610252565b8063715018a6146104ba578063731133e9146104c257806375e6590f146104d557806376882663146104f55780637ecebe001461050857610252565b80633644e515116101d4578063559f05dc11610198578063559f05dc146103d057806355f804b3146103ef5780635771f997146104025780635f7ef2fa146104945780636ef8e02d146104a757610252565b80633644e5151461036f57806338bc54cd146103775780633cf32cd11461038a57806348613c281461039d5780634e1273f4146103b057610252565b80631f7fdffa1161021b5780631f7fdffa146102dd578063211e28b6146102f05780632a55205a146103035780632eb2c2d61461033557806330adf81f1461034857610252565b8062fdd58e1461025757806301ffc9a71461027d57806306fdde03146102a05780630e89341c146102b5578063177315e3146102c8575b600080fd5b61026a610265366004614cdc565b61067f565b6040519081526020015b60405180910390f35b61029061028b366004614f71565b6106d8565b6040519015158152602001610274565b6102a8610705565b60405161027491906155c6565b6102a86102c3366004614f22565b610793565b6102db6102d6366004615298565b6109e5565b005b6102db6102eb366004614bd8565b610a33565b6102db6102fe366004614eea565b610a98565b610316610311366004615277565b610b5e565b604080516001600160a01b039093168352602083019190915201610274565b6102db6103433660046149cb565b610bbe565b61026a7fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6281565b61026a610dfc565b6102906103853660046151be565b610e0c565b6102db6103983660046150ba565b610e9a565b6102db6103ab366004614ada565b610f85565b6103c36103be366004614db6565b611106565b6040516102749190615546565b6102906103de366004614977565b6001600160a01b0381163014919050565b6102db6103fd366004615015565b611225565b610455610410366004614f22565b600d602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293918316929091169086565b604080516001600160a01b03978816815260208101969096528501939093529084166060840152909216608082015260a081019190915260c001610274565b6102db6104a23660046152c9565b611292565b6102db6104b5366004614977565b6112c8565b6102db6112fb565b6102db6104d0366004614d34565b61136f565b61026a6104e3366004614f22565b600f6020526000908152604090205481565b6102db610503366004614f3a565b6113ce565b61026a610516366004614977565b600a6020526000908152604090205481565b6102db610536366004614e82565b611439565b6102db61054936600461523d565b6114a7565b6004546001600160a01b03165b6040516001600160a01b039091168152602001610274565b6102db610581366004614c6e565b61152d565b6102906105943660046150ec565b61153c565b6102db6105a7366004614b3e565b611778565b61055b60075461010090046001600160a01b031690565b6102db6105d1366004614fa9565b6118e3565b6102db6105e4366004614977565b6119b3565b61026a6105f7366004614c9b565b611aef565b60105461029090600160b81b900460ff1681565b6102db61061e3660046150ba565b611b25565b610290610631366004614f22565b600e6020526000908152604090205460ff1681565b610290610654366004614993565b611ee2565b6102db610667366004614a74565b611f10565b6102db61067a366004614977565b611ff6565b60006001600160a01b0383166106b05760405162461bcd60e51b81526004016106a79061567b565b60405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b600063152a902d60e11b6001600160e01b0319831614806106fd57506106fd826120d2565b90505b919050565b6011805461071290615815565b80601f016020809104026020016040519081016040528092919081815260200182805461073e90615815565b801561078b5780601f106107605761010080835404028352916020019161078b565b820191906000526020600020905b81548152906001019060200180831161076e57829003601f168201915b505050505081565b6000818152600960205260408120805460609291906107b190615815565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd90615815565b801561082a5780601f106107ff5761010080835404028352916020019161082a565b820191906000526020600020905b81548152906001019060200180831161080d57829003601f168201915b50505050509050600081511115610842579050610700565b60006008805461085190615815565b80601f016020809104026020016040519081016040528092919081815260200182805461087d90615815565b80156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b5050505050905060008151111561090e57806108e585612122565b6040516020016108f6929190615383565b60405160208183030381529060405292505050610700565b600760019054906101000a90046001600160a01b03166001600160a01b031663c6edbca46040518163ffffffff1660e01b815260040160006040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109989190810190615047565b905060006109a7306014612244565b905081816109b487612122565b6040516020016109c6939291906153c2565b6040516020818303038152906040529350505050610700565b50919050565b6109f0338585612425565b6040805184815260208101839052839186917fed1397de7c11c080337d84f0acdca9b26b1237affe97a486bb12549594a70731910160405180910390a350505050565b33610a466004546001600160a01b031690565b6001600160a01b03161480610a6a575060075461010090046001600160a01b031633145b610a865760405162461bcd60e51b81526004016106a7906155d9565b610a9284848484612522565b50505050565b6004546001600160a01b03163314610ac25760405162461bcd60e51b81526004016106a7906155d9565b8015610b0657601054600160b01b900460ff1615610af25760405162461bcd60e51b81526004016106a7906155d9565b6010805460ff60b01b1916600160b01b1790555b60108054821515600160b81b0260ff60b81b199091161790556040517f9514871d395e6e24ef28f340cbcdcaa89f790cdf4a4fa6c25cf83a81fb27a86d90610b5390831515815260200190565b60405180910390a150565b60105460009081908190600160a81b900460ff90811614610ba1576010546103e890610b9490600160a81b900460ff168661579c565b610b9e9190615788565b90505b60105461010090046001600160a01b0316925090505b9250929050565b8151835114610bdf5760405162461bcd60e51b81526004016106a7906156ab565b6001600160a01b038416610c055760405162461bcd60e51b81526004016106a79061567b565b6001600160a01b038516331480610c215750610c218533611ee2565b610c3d5760405162461bcd60e51b81526004016106a7906155d9565b3360005b8451811015610d8e576000858281518110610c6c57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610c9857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526001835260408082206001600160a01b038e168352909352919091205490915081811015610ce95760405162461bcd60e51b81526004016106a7906156e2565b610cf382826157bb565b6001600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816001600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610d739190615770565b9250508190555050505080610d8790615876565b9050610c41565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610dde929190615559565b60405180910390a4610df4818787878787612686565b505050505050565b6000610e066127f3565b90505b90565b600b5460009060ff16151560011415610e375760405162461bcd60e51b81526004016106a790615603565b600b805460ff1916600117905560208601516001600160a01b031615610e6f5760405162461bcd60e51b81526004016106a7906155d9565b610e8686610e7c8861289f565b338888888861298c565b600b805460ff191690559695505050505050565b80516001600160a01b0316331480610ebe575060208101516001600160a01b031633145b610eda5760405162461bcd60e51b81526004016106a7906155d9565b6000610ee58261289f565b6000818152600d60205260409020549091506001600160a01b031615610f415760405162461bcd60e51b815260206004820152601160248201527053484f59553a204249445f45584953545360781b60448201526064016106a7565b6000818152600e6020526040808220805460ff191660011790555182917fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a91a25050565b83421115610fc65760405162461bcd60e51b815260206004820152600e60248201526d14d213d6554e881156141254915160921b60448201526064016106a7565b6001600160a01b038616610fec5760405162461bcd60e51b81526004016106a79061567b565b856001600160a01b0316856001600160a01b031614156110455760405162461bcd60e51b815260206004820152601460248201527353484f59553a204e4f545f4e454345535341525960601b60448201526064016106a7565b6001600160a01b0386166000908152600a6020526040812080547fdaab21af31ece73a508939fedd476a5ee5129a5ed4bb091f3236ffb45394df6291899189918561108f83615876565b909155506040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506110f181888686866110ec610dfc565b612e71565b6110fd87876001613027565b50505050505050565b606081518351146111295760405162461bcd60e51b81526004016106a7906156ab565b600083516001600160401b0381111561115257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561117b578160200160208202803683370190505b50905060005b845181101561121d576111e28582815181106111ad57634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111d557634e487b7160e01b600052603260045260246000fd5b602002602001015161067f565b82828151811061120257634e487b7160e01b600052603260045260246000fd5b602090810291909101015261121681615876565b9050611181565b509392505050565b6004546001600160a01b0316331461124f5760405162461bcd60e51b81526004016106a7906155d9565b805161126290600890602084019061464c565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa81604051610b5391906155c6565b6004546001600160a01b031633146112bc5760405162461bcd60e51b81526004016106a7906155d9565b6112c5816130eb565b50565b6004546001600160a01b031633146112f25760405162461bcd60e51b81526004016106a7906155d9565b6112c5816131f5565b6004546001600160a01b031633146113255760405162461bcd60e51b81526004016106a7906155d9565b6004546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600480546001600160a01b0319169055565b336113826004546001600160a01b031690565b6001600160a01b031614806113a6575060075461010090046001600160a01b031633145b6113c25760405162461bcd60e51b81526004016106a7906155d9565b610a92848484846132a1565b336000818152600c6020908152604080832087845282528083206001600160a01b03871680855290835292819020859055518481529192869290917fb45107556fea5943927a97bcb8910e249aea88961a6a30fb2f06674dbd44004b910160405180910390a4505050565b610a92338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061335892505050565b6004546001600160a01b031633146114d15760405162461bcd60e51b81526004016106a7906155d9565b600082815260096020908152604090912082516114f09284019061464c565b50817fee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e468260405161152191906155c6565b60405180910390a25050565b611538338383613027565b5050565b600b5460009060ff161515600114156115675760405162461bcd60e51b81526004016106a790615603565b600b805460ff19166001179055600061157f8461289f565b835190915081146115ca5760405162461bcd60e51b81526020600482015260156024820152740a6909eb2aa7440aa9c9a82a886908a88be9082a69605b1b60448201526064016106a7565b60208301516001600160a01b031661161c5760405162461bcd60e51b815260206004820152601560248201527429a427acaa9d1024a72b20a624a22fa9a4a3a722a960591b60448201526064016106a7565b6000611627846134ff565b60208601519091506001600160a01b0316156117215760208501516001600160a01b031633148061168d57506020808601516001600160a01b039081166000908152600c8352604080822086835284528082208885015190931682529190925290205481145b6116a95760405162461bcd60e51b81526004016106a7906155d9565b602085810180516001600160a01b039081166000908152600c8452604080822087835285528082208986018051851684529086528183208390555193519051918252928216938693909216917fb45107556fea5943927a97bcb8910e249aea88961a6a30fb2f06674dbd44004b910160405180910390a45b6117428185602001518660c001518760e001518861010001516110ec610dfc565b611765858386602001518760400151886060015189608001518a60a0015161298c565b600b805460ff1916905595945050505050565b600054610100900460ff1680611791575060005460ff16155b6117ad5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156117cf576000805461ffff19166101011790555b6117d761358a565b6117e0866119b3565b600760019054906101000a90046001600160a01b03166001600160a01b03166317e1f82e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182e57600080fd5b505afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186691906152e5565b6010805460ff191660ff9290921691909117905584511561189c5761189c86868660405180602001604052806000815250612522565b6118a5836131f5565b6010805460ff60a81b191660ff60a81b17905560ff8216156118ca576118ca826130eb565b8015610df4576000805461ff0019169055505050505050565b6004546001600160a01b0316331461190d5760405162461bcd60e51b81526004016106a7906155d9565b6011805461191a90615815565b1590506119695760405162461bcd60e51b815260206004820152601760248201527f53484f59553a204e414d455f414c52454144595f53455400000000000000000060448201526064016106a7565b611975601183836146d0565b507f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf0282826040516119a7929190615597565b60405180910390a15050565b600054610100900460ff16806119cc575060005460ff16155b6119e85760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff16158015611a0a576000805461ffff19166101011790555b611a22604051806020016040528060008152506135fd565b611a2b82613672565b60078054610100600160a81b0319163361010002179055466006557f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611a70306136d2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206005558015611538576000805461ff00191690555050565b6001600160a01b038084166000908152600c602090815260408083208684528252808320938516835292905220545b9392505050565b600b5460ff16151560011415611b4d5760405162461bcd60e51b81526004016106a790615603565b600b805460ff1916600117905560408101516001600160a01b03163014611bb05760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b60448201526064016106a7565b6000611bbb8261289f565b9050611bc78282613727565b611bea8183600001518461014001518561016001518661018001516110ec610dfc565b6000818152600d6020908152604091829020825160c08101845281546001600160a01b0390811680835260018401548386015260028401548387018190526003850154831660608501526004808601548416608086015260059095015460a08086018290528a0151968a01516101008b01516101208c0151995163610e2d3b60e01b81529699989095169763610e2d3b97611c9497929695919491939192849284929091016154bc565b60206040518083038186803b158015611cac57600080fd5b505afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce49190614f06565b611d215760405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b60448201526064016106a7565b60e08301516001600160a01b038116611d38575082515b6000838152600e6020908152604091829020805460ff1916600117905585820151606087015160c088015186519387015194870151611d8995939492939192918791611d84919061579c565b613a04565b611dd55760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e44530060448201526064016106a7565b6020808301516000858152600f909252604090912054611df59190615770565b6000848152600f602052604090205560608201516001600160a01b038116611e1b575081515b611e38856040015186600001518388606001518760200151613c76565b6000848152600d6020908152604080832080546001600160a01b03199081168255600182018590556002820185905560038201805482169055600482018054909116905560050192909255845190850151858301516080870151935188947f0642c67a22e8657a7126bb3b9fb3f01965503642f884e4c6a1efd8ed24f46c0d94611ec9949093909290918891615514565b60405180910390a25050600b805460ff19169055505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416611f365760405162461bcd60e51b81526004016106a79061567b565b6001600160a01b038516331480611f525750611f528533611ee2565b611f6e5760405162461bcd60e51b81526004016106a7906155d9565b33611f8e818787611f7e88613cb8565b611f8788613cb8565b5050505050565b611f9a86868686613d11565b846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206159d88339815191528787604051611fe0929190918252602082015260400190565b60405180910390a4610df4818787878787613dad565b6004546001600160a01b031633146120205760405162461bcd60e51b81526004016106a7906155d9565b6001600160a01b0381166120765760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f4e45575f4f574e4552000000000000000060448201526064016106a7565b6004546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216636cdb3d1360e11b148061210357506001600160e01b031982166303a24d0760e21b145b806106fd57506301ffc9a760e01b6001600160e01b03198316146106fd565b60608161214757506040805180820190915260018152600360fc1b6020820152610700565b8160005b8115612171578061215b81615876565b915061216a9050600a83615788565b915061214b565b6000816001600160401b0381111561219957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121c3576020820181803683370190505b5090505b841561223c576121d86001836157bb565b91506121e5600a86615891565b6121f0906030615770565b60f81b81838151811061221357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612235600a86615788565b94506121c7565b949350505050565b6060600061225383600261579c565b61225e906002615770565b6001600160401b0381111561228357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122ad576020820181803683370190505b509050600360fc1b816000815181106122d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061231357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061233784600261579c565b612342906001615770565b90505b60018111156123d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061238457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106123a857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936123cf816157fe565b9050612345565b508315611b1e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a7565b6001600160a01b03831661244b5760405162461bcd60e51b81526004016106a79061567b565b3361247b8185600061245c87613cb8565b61246587613cb8565b5050604080516020810190915260009052505050565b60008381526001602090815260408083206001600160a01b0388168452909152902054828110156124be5760405162461bcd60e51b81526004016106a7906156e2565b6124c883826157bb565b60008581526001602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616916000805160206159d883398151915291015b60405180910390a45050505050565b6001600160a01b0384166125485760405162461bcd60e51b81526004016106a79061567b565b81518351146125695760405162461bcd60e51b81526004016106a7906156ab565b3360005b84518110156126225783818151811061259657634e487b7160e01b600052603260045260246000fd5b6020026020010151600160008784815181106125c257634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461260a9190615770565b9091555081905061261a81615876565b91505061256d565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612673929190615559565b60405180910390a4611f87816000878787875b6001600160a01b0384163b15610df45760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126ca9089908990889088908890600401615424565b602060405180830381600087803b1580156126e457600080fd5b505af1925050508015612714575060408051601f3d908101601f1916820190925261271191810190614f8d565b60015b612799576127206158e7565b806308c379a0141561275a57506127356158fe565b80612740575061275c565b8060405162461bcd60e51b81526004016106a791906155c6565b505b60405162461bcd60e51b815260206004820152601260248201527129a427acaa9d102727afa922a1a2a4ab22a960711b60448201526064016106a7565b6001600160e01b0319811663bc197c8160e01b146110fd5760405162461bcd60e51b815260206004820152601760248201527629a427acaa9d1024a72b20a624a22fa922a1a2a4ab22a960491b60448201526064016106a7565b6000804660065414156128095750600554610e06565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612833306136d2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001209050905090565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01518051908b0120975160009b61296f9b7f5fbc9a24e1532fa5245d1ec2dc5592849ae97ac5475f361b1a1f7a6e2ac9b2fd9b919a919998979695949392019a8b526001600160a01b03998a1660208c015297891660408b015295881660608a0152608089019490945260a0880192909252851660c0870152841660e08601529092166101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60408701516000906001600160a01b031630146129e55760405162461bcd60e51b815260206004820152601760248201527653484f59553a20494e56414c49445f45584348414e474560481b60448201526064016106a7565b60008511612a2d5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b60448201526064016106a7565b6000878152600f60205260409020546080890151612a4b8783615770565b1115612a8b5760405162461bcd60e51b815260206004820152600f60248201526e14d213d6554e8814d3d31117d3d555608a1b60448201526064016106a7565b612a958989613727565b612ab8888a600001518b61014001518c61016001518d61018001516110ec610dfc565b6000600d60008a815260200190815260200160002090508960a001516001600160a01b031663610e2d3b8b602001518c61010001518d61012001518c8b8760000160009054906101000a90046001600160a01b0316886002015489600501546040518963ffffffff1660e01b8152600401612b3a9897969594939291906154bc565b60206040518083038186803b158015612b5257600080fd5b505afa158015612b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8a9190614f06565b15612cd157612b998783615770565b60008a8152600f602052604090205560808a0151612bb78884615770565b1415612bd7576000898152600e60205260409020805460ff191660011790555b60e08a01516001600160a01b038116612bee575089515b612c0e8b604001518c606001518d60c001518c858d8d611d84919061579c565b612c5a5760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a204641494c45445f544f5f5452414e534645525f46554e44530060448201526064016106a7565b6001600160a01b038616612c6c578895505b612c858b604001518c60000151888e606001518c613c76565b897f0642c67a22e8657a7126bb3b9fb3f01965503642f884e4c6a1efd8ed24f46c0d8a8a8a8a8a604051612cbd959493929190615514565b60405180910390a260019350505050612e66565b8960a001516001600160a01b031663e9b3838f8b602001518c61010001518d61012001518c8b8760000160009054906101000a90046001600160a01b0316886002015489600501546040518963ffffffff1660e01b8152600401612d3c9897969594939291906154bc565b60206040518083038186803b158015612d5457600080fd5b505afa158015612d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8c9190614f06565b15612e2d5780546001600160a01b03808a166001600160a01b031992831617835560018301899055600283018890556003830180548883169084161790556004830180549187169190921617905542600582015560405189907f4055f76fe1f351fec66b9ba790ddbdc29eb45c038163a6b1327277441a8c65f190612e1a908b908b908b908b908b90615514565b60405180910390a2600092505050612e66565b60405162461bcd60e51b815260206004820152600e60248201526d53484f59553a204641494c55524560901b60448201526064016106a7565b979650505050505050565b60405161190160f01b60208201526022810182905260428101879052600090606201604051602081830303815290604052805190602001209050612eb5863b151590565b15612fc557604080516020810186905280820185905260f887901b6001600160f81b0319166060820152815160418183030181526061820192839052630b135d3f60e11b9092526001600160a01b03881691631626ba7e91612f1b91859160650161557e565b60206040518083038186803b158015612f3357600080fd5b505afa158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b9190614f8d565b6001600160e01b031916631626ba7e60e01b14612fc05760405162461bcd60e51b815260206004820152601360248201527214d213d6554e8815539055551213d492569151606a1b60448201526064016106a7565b6110fd565b856001600160a01b0316612fdb82878787613ea1565b6001600160a01b0316146110fd5760405162461bcd60e51b815260206004820152601360248201527214d213d6554e8815539055551213d492569151606a1b60448201526064016106a7565b816001600160a01b0316836001600160a01b0316141561307e5760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881393d517d0531313d5d15160721b60448201526064016106a7565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b601054600160a81b900460ff90811614156131535760105460ff908116908216111561314e5760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016106a7565b6131a7565b60105460ff600160a81b9091048116908216106131a75760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016106a7565b6010805460ff60a81b1916600160a81b60ff8416908102919091179091556040519081527fd9ac3bc8ad92267d0b101786ddb4d37746ed1e3ee77637846294edf17dd9eb8a90602001610b53565b6001600160a01b03811661324b5760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e540000000060448201526064016106a7565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f1ce5f25607cb1a4fa6c947b55700213a9ed6a1d7ef1cf1d02ab467efd02a993e90602001610b53565b6001600160a01b0384166132c75760405162461bcd60e51b81526004016106a79061567b565b336132d881600087611f7e88613cb8565b60008481526001602090815260408083206001600160a01b03891684529091528120805485929061330a908490615770565b909155505060408051858152602081018590526001600160a01b0380881692600092918516916000805160206159d8833981519152910160405180910390a4611f8781600087878787613dad565b6001600160a01b03831661337e5760405162461bcd60e51b81526004016106a79061567b565b805182511461339f5760405162461bcd60e51b81526004016106a7906156ab565b6040805160208101909152600090523360005b83518110156134a05760008482815181106133dd57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061340957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526001835260408082206001600160a01b038c16835290935291909120549091508181101561345a5760405162461bcd60e51b81526004016106a7906156e2565b61346482826157bb565b60009384526001602090815260408086206001600160a01b038c168752909152909320929092555081905061349881615876565b9150506133b2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516134f1929190615559565b60405180910390a450505050565b80516020808301516040808501516060860151608087015160a0880151935160009761296f977fb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b297919691959493920196875260208701959095526001600160a01b03938416604087015260608601929092526080850152811660a08401521660c082015260e00190565b600054610100900460ff16806135a3575060005460ff16155b6135bf5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156135e1576000805461ffff19166101011790555b6135e9614034565b80156112c5576000805461ff001916905550565b600054610100900460ff1680613616575060005460ff16155b6136325760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff16158015613654576000805461ffff19166101011790555b61365d82614093565b8015611538576000805461ff00191690555050565b600054610100900460ff168061368b575060005460ff16155b6136a75760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156136c9576000805461ffff19166101011790555b61365d826140f3565b6060816136fa57506040805180820190915260048152630307830360e41b6020820152610700565b8160005b811561371d578061370e81615876565b915050600882901c91506136fe565b61223c8482612244565b6000818152600e602052604090205460ff16156137865760405162461bcd60e51b815260206004820152601b60248201527f53484f59553a2043414e43454c4c45445f4f525f434c41494d4544000000000060448201526064016106a7565b81516001600160a01b03166137d45760405162461bcd60e51b815260206004820152601460248201527329a427acaa9d1024a72b20a624a22fa6a0a5a2a960611b60448201526064016106a7565b60408201516001600160a01b03166138235760405162461bcd60e51b815260206004820152601260248201527114d213d6554e881253959053125117d3919560721b60448201526064016106a7565b600082608001511161386f5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d05353d55395605a1b60448201526064016106a7565b60a08201516001600160a01b03166138c95760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f535452415445475900000000000000000060448201526064016106a7565b60c08201516001600160a01b03166139235760405162461bcd60e51b815260206004820152601760248201527f53484f59553a20494e56414c49445f43555252454e435900000000000000000060448201526064016106a7565b61393a60075461010090046001600160a01b031690565b60a0830151604051632666e89f60e21b81526001600160a01b03918216600482015291169063999ba27c9060240160206040518083038186803b15801561398057600080fd5b505afa158015613994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b89190614f06565b6115385760405162461bcd60e51b815260206004820152601f60248201527f53484f59553a2053545241544547595f4e4f545f57484954454c49535445440060448201526064016106a7565b6000613a12858530856141a8565b613a1e57506000613c6c565b6000613a3760075461010090046001600160a01b031690565b90506000839050600080836001600160a01b031663aec0b5436040518163ffffffff1660e01b8152600401604080518083038186803b158015613a7957600080fd5b505afa158015613a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab19190614d88565b909250905060006103e8613ac860ff84168961579c565b613ad29190615788565b9050613ae86001600160a01b038b16848361427a565b613af281856157bb565b9350505050600080836001600160a01b031663c2b11e186040518163ffffffff1660e01b8152600401604080518083038186803b158015613b3257600080fd5b505afa158015613b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6a9190614d88565b909250905060006103e8613b8160ff84168961579c565b613b8b9190615788565b9050613ba16001600160a01b038b16848361427a565b613bab81856157bb565b60405163152a902d60e11b8152600481018d9052602481018990529094506001600160a01b038d169350632a55205a92506044019050604080518083038186803b158015613bf857600080fd5b505afa925050508015613c28575060408051601f3d908101601f19168201909252613c2591810190614d07565b60015b613c3157613c51565b8015613c4e57613c4181846157bb565b9250613c4e8983836142d1565b50505b613c656001600160a01b038816868361427a565b6001925050505b9695505050505050565b613c8284848484613d11565b60408051838152602081018390526001600160a01b03808616929087169133916000805160206159d88339815191529101612513565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613d0057634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b83613d246004546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480613d5057506004546001600160a01b038281169116145b80613d655750601054600160b81b900460ff16155b613da15760405162461bcd60e51b815260206004820152600d60248201526c14d213d6554e881313d0d2d151609a1b60448201526064016106a7565b611f8785858585614360565b6001600160a01b0384163b15610df45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613df19089908990889088908890600401615482565b602060405180830381600087803b158015613e0b57600080fd5b505af1925050508015613e3b575060408051601f3d908101601f19168201909252613e3891810190614f8d565b60015b613e47576127206158e7565b6001600160e01b0319811663f23a6e6160e01b146110fd5760405162461bcd60e51b815260206004820152601760248201527629a427acaa9d1024a72b20a624a22fa922a1a2a4ab22a960491b60448201526064016106a7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613f135760405162461bcd60e51b815260206004820181905260248201527f53484f59553a20494e56414c49445f5349474e41545552455f535f56414c554560448201526064016106a7565b8360ff16601b1480613f2857508360ff16601c145b613f745760405162461bcd60e51b815260206004820181905260248201527f53484f59553a20494e56414c49445f5349474e41545552455f565f56414c554560448201526064016106a7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613fc8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661402b5760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f5349474e4154555245000000000000000060448201526064016106a7565b95945050505050565b600054610100900460ff168061404d575060005460ff16155b6140695760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561408b576000805461ffff19166101011790555b6135e96143f7565b600054610100900460ff16806140ac575060005460ff16155b6140c85760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff161580156140ea576000805461ffff19166101011790555b61365d8261446c565b600054610100900460ff168061410c575060005460ff16155b6141285760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561414a576000805461ffff19166101011790555b600480546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015611538576000805461ff00191690555050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839283929189169161420e9190615367565b6000604051808303816000865af19150503d806000811461424b576040519150601f19603f3d011682016040523d82523d6000602084013e614250565b606091505b5091509150818015612e66575080511580612e66575080806020019051810190612e669190614f06565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526142cc90849061447f565b505050565b6142e56001600160a01b038416838361427a565b813b156142cc57816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561432757600080fd5b505af1925050508015614357575060408051601f3d908101601f1916820190925261435491810190615225565b60015b610a92576142cc565b60008281526001602090815260408083206001600160a01b0388168452909152902054818110156143a35760405162461bcd60e51b81526004016106a7906156e2565b6143ad82826157bb565b60008481526001602090815260408083206001600160a01b038a811685529252808320939093558616815290812080548492906143eb908490615770565b90915550505050505050565b600054610100900460ff1680614410575060005460ff16155b61442c5760405162461bcd60e51b81526004016106a79061562d565b600054610100900460ff1615801561444e576000805461ffff19166101011790555b600b805460ff1916905580156112c5576000805461ff001916905550565b805161153890600390602084019061464c565b60006144d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145519092919063ffffffff16565b8051909150156142cc57808060200190518101906144f29190614f06565b6142cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a7565b606061223c848460008585843b6145aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a7565b600080866001600160a01b031685876040516145c69190615367565b60006040518083038185875af1925050503d8060008114614603576040519150601f19603f3d011682016040523d82523d6000602084013e614608565b606091505b5091509150612e6682828660608315614622575081611b1e565b8251156146325782518084602001fd5b8160405162461bcd60e51b81526004016106a791906155c6565b82805461465890615815565b90600052602060002090601f01602090048101928261467a57600085556146c0565b82601f1061469357805160ff19168380011785556146c0565b828001600101855582156146c0579182015b828111156146c05782518255916020019190600101906146a5565b506146cc929150614744565b5090565b8280546146dc90615815565b90600052602060002090601f0160209004810192826146fe57600085556146c0565b82601f106147175782800160ff198235161785556146c0565b828001600101855582156146c0579182015b828111156146c0578235825591602001919060010190614729565b5b808211156146cc5760008155600101614745565b80356107008161598f565b60008083601f840112614775578182fd5b5081356001600160401b0381111561478b578182fd5b6020830191508360208260051b8501011115610bb757600080fd5b600082601f8301126147b6578081fd5b813560206147c382615726565b6040516147d0828261584a565b8381528281019150858301600585901b870184018810156147ef578586fd5b855b8581101561480d578135845292840192908401906001016147f1565b5090979650505050505050565b600082601f83011261482a578081fd5b813561483581615749565b604051614842828261584a565b828152856020848701011115614856578384fd5b82602086016020830137918201602001929092529392505050565b60006101a0808385031215614884578182fd5b61488d81615719565b91505061489982614759565b81526148a760208301614759565b60208201526148b860408301614759565b604082015260608201356060820152608082013560808201526148dd60a08301614759565b60a08201526148ee60c08301614759565b60c08201526148ff60e08301614759565b60e08201526101008281013590820152610120808301356001600160401b0381111561492a57600080fd5b6149368582860161481a565b82840152505061014061494a81840161496c565b9082015261016082810135908201526101809182013591810191909152919050565b8035610700816159c8565b600060208284031215614988578081fd5b8135611b1e8161598f565b600080604083850312156149a5578081fd5b82356149b08161598f565b915060208301356149c08161598f565b809150509250929050565b600080600080600060a086880312156149e2578081fd5b85356149ed8161598f565b945060208601356149fd8161598f565b935060408601356001600160401b0380821115614a18578283fd5b614a2489838a016147a6565b94506060880135915080821115614a39578283fd5b614a4589838a016147a6565b93506080880135915080821115614a5a578283fd5b50614a678882890161481a565b9150509295509295909350565b600080600080600060a08688031215614a8b578283fd5b8535614a968161598f565b94506020860135614aa68161598f565b9350604086013592506060860135915060808601356001600160401b03811115614ace578182fd5b614a678882890161481a565b60008060008060008060c08789031215614af2578384fd5b8635614afd8161598f565b95506020870135614b0d8161598f565b9450604087013593506060870135614b24816159c8565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614b55578283fd5b8535614b608161598f565b945060208601356001600160401b0380821115614b7b578485fd5b614b8789838a016147a6565b95506040880135915080821115614b9c578485fd5b50614ba9888289016147a6565b9350506060860135614bba8161598f565b91506080860135614bca816159c8565b809150509295509295909350565b60008060008060808587031215614bed578182fd5b8435614bf88161598f565b935060208501356001600160401b0380821115614c13578384fd5b614c1f888389016147a6565b94506040870135915080821115614c34578384fd5b614c40888389016147a6565b93506060870135915080821115614c55578283fd5b50614c628782880161481a565b91505092959194509250565b60008060408385031215614c80578182fd5b8235614c8b8161598f565b915060208301356149c0816159a4565b600080600060608486031215614caf578081fd5b8335614cba8161598f565b9250602084013591506040840135614cd18161598f565b809150509250925092565b60008060408385031215614cee578182fd5b8235614cf98161598f565b946020939093013593505050565b60008060408385031215614d19578182fd5b8251614d248161598f565b6020939093015192949293505050565b60008060008060808587031215614d49578182fd5b8435614d548161598f565b9350602085013592506040850135915060608501356001600160401b03811115614d7c578182fd5b614c628782880161481a565b60008060408385031215614d9a578182fd5b8251614da58161598f565b60208401519092506149c0816159c8565b60008060408385031215614dc8578182fd5b82356001600160401b0380821115614dde578384fd5b818501915085601f830112614df1578384fd5b81356020614dfe82615726565b604051614e0b828261584a565b8381528281019150858301600585901b870184018b1015614e2a578889fd5b8896505b84871015614e55578035614e418161598f565b835260019690960195918301918301614e2e565b5096505086013592505080821115614e6b578283fd5b50614e78858286016147a6565b9150509250929050565b60008060008060408587031215614e97578182fd5b84356001600160401b0380821115614ead578384fd5b614eb988838901614764565b90965094506020870135915080821115614ed1578384fd5b50614ede87828801614764565b95989497509550505050565b600060208284031215614efb578081fd5b8135611b1e816159a4565b600060208284031215614f17578081fd5b8151611b1e816159a4565b600060208284031215614f33578081fd5b5035919050565b600080600060608486031215614f4e578081fd5b833592506020840135614f608161598f565b929592945050506040919091013590565b600060208284031215614f82578081fd5b8135611b1e816159b2565b600060208284031215614f9e578081fd5b8151611b1e816159b2565b60008060208385031215614fbb578182fd5b82356001600160401b0380821115614fd1578384fd5b818501915085601f830112614fe4578384fd5b813581811115614ff2578485fd5b866020828501011115615003578485fd5b60209290920196919550909350505050565b600060208284031215615026578081fd5b81356001600160401b0381111561503b578182fd5b61223c8482850161481a565b600060208284031215615058578081fd5b81516001600160401b0381111561506d578182fd5b8201601f8101841361507d578182fd5b805161508881615749565b604051615095828261584a565b8281528660208486010111156150a9578485fd5b613c6c8360208301602087016157d2565b6000602082840312156150cb578081fd5b81356001600160401b038111156150e0578182fd5b61223c84828501614871565b600080828403610140811215615100578283fd5b83356001600160401b03811115615115578384fd5b61512186828701614871565b93505061012080601f1983011215615137578283fd5b61514081615719565b91506020850135825261515560408601614759565b6020830152606085013560408301526080850135606083015261517a60a08601614759565b608083015261518b60c08601614759565b60a083015261519c60e0860161496c565b60c08301526101008581013560e0840152940135938101939093525092909150565b600080600080600060a086880312156151d5578283fd5b85356001600160401b038111156151ea578384fd5b6151f688828901614871565b955050602086013593506040860135925060608601356152158161598f565b91506080860135614bca8161598f565b600060208284031215615236578081fd5b5051919050565b6000806040838503121561524f578182fd5b8235915060208301356001600160401b0381111561526b578182fd5b614e788582860161481a565b60008060408385031215615289578182fd5b50508035926020909101359150565b600080600080608085870312156152ad578182fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156152da578081fd5b8135611b1e816159c8565b6000602082840312156152f6578081fd5b8151611b1e816159c8565b6000815180845260208085019450808401835b8381101561533057815187529582019590820190600101615314565b509495945050505050565b600081518084526153538160208601602086016157d2565b601f01601f19169290920160200192915050565b600082516153798184602087016157d2565b9190910192915050565b600083516153958184602088016157d2565b8351908301906153a98183602088016157d2565b64173539b7b760d91b9101908152600501949350505050565b600084516153d48184602089016157d2565b8451908301906153e88183602089016157d2565b602f60f81b910190815283516154058160018401602088016157d2565b64173539b7b760d91b6001929091019182015260060195945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061545090830186615301565b82810360608401526154628186615301565b90508281036080840152615476818561533b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612e669083018461533b565b6001600160a01b03898116825260208201899052610100604083018190526000916154e98483018b61533b565b9881166060850152608084019790975250509290931660a083015260c082015260e001529392505050565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b600060208252611b1e6020830184615301565b60006040825261556c6040830185615301565b828103602084015261402b8185615301565b60008382526040602083015261223c604083018461533b565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252611b1e602083018461533b565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b60208082526010908201526f14d213d6554e8814915153951490539560821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526016908201527553484f59553a20494e56414c49445f4144445245535360501b604082015260600190565b60208082526018908201527f53484f59553a204c454e475448535f4e4f545f455155414c0000000000000000604082015260600190565b6020808252601b908201527f53484f59553a20494e53554646494349454e545f42414c414e43450000000000604082015260600190565b604051610700828261584a565b60006001600160401b0382111561573f5761573f6158d1565b5060051b60200190565b60006001600160401b03821115615762576157626158d1565b50601f01601f191660200190565b60008219821115615783576157836158a5565b500190565b600082615797576157976158bb565b500490565b60008160001904831182151516156157b6576157b66158a5565b500290565b6000828210156157cd576157cd6158a5565b500390565b60005b838110156157ed5781810151838201526020016157d5565b83811115610a925750506000910152565b60008161580d5761580d6158a5565b506000190190565b600181811c9082168061582957607f821691505b602082108114156109df57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561586f5761586f6158d1565b6040525050565b600060001982141561588a5761588a6158a5565b5060010190565b6000826158a0576158a06158bb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610e0957600481823e5160e01c90565b600060443d101561590e57610e09565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561593f575050505050610e09565b828501915081518181111561595957505050505050610e09565b843d870101602082850101111561597557505050505050610e09565b6159846020828601018761584a565b509094505050505090565b6001600160a01b03811681146112c557600080fd5b80151581146112c557600080fd5b6001600160e01b0319811681146112c557600080fd5b60ff811681146112c557600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a264697066735822122044ae92560ebf3c6cf8e286df76d278e1d38f8114a62d4b838bb72c9be225195a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9729,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9735,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9737,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 12279,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8219,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 8221,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8223,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "MAX_ROYALTY_FEE",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 8225,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_factory",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8227,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 8231,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_uris",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8236,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12459,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 7093,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_bidHashes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bytes32)))"
      },
      {
        "astId": 7099,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "bestBid",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(BestBid)7085_storage)"
      },
      {
        "astId": 7104,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "isCancelledOrClaimed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7109,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "amountFilled",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4400,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_MAX_ROYALTY_FEE",
        "offset": 0,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 4402,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_royaltyFeeRecipient",
        "offset": 1,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4404,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_royaltyFee",
        "offset": 21,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 12211,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "_wasLocked",
        "offset": 22,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 12214,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "locked",
        "offset": 23,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 4719,
        "contract": "contracts/NFT1155V2.sol:NFT1155V2",
        "label": "name",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(address => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_bytes32))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_struct(BestBid)7085_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BaseExchange.BestBid)",
        "numberOfBytes": "32",
        "value": "t_struct(BestBid)7085_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BestBid)7085_storage": {
        "encoding": "inplace",
        "label": "struct BaseExchange.BestBid",
        "members": [
          {
            "astId": 7074,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7076,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7078,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7080,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "recipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7082,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "referrer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7084,
            "contract": "contracts/NFT1155V2.sol:NFT1155V2",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}