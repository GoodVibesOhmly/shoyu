{
  "address": "0x1179Edc4C0e4B9A9b2F1cf220cFa1daeD300d78b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "protocolFee",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "operationalFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "operationalFee",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_baseURI721",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI1155",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "DeployNFT1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "DeployNFT721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "DeployNFT721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        }
      ],
      "name": "DeploySocialToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tagNonce",
          "type": "uint256"
        }
      ],
      "name": "Tag",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "UpgradeERC1155Exchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "UpgradeERC721Exchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "UpgradeNFT1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "UpgradeNFT721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "UpgradeSocialToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_OPERATIONAL_FEE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ROYALTY_FEE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI1155",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI721",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "deployNFT1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "deployNFT721",
      "outputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "royaltyFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "royaltyFee",
          "type": "uint8"
        }
      ],
      "name": "deployNFT721",
      "outputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        }
      ],
      "name": "deploySocialToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc1155Exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721Exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDeployerWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "query",
          "type": "address"
        }
      ],
      "name": "isNFT1155",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "query",
          "type": "address"
        }
      ],
      "name": "isNFT721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "query",
          "type": "address"
        }
      ],
      "name": "isSocialToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStrategyWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        }
      ],
      "name": "mintWithTags1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        }
      ],
      "name": "mintWithTags721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "permil",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "permil",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "setDeployerWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "operationalFee",
          "type": "uint8"
        }
      ],
      "name": "setOperationalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operationalFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setOperationalFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "setStrategyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        }
      ],
      "name": "setTags1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        }
      ],
      "name": "setTags721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tagNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "upgradeERC1155Exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "upgradeERC721Exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "upgradeNFT1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "upgradeNFT721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "upgradeSocialToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x008a8ab4636ac44ceca5a6099e56b69c6a7c49b5b95ccedcc824315f2faf2e08",
  "receipt": {
    "to": null,
    "from": "0x80417137E490A5091dCAB34E85C457BB97c93161",
    "contractAddress": "0x1179Edc4C0e4B9A9b2F1cf220cFa1daeD300d78b",
    "transactionIndex": 24,
    "gasUsed": "2455800",
    "logsBloom": "0x
    "blockHash": "0x9e06a1f3c42f4c36cfc649edf3f119dee1766f93e7e0f59d73b8f0020d9989c9",
    "transactionHash": "0x008a8ab4636ac44ceca5a6099e56b69c6a7c49b5b95ccedcc824315f2faf2e08",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 10842095,
        "transactionHash": "0x008a8ab4636ac44ceca5a6099e56b69c6a7c49b5b95ccedcc824315f2faf2e08",
        "address": "0x1179Edc4C0e4B9A9b2F1cf220cFa1daeD300d78b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000080417137e490a5091dcab34e85c457bb97c93161"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x9e06a1f3c42f4c36cfc649edf3f119dee1766f93e7e0f59d73b8f0020d9989c9"
      }
    ],
    "blockNumber": 10842095,
    "cumulativeGasUsed": "4222267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93c7020393df59A951217d92d982d67A34a1557D",
    25,
    "0x93c7020393df59A951217d92d982d67A34a1557D",
    0,
    "https://raw.githubusercontent.com/shoyunft/metadata/master/ropsten/",
    "https://raw.githubusercontent.com/shoyunft/metadata/master/ropsten/"
  ],
  "solcInputHash": "a3dd5c0b14614ebea455929879753e99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operationalFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"operationalFee\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_baseURI721\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI1155\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"DeployNFT1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"DeployNFT721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"DeployNFT721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"}],\"name\":\"DeploySocialToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tagNonce\",\"type\":\"uint256\"}],\"name\":\"Tag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"UpgradeERC1155Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"UpgradeERC721Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"UpgradeNFT1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"UpgradeNFT721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"UpgradeSocialToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OPERATIONAL_FEE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROYALTY_FEE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI1155\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI721\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"deployNFT1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"deployNFT721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"royaltyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"royaltyFee\",\"type\":\"uint8\"}],\"name\":\"deployNFT721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"}],\"name\":\"deploySocialToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155Exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDeployerWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isNFT1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isNFT721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isSocialToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStrategyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"mintWithTags1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"mintWithTags721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permil\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permil\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setDeployerWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"operationalFee\",\"type\":\"uint8\"}],\"name\":\"setOperationalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operationalFeeRecipient\",\"type\":\"address\"}],\"name\":\"setOperationalFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"setProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setStrategyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"setTags1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"setTags721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tagNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"upgradeERC1155Exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"upgradeERC721Exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"upgradeNFT1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"upgradeNFT721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"upgradeSocialToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ERC1155ExchangeV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./base/BaseExchange.sol\\\";\\n\\ncontract ERC1155ExchangeV0 is BaseExchange {\\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\\n    address internal immutable _factory;\\n\\n    constructor(address factory_) {\\n        __BaseNFTExchange_init();\\n        _factory = factory_;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(\\\"ERC1155Exchange\\\"),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function factory() public view override returns (address) {\\n        return _factory;\\n    }\\n\\n    function canTrade(address nft) public view override returns (bool) {\\n        return !ITokenFactory(_factory).isNFT1155(nft);\\n    }\\n\\n    function _transfer(\\n        address nft,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal override {\\n        IERC1155(nft).safeTransferFrom(from, to, tokenId, amount, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf88b42f330d7080caae95d5f0721be9502541e1cfe0af752a8f5af1f0177cfa4\",\"license\":\"MIT\"},\"contracts/ERC721ExchangeV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./base/BaseExchange.sol\\\";\\n\\ncontract ERC721ExchangeV0 is BaseExchange {\\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\\n    address internal immutable _factory;\\n\\n    constructor(address factory_) {\\n        __BaseNFTExchange_init();\\n        _factory = factory_;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(\\\"ERC721Exchange\\\"),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function factory() public view override returns (address) {\\n        return _factory;\\n    }\\n\\n    function canTrade(address nft) public view override returns (bool) {\\n        return !ITokenFactory(_factory).isNFT721(nft);\\n    }\\n\\n    function _transfer(\\n        address nft,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) internal override {\\n        IERC721(nft).safeTransferFrom(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x77e5e17ee02e718edf4beba120f6d91828a3f0143ca5b7be6a3f1c9ee4903cf1\",\"license\":\"MIT\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/ITokenFactory.sol\\\";\\nimport \\\"./interfaces/IBaseNFT721.sol\\\";\\nimport \\\"./interfaces/IBaseNFT1155.sol\\\";\\nimport \\\"./base/ProxyFactory.sol\\\";\\nimport \\\"./ERC721ExchangeV0.sol\\\";\\nimport \\\"./ERC1155ExchangeV0.sol\\\";\\n\\ncontract TokenFactory is ProxyFactory, Ownable, ITokenFactory {\\n    uint8 public constant override MAX_ROYALTY_FEE = 250; // 25%\\n    uint8 public constant override MAX_OPERATIONAL_FEE = 50; // 5%\\n\\n    address[] internal _targets721;\\n    address[] internal _targets1155;\\n    address[] internal _targetsSocialToken;\\n\\n    address internal _protocolFeeRecipient;\\n    uint8 internal _protocolFee; // out of 1000\\n    address internal _operationalFeeRecipient;\\n    uint8 internal _operationalFee; // out of 1000\\n\\n    string public override baseURI721;\\n    string public override baseURI1155;\\n\\n    address public override erc721Exchange;\\n    address public override erc1155Exchange;\\n    // any account can deploy proxies if isDeployerWhitelisted[0x0000000000000000000000000000000000000000] == true\\n    mapping(address => bool) public override isDeployerWhitelisted;\\n    mapping(address => bool) public override isStrategyWhitelisted;\\n\\n    mapping(address => mapping(uint256 => uint256)) public tagNonces;\\n\\n    modifier onlyDeployer {\\n        require(isDeployerWhitelisted[address(0)] || isDeployerWhitelisted[msg.sender], \\\"SHOYU: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address protocolFeeRecipient,\\n        uint8 protocolFee,\\n        address operationalFeeRecipient,\\n        uint8 operationalFee,\\n        string memory _baseURI721,\\n        string memory _baseURI1155\\n    ) {\\n        _protocolFeeRecipient = protocolFeeRecipient;\\n        _protocolFee = protocolFee;\\n        _operationalFeeRecipient = operationalFeeRecipient;\\n        _operationalFee = operationalFee;\\n\\n        baseURI721 = _baseURI721;\\n        baseURI1155 = _baseURI1155;\\n    }\\n\\n    function protocolFeeInfo() external view override returns (address recipient, uint8 permil) {\\n        return (_protocolFeeRecipient, _protocolFee);\\n    }\\n\\n    function operationalFeeInfo() external view override returns (address recipient, uint8 permil) {\\n        return (_operationalFeeRecipient, _operationalFee);\\n    }\\n\\n    function setBaseURI721(string memory uri) external override onlyOwner {\\n        baseURI721 = uri;\\n    }\\n\\n    function setBaseURI1155(string memory uri) external override onlyOwner {\\n        baseURI1155 = uri;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external override onlyOwner {\\n        require(protocolFeeRecipient != address(0), \\\"SHOYU: INVALID_FEE_RECIPIENT\\\");\\n\\n        _protocolFeeRecipient = protocolFeeRecipient;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function setOperationalFeeRecipient(address operationalFeeRecipient) external override onlyOwner {\\n        require(operationalFeeRecipient != address(0), \\\"SHOYU: INVALID_RECIPIENT\\\");\\n\\n        _operationalFeeRecipient = operationalFeeRecipient;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function setOperationalFee(uint8 operationalFee) external override onlyOwner {\\n        require(operationalFee <= MAX_OPERATIONAL_FEE, \\\"SHOYU: INVALID_FEE\\\");\\n\\n        _operationalFee = operationalFee;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function setDeployerWhitelisted(address deployer, bool whitelisted) external override onlyOwner {\\n        require(deployer != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n\\n        isDeployerWhitelisted[deployer] = whitelisted;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function setStrategyWhitelisted(address strategy, bool whitelisted) external override onlyOwner {\\n        require(strategy != address(0), \\\"SHOYU: INVALID_ADDRESS\\\");\\n\\n        isStrategyWhitelisted[strategy] = whitelisted;\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function upgradeNFT721(address newTarget) external override onlyOwner {\\n        _targets721.push(newTarget);\\n\\n        emit UpgradeNFT721(newTarget);\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function upgradeNFT1155(address newTarget) external override onlyOwner {\\n        _targets1155.push(newTarget);\\n\\n        emit UpgradeNFT1155(newTarget);\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function upgradeSocialToken(address newTarget) external override onlyOwner {\\n        _targetsSocialToken.push(newTarget);\\n\\n        emit UpgradeSocialToken(newTarget);\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function upgradeERC721Exchange(address exchange) external override onlyOwner {\\n        erc721Exchange = exchange;\\n\\n        emit UpgradeERC721Exchange(exchange);\\n    }\\n\\n    // This function should be called by a multi-sig `owner`, not an EOA\\n    function upgradeERC1155Exchange(address exchange) external override onlyOwner {\\n        erc1155Exchange = exchange;\\n\\n        emit UpgradeERC1155Exchange(exchange);\\n    }\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256[] memory tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override onlyDeployer returns (address nft) {\\n        require(bytes(name).length > 0, \\\"SHOYU: INVALID_NAME\\\");\\n        require(bytes(symbol).length > 0, \\\"SHOYU: INVALID_SYMBOL\\\");\\n\\n        nft = _createProxy(\\n            _targets721[_targets721.length - 1],\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,string,string,uint256[],address,uint8)\\\",\\n                owner,\\n                name,\\n                symbol,\\n                tokenIds,\\n                royaltyFeeRecipient,\\n                royaltyFee\\n            )\\n        );\\n\\n        emit DeployNFT721(nft, owner, name, symbol, tokenIds, royaltyFeeRecipient, royaltyFee);\\n    }\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override onlyDeployer returns (address nft) {\\n        require(bytes(name).length > 0, \\\"SHOYU: INVALID_NAME\\\");\\n        require(bytes(symbol).length > 0, \\\"SHOYU: INVALID_SYMBOL\\\");\\n\\n        nft = _createProxy(\\n            _targets721[_targets721.length - 1],\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,string,string,uint256,address,uint8)\\\",\\n                owner,\\n                name,\\n                symbol,\\n                toTokenId,\\n                royaltyFeeRecipient,\\n                royaltyFee\\n            )\\n        );\\n\\n        emit DeployNFT721(nft, owner, name, symbol, toTokenId, royaltyFeeRecipient, royaltyFee);\\n    }\\n\\n    function isNFT721(address query) external view override returns (bool result) {\\n        for (uint256 i = _targets721.length - 1; i >= 0; i--) {\\n            if (_isProxy(_targets721[i], query)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function deployNFT1155(\\n        address owner,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external override onlyDeployer returns (address nft) {\\n        nft = _createProxy(\\n            _targets1155[_targets1155.length - 1],\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,uint256[],uint256[],address,uint8)\\\",\\n                owner,\\n                tokenIds,\\n                amounts,\\n                royaltyFeeRecipient,\\n                royaltyFee\\n            )\\n        );\\n\\n        emit DeployNFT1155(nft, owner, tokenIds, amounts, royaltyFeeRecipient, royaltyFee);\\n    }\\n\\n    function isNFT1155(address query) external view override returns (bool result) {\\n        for (uint256 i = _targets1155.length - 1; i >= 0; i--) {\\n            if (_isProxy(_targets1155[i], query)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function deploySocialToken(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address dividendToken\\n    ) external override onlyDeployer returns (address proxy) {\\n        bytes memory initData =\\n            abi.encodeWithSignature(\\\"initialize(address,string,string,address)\\\", owner, name, symbol, dividendToken);\\n        proxy = _createProxy(_targetsSocialToken[_targetsSocialToken.length - 1], initData);\\n\\n        emit DeploySocialToken(proxy, owner, name, symbol, dividendToken);\\n    }\\n\\n    function isSocialToken(address query) external view override returns (bool result) {\\n        for (uint256 i = _targetsSocialToken.length - 1; i >= 0; i--) {\\n            if (_isProxy(_targetsSocialToken[i], query)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function mintWithTags721(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data,\\n        string[] memory tags\\n    ) external override {\\n        _setTags(nft, tokenId, tags);\\n        IBaseNFT721(nft).mint(to, tokenId, data);\\n    }\\n\\n    function mintWithTags1155(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data,\\n        string[] memory tags\\n    ) external override {\\n        _setTags(nft, tokenId, tags);\\n        IBaseNFT1155(nft).mint(to, tokenId, amount, data);\\n    }\\n\\n    function setTags721(\\n        address nft,\\n        uint256 tokenId,\\n        string[] memory tags\\n    ) external override {\\n        require(IBaseNFT721(nft).ownerOf(tokenId) == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n        _setTags(nft, tokenId, tags);\\n    }\\n\\n    function setTags1155(\\n        address nft,\\n        uint256 tokenId,\\n        string[] memory tags\\n    ) external override {\\n        require(IBaseNFT1155(nft).balanceOf(msg.sender, tokenId) > 0, \\\"SHOYU: FORBIDDEN\\\");\\n        _setTags(nft, tokenId, tags);\\n    }\\n\\n    function _setTags(\\n        address nft,\\n        uint256 tokenId,\\n        string[] memory tags\\n    ) internal {\\n        uint256 nonce = tagNonces[nft][tokenId]++;\\n\\n        for (uint256 i; i < tags.length; i++) {\\n            emit Tag(nft, tokenId, tags[i], nonce);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe089cafd301161ae652645374ff139c46fc17b0084d90b129c6acdf77fd3bb13\",\"license\":\"MIT\"},\"contracts/base/BaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../interfaces/IBaseExchange.sol\\\";\\nimport \\\"../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IDividendPayingERC20.sol\\\";\\nimport \\\"../libraries/Orders.sol\\\";\\nimport \\\"./ReentrancyGuardInitializable.sol\\\";\\n\\nabstract contract BaseExchange is ReentrancyGuardInitializable, IBaseExchange {\\n    using SafeERC20 for IERC20;\\n    using Orders for Orders.Ask;\\n    using Orders for Orders.Bid;\\n\\n    struct BestBid {\\n        address bidder;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint256 blockNumber;\\n    }\\n\\n    mapping(bytes32 => BestBid) public override bestBid;\\n    mapping(bytes32 => bool) public override isCancelled;\\n    mapping(bytes32 => uint256) public override amountFilled;\\n\\n    function __BaseNFTExchange_init() internal initializer {\\n        __ReentrancyGuard_init();\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32);\\n\\n    function factory() public view virtual override returns (address);\\n\\n    function royaltyFeeInfo() public view virtual override returns (address, uint8) {\\n        return (address(0), uint8(0));\\n    }\\n\\n    function canTrade(address token) public view virtual override returns (bool) {\\n        return token == address(this);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function cancel(Orders.Ask memory order) external override {\\n        require(order.signer == msg.sender, \\\"SHOYU: FORBIDDEN\\\");\\n\\n        bytes32 hash = order.hash();\\n        require(bestBid[hash].bidder == address(0), \\\"SHOYU: BID_EXISTS\\\");\\n\\n        isCancelled[hash] = true;\\n\\n        emit Cancel(hash);\\n    }\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder)\\n        external\\n        override\\n        nonReentrant\\n        returns (bool executed)\\n    {\\n        bytes32 askHash = askOrder.hash();\\n        require(askHash == bidOrder.askHash, \\\"SHOYU: UNMATCHED_HASH\\\");\\n        require(bidOrder.signer != address(0), \\\"SHOYU: INVALID_SIGNER\\\");\\n\\n        _verify(bidOrder.hash(), bidOrder.signer, bidOrder.v, bidOrder.r, bidOrder.s);\\n\\n        return\\n            _bid(\\n                askOrder,\\n                askHash,\\n                bidOrder.signer,\\n                bidOrder.amount,\\n                bidOrder.price,\\n                bidOrder.recipient,\\n                bidOrder.referrer\\n            );\\n    }\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external override nonReentrant returns (bool executed) {\\n        return _bid(askOrder, askOrder.hash(), msg.sender, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n    }\\n\\n    function _bid(\\n        Orders.Ask memory askOrder,\\n        bytes32 askHash,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) internal returns (bool executed) {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n        require(bidAmount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        uint256 _amountFilled = amountFilled[askHash];\\n        require(_amountFilled + bidAmount <= askOrder.amount, \\\"SHOYU: SOLD_OUT\\\");\\n\\n        _validate(askOrder, askHash);\\n        _verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s);\\n\\n        if (IStrategy(askOrder.strategy).canExecute(askOrder.deadline, askOrder.params, bidder, bidPrice)) {\\n            amountFilled[askHash] = _amountFilled + bidAmount;\\n\\n            address recipient = askOrder.recipient;\\n            if (recipient == address(0)) recipient = askOrder.signer;\\n            require(\\n                _transferFeesAndFunds(askOrder.currency, bidder, recipient, bidPrice * bidAmount),\\n                \\\"SHOYU: FAILED_TO_TRANSFER_FUNDS\\\"\\n            );\\n\\n            if (bidRecipient == address(0)) bidRecipient = bidder;\\n            _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, bidAmount);\\n\\n            emit Execute(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n            return true;\\n        } else {\\n            BestBid storage best = bestBid[askHash];\\n            if (\\n                IStrategy(askOrder.strategy).canBid(\\n                    askOrder.deadline,\\n                    askOrder.params,\\n                    bidder,\\n                    bidPrice,\\n                    best.price,\\n                    best.blockNumber\\n                )\\n            ) {\\n                best.bidder = bidder;\\n                best.amount = bidAmount;\\n                best.price = bidPrice;\\n                best.recipient = bidRecipient;\\n                best.referrer = bidReferrer;\\n                best.blockNumber = block.number;\\n\\n                emit Bid(askHash, bidder, bidAmount, bidPrice, bidRecipient, bidReferrer);\\n                return false;\\n            }\\n        }\\n        revert(\\\"SHOYU: FAILURE\\\");\\n    }\\n\\n    function claim(Orders.Ask memory askOrder) external override nonReentrant {\\n        require(canTrade(askOrder.token), \\\"SHOYU: INVALID_EXCHANGE\\\");\\n\\n        bytes32 askHash = askOrder.hash();\\n        _validate(askOrder, askHash);\\n        _verify(askHash, askOrder.signer, askOrder.v, askOrder.r, askOrder.s);\\n\\n        BestBid memory best = bestBid[askHash];\\n        require(\\n            IStrategy(askOrder.strategy).canExecute(askOrder.deadline, askOrder.params, best.bidder, best.price),\\n            \\\"SHOYU: FAILURE\\\"\\n        );\\n\\n        address recipient = askOrder.recipient;\\n        if (recipient == address(0)) recipient = askOrder.signer;\\n\\n        if (_transferFeesAndFunds(askOrder.currency, best.bidder, recipient, best.price * best.amount)) {\\n            amountFilled[askHash] = amountFilled[askHash] + best.amount;\\n\\n            address bidRecipient = best.recipient;\\n            if (bidRecipient == address(0)) bidRecipient = best.bidder;\\n            _transfer(askOrder.token, askOrder.signer, bidRecipient, askOrder.tokenId, best.amount);\\n\\n            delete bestBid[askHash];\\n\\n            emit Execute(askHash, best.bidder, best.amount, best.price, bidRecipient, best.referrer);\\n        } else {\\n            isCancelled[askHash] = true;\\n\\n            emit Cancel(askHash);\\n        }\\n    }\\n\\n    function _validate(Orders.Ask memory askOrder, bytes32 askHash) internal view {\\n        require(!isCancelled[askHash], \\\"SHOYU: CANCELLED\\\");\\n\\n        require(askOrder.signer != address(0), \\\"SHOYU: INVALID_MAKER\\\");\\n        require(askOrder.token != address(0), \\\"SHOYU: INVALID_NFT\\\");\\n        require(askOrder.amount > 0, \\\"SHOYU: INVALID_AMOUNT\\\");\\n        require(askOrder.strategy != address(0), \\\"SHOYU: INVALID_STRATEGY\\\");\\n        require(askOrder.currency != address(0), \\\"SHOYU: INVALID_CURRENCY\\\");\\n        require(ITokenFactory(factory()).isStrategyWhitelisted(askOrder.strategy), \\\"SHOYU: STRATEGY_NOT_WHITELISTED\\\");\\n    }\\n\\n    function _verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hash));\\n        if (Address.isContract(signer)) {\\n            require(\\n                IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n                \\\"SHOYU: UNAUTHORIZED\\\"\\n            );\\n        } else {\\n            require(ecrecover(digest, v, r, s) == signer, \\\"SHOYU: UNAUTHORIZED\\\");\\n        }\\n    }\\n\\n    function _transferFeesAndFunds(\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (!_safeTransferFrom(currency, from, address(this), amount)) {\\n            return false;\\n        }\\n\\n        address _factory = factory();\\n        uint256 remainder = amount;\\n        {\\n            (address protocolFeeRecipient, uint8 protocolFeePermil) = ITokenFactory(_factory).protocolFeeInfo();\\n            uint256 protocolFeeAmount = (amount * protocolFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n            remainder -= protocolFeeAmount;\\n        }\\n\\n        {\\n            (address operationalFeeRecipient, uint8 operationalFeePermil) =\\n                ITokenFactory(_factory).operationalFeeInfo();\\n            uint256 operationalFeeAmount = (amount * operationalFeePermil) / 1000;\\n            IERC20(currency).safeTransfer(operationalFeeRecipient, operationalFeeAmount);\\n            remainder -= operationalFeeAmount;\\n        }\\n\\n        (address royaltyFeeRecipient, uint8 royaltyFeePermil) = royaltyFeeInfo();\\n        if (royaltyFeePermil != type(uint8).max) {\\n            uint256 royaltyFeeAmount = (remainder * royaltyFeePermil) / 1000;\\n            if (royaltyFeeAmount > 0) {\\n                remainder -= royaltyFeeAmount;\\n                _transferRoyaltyFee(currency, royaltyFeeRecipient, royaltyFeeAmount);\\n            }\\n        }\\n\\n        IERC20(currency).safeTransfer(to, remainder);\\n        return true;\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private returns (bool) {\\n        (bool success, bytes memory returndata) =\\n            token.call(abi.encodeWithSelector(IERC20(token).transferFrom.selector, from, to, value));\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool)));\\n    }\\n\\n    function _transferRoyaltyFee(\\n        address currency,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        IERC20(currency).safeTransfer(to, amount);\\n        if (Address.isContract(to)) {\\n            try IDividendPayingERC20(to).sync() returns (uint256) {} catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25eaf8e9d1e8089768b88b8cda93524206fdc53dcd55adaa47d11b90e510aab1\",\"license\":\"MIT\"},\"contracts/base/ProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\n// Reference: https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\\ncontract ProxyFactory {\\n    function _createProxy(address target, bytes memory initData) internal returns (address proxy) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            proxy := create(0, clone, 0x37)\\n        }\\n\\n        if (initData.length > 0) {\\n            (bool success, ) = proxy.call(initData);\\n            require(success, \\\"SHOYU: CALL_FAILURE\\\");\\n        }\\n    }\\n\\n    function _isProxy(address target, address query) internal view returns (bool result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(eq(mload(clone), mload(other)), eq(mload(add(clone, 0xd)), mload(add(other, 0xd))))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x251025aae93187da44cefe45de37008de41ccc8bbb4d5f17c3e52dd765df3013\",\"license\":\"MIT\"},\"contracts/base/ReentrancyGuardInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardInitializable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"SHOYU: REENTRANT\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x5c8f43c10b1b6b5554afd494e1967d87b1c6c90ff4a2496626804d61d926e4e4\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IBaseExchange {\\n    event Cancel(bytes32 indexed hash);\\n    event Execute(\\n        bytes32 indexed hash,\\n        address bidder,\\n        uint256 amount,\\n        uint256 price,\\n        address recipient,\\n        address referrer\\n    );\\n    event Bid(bytes32 indexed hash, address bidder, uint256 amount, uint256 price, address recipient, address referrer);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function royaltyFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function canTrade(address token) external view returns (bool);\\n\\n    function bestBid(bytes32 hash)\\n        external\\n        view\\n        returns (\\n            address bidder,\\n            uint256 amount,\\n            uint256 price,\\n            address recipient,\\n            address referrer,\\n            uint256 blockNumber\\n        );\\n\\n    function isCancelled(bytes32 hash) external view returns (bool);\\n\\n    function amountFilled(bytes32 hash) external view returns (uint256);\\n\\n    function cancel(Orders.Ask memory order) external;\\n\\n    function bid(Orders.Ask memory askOrder, Orders.Bid memory bidOrder) external returns (bool executed);\\n\\n    function bid(\\n        Orders.Ask memory askOrder,\\n        uint256 bidAmount,\\n        uint256 bidPrice,\\n        address bidRecipient,\\n        address bidReferrer\\n    ) external returns (bool executed);\\n\\n    function claim(Orders.Ask memory order) external;\\n}\\n\",\"keccak256\":\"0x10a058fd0f01c29df2bfbce6c4fba881aa9cdd9d886dc28ac1a91e86a75c9aa9\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseNFT1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IBaseNFT1155 is IERC1155, IERC1155MetadataURI, IOwnable {\\n    event Burn(uint256 indexed label, bytes32 data);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function nonces(address account) external view returns (uint256);\\n\\n    function initialize(address _owner) external;\\n\\n    function setURI(uint256 id, string memory uri) external;\\n\\n    function setBaseURI(string memory baseURI) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 label,\\n        bytes32 data\\n    ) external;\\n\\n    function burnBatch(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1b5675e9dfb674444bbb75392276d60fe3acd1563c9263ff6ba44ce57e578b67\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseNFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IBaseNFT721 is IERC721, IERC721Metadata, IOwnable {\\n    event Burn(uint256 indexed label, bytes32 data);\\n\\n    event ParkTokenIds(uint256 toTokenId);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function PERMIT_ALL_TYPEHASH() external view returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function factory() external view returns (address);\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n\\n    function noncesForAll(address account) external view returns (uint256);\\n\\n    function parked(uint256 tokenId) external view returns (bool);\\n\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address _owner\\n    ) external;\\n\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function setBaseURI(string memory uri) external;\\n\\n    function parkTokenIds(uint256 toTokenId) external;\\n\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata tokenIds,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 label,\\n        bytes32 data\\n    ) external;\\n\\n    function burnBatch(uint256[] calldata tokenIds) external;\\n\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5c99f2c4db8d927a7d1510cce19703a4b7a89647f4c8603ce104685336450168\",\"license\":\"MIT\"},\"contracts/interfaces/IDividendPayingERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDividendPayingERC20 is IERC20, IERC20Metadata {\\n    /// @dev This event MUST emit when erc20/ether dividend is synced.\\n    /// @param increased The amount of increased erc20/ether in wei.\\n    event Sync(uint256 increased);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws erc20/ether from this contract.\\n    /// @param amount The amount of withdrawn erc20/ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 amount);\\n\\n    function MAGNITUDE() external view returns (uint256);\\n\\n    function dividendToken() external view returns (address);\\n\\n    function totalDividend() external view returns (uint256);\\n\\n    function sync() external payable returns (uint256 increased);\\n\\n    function withdrawDividend() external;\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function dividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` can withdraw.\\n    function withdrawableDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has withdrawn.\\n    function withdrawnDividendOf(address account) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(account) = withdrawableDividendOf(account) + withdrawnDividendOf(account)\\n    /// = (magnifiedDividendPerShare * balanceOf(account) + magnifiedDividendCorrections[account]) / magnitude\\n    /// @param account The address of a token holder.\\n    /// @return The amount of dividend in wei that `account` has earned in total.\\n    function accumulativeDividendOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66581b3336f4d4a90beb3291661c34c21803fb5522b54a4dfcc59bafa68d4617\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Interface for verifying contract-based account signatures\\n/// @notice Interface that verifies provided signature for the data\\n/// @dev Interface defined by EIP-1271\\ninterface IERC1271 {\\n    /// @notice Returns whether the provided signature is valid for the provided data\\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n    /// MUST allow external calls.\\n    /// @param hash Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x7115b65c073af6cadf4dad8baa66422be19ad0741d41566cc3db888def037f80\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOwnable {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x59ab7135720d591a800eade4077b4a6a1f6c807cd982edc40132f9de39755ce2\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/Orders.sol\\\";\\n\\ninterface IStrategy {\\n    function canExecute(\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice\\n    ) external view returns (bool);\\n\\n    function canBid(\\n        uint256 deadline,\\n        bytes memory params,\\n        address bidder,\\n        uint256 bidPrice,\\n        uint256 bestBidPrice,\\n        uint256 bestBidBlock\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0c379707f5d112df6ac23a176e2d77b127b756c0a765f2eb3f10f6ab7c30212f\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ITokenFactory {\\n    event UpgradeNFT721(address newTarget);\\n    event UpgradeNFT1155(address newTarget);\\n    event UpgradeSocialToken(address newTarget);\\n    event UpgradeERC721Exchange(address exchange);\\n    event UpgradeERC1155Exchange(address exchange);\\n    event DeployNFT721(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256[] tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT721(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeployNFT1155(\\n        address indexed proxy,\\n        address indexed owner,\\n        uint256[] tokenIds,\\n        uint256[] amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    );\\n    event DeploySocialToken(\\n        address indexed proxy,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        address indexed dividendToken\\n    );\\n    event Tag(address indexed nft, uint256 indexed tokenId, string indexed tag, uint256 tagNonce);\\n\\n    function MAX_ROYALTY_FEE() external view returns (uint8);\\n\\n    function MAX_OPERATIONAL_FEE() external view returns (uint8);\\n\\n    function baseURI721() external view returns (string memory);\\n\\n    function baseURI1155() external view returns (string memory);\\n\\n    function erc721Exchange() external view returns (address);\\n\\n    function erc1155Exchange() external view returns (address);\\n\\n    function protocolFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function operationalFeeInfo() external view returns (address recipient, uint8 permil);\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function isDeployerWhitelisted(address strategy) external view returns (bool);\\n\\n    function setBaseURI721(string memory uri) external;\\n\\n    function setBaseURI1155(string memory uri) external;\\n\\n    function setProtocolFeeRecipient(address protocolFeeRecipient) external;\\n\\n    function setOperationalFeeRecipient(address operationalFeeRecipient) external;\\n\\n    function setOperationalFee(uint8 operationalFee) external;\\n\\n    function setDeployerWhitelisted(address deployer, bool whitelisted) external;\\n\\n    function setStrategyWhitelisted(address strategy, bool whitelisted) external;\\n\\n    function upgradeNFT721(address newTarget) external;\\n\\n    function upgradeNFT1155(address newTarget) external;\\n\\n    function upgradeSocialToken(address newTarget) external;\\n\\n    function upgradeERC721Exchange(address exchange) external;\\n\\n    function upgradeERC1155Exchange(address exchange) external;\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256[] calldata tokenIds,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function deployNFT721(\\n        address owner,\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 toTokenId,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT721(address query) external view returns (bool result);\\n\\n    function deployNFT1155(\\n        address owner,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address royaltyFeeRecipient,\\n        uint8 royaltyFee\\n    ) external returns (address nft);\\n\\n    function isNFT1155(address query) external view returns (bool result);\\n\\n    function deploySocialToken(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address dividendToken\\n    ) external returns (address proxy);\\n\\n    function isSocialToken(address query) external view returns (bool result);\\n\\n    function mintWithTags721(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data,\\n        string[] calldata tags\\n    ) external;\\n\\n    function mintWithTags1155(\\n        address nft,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data,\\n        string[] calldata tags\\n    ) external;\\n\\n    function setTags721(\\n        address nft,\\n        uint256 tokenId,\\n        string[] calldata tags\\n    ) external;\\n\\n    function setTags1155(\\n        address nft,\\n        uint256 tokenId,\\n        string[] calldata tags\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fc27c4d457b0616f38ddb347fe32b06ea1c338b4988ec51a178c83fcb0530e5\",\"license\":\"MIT\"},\"contracts/libraries/Orders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.3;\\n\\nlibrary Orders {\\n    // keccak256(\\\"Ask(address signer,address token,uint256 tokenId,uint256 amount,address strategy,address currency,address recipient,uint256 deadline,bytes params)\\\")\\n    bytes32 internal constant ASK_TYPEHASH = 0x17fdf8831f8bd77353b30f42ba9bc64e7144545a42a890389f298feeb45dec88;\\n    // keccak256(\\\"Bid(bytes32 askHash,address signer,uint256 amount,uint256 price,address recipient,address referrer)\\\")\\n    bytes32 internal constant BID_TYPEHASH = 0xb98e1dc48988064e6dfb813618609d7da80a8841e5f277039788ac4b50d497b2;\\n\\n    struct Ask {\\n        address signer;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address strategy;\\n        address currency;\\n        address recipient;\\n        uint256 deadline;\\n        bytes params;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Bid {\\n        bytes32 askHash;\\n        address signer;\\n        uint256 amount;\\n        uint256 price;\\n        address recipient;\\n        address referrer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function hash(Ask memory ask) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ASK_TYPEHASH,\\n                    ask.signer,\\n                    ask.token,\\n                    ask.tokenId,\\n                    ask.amount,\\n                    ask.strategy,\\n                    ask.currency,\\n                    ask.recipient,\\n                    ask.deadline,\\n                    keccak256(ask.params)\\n                )\\n            );\\n    }\\n\\n    function hash(Bid memory bid) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(BID_TYPEHASH, bid.askHash, bid.signer, bid.amount, bid.price, bid.recipient, bid.referrer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa35b519fac6ea626cc3b133907138ed75f3389c0a1bb4f771cfd5ec820caca23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a3a38038062002a3a83398101604081905262000034916200027f565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b038881166001600160a81b031992831617600160a01b60ff8a81168202929092179094556005805492891692909316919091179086169092029190911790558151620000d4906006906020850190620000f7565b508051620000ea906007906020840190620000f7565b5050505050505062000383565b828054620001059062000330565b90600052602060002090601f01602090048101928262000129576000855562000174565b82601f106200014457805160ff191683800117855562000174565b8280016001018555821562000174579182015b828111156200017457825182559160200191906001019062000157565b506200018292915062000186565b5090565b5b8082111562000182576000815560010162000187565b80516001600160a01b0381168114620001b557600080fd5b919050565b600082601f830112620001cb578081fd5b81516001600160401b0380821115620001e857620001e86200036d565b604051601f8301601f19908116603f011681019082821181831017156200021357620002136200036d565b816040528381526020925086838588010111156200022f578485fd5b8491505b8382101562000252578582018301518183018401529082019062000233565b838211156200026357848385830101525b9695505050505050565b805160ff81168114620001b557600080fd5b60008060008060008060c0878903121562000298578182fd5b620002a3876200019d565b9550620002b3602088016200026d565b9450620002c3604088016200019d565b9350620002d3606088016200026d565b60808801519093506001600160401b0380821115620002f0578384fd5b620002fe8a838b01620001ba565b935060a089015191508082111562000314578283fd5b506200032389828a01620001ba565b9150509295509295509295565b600181811c908216806200034557607f821691505b602082108114156200036757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6126a780620003936000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063c2b11e18116100b8578063d5f7e7561161007c578063d5f7e75614610518578063db5970171461052b578063e521cb921461053e578063e7ceca8114610551578063f2fde38b1461056457610227565b8063c2b11e18146104aa578063c6edbca4146104c7578063cb03111c146104cf578063d1640c9e146104e2578063d4bea1e91461050557610227565b8063999ba27c116100ff578063999ba27c14610414578063aec0b54314610437578063b3584b0d14610471578063bc96e8c714610484578063c032815f1461049757610227565b8063715018a6146103d557806374949588146103dd5780638518482e146103f05780638da5cb5b1461040357610227565b80633683a63d116101b35780634dd5ad0b116101825780634dd5ad0b146103815780634e3a599b1461038957806353ebf0221461039c5780635ef00369146103af578063706e1ce5146103c257610227565b80633683a63d14610323578063398d74361461033857806343ae710b1461034b57806345943ee11461035e57610227565b806324b72fd9116101fa57806324b72fd91461029e57806325ea8678146102b1578063262b9f63146102ea57806334375c90146102fd5780633501d8f41461031057610227565b806304895e021461022c5780630e309d871461024157806317e1f82e146102545780631f52ef6014610273575b600080fd5b61023f61023a366004611bf4565b610577565b005b61023f61024f366004611df2565b610622565b61025c60fa81565b60405160ff90911681526020015b60405180910390f35b610286610281366004611ef3565b6106c6565b6040516001600160a01b03909116815260200161026a565b61023f6102ac366004611df2565b61089e565b6102dc6102bf366004612007565b600c60209081526000928352604080842090915290825290205481565b60405190815260200161026a565b61023f6102f8366004612089565b610942565b600854610286906001600160a01b031681565b61023f61031e366004611c33565b610983565b61032b6109f7565b60405161026a919061246d565b61023f610346366004611cc3565b610a85565b600954610286906001600160a01b031681565b61037161036c366004611bf4565b610afc565b604051901515815260200161026a565b61025c603281565b610371610397366004611bf4565b610b78565b61023f6103aa366004611bf4565b610bd4565b6103716103bd366004611bf4565b610c82565b61023f6103d0366004611bf4565b610cdd565b61023f610d85565b61023f6103eb3660046120dc565b610df9565b61023f6103fe366004612089565b610e8c565b6000546001600160a01b0316610286565b610371610422366004611bf4565b600b6020526000908152604090205460ff1681565b6004546001600160a01b03811690600160a01b900460ff165b604080516001600160a01b03909316835260ff90911660208301520161026a565b61023f61047f366004612032565b610ec9565b610286610492366004611f81565b610f79565b6102866104a5366004611e2e565b6110c1565b6005546001600160a01b03811690600160a01b900460ff16610450565b61032b611285565b61023f6104dd366004611bf4565b611292565b6103716104f0366004611bf4565b600a6020526000908152604090205460ff1681565b61023f610513366004612032565b61130a565b61023f610526366004611bf4565b6113a6565b610286610539366004611d5b565b61144e565b61023f61054c366004611bf4565b611590565b61023f61055f366004611bf4565b611632565b61023f610572366004611bf4565b6116aa565b6000546001600160a01b031633146105aa5760405162461bcd60e51b81526004016105a1906124cf565b60405180910390fd5b6001600160a01b0381166106005760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f524543495049454e54000000000000000060448201526064016105a1565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461064c5760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b03821661069b5760405162461bcd60e51b815260206004820152601660248201527553484f59553a20494e56414c49445f4144445245535360501b60448201526064016105a1565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b6000808052600a6020526000805160206126528339815191525460ff16806106fd5750336000908152600a602052604090205460ff165b6107195760405162461bcd60e51b81526004016105a1906124a5565b8661075c5760405162461bcd60e51b815260206004820152601360248201527253484f59553a20494e56414c49445f4e414d4560681b60448201526064016105a1565b846107a15760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d4d6535093d3605a1b60448201526064016105a1565b6001805461083991906107b5908290612559565b815481106107d357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b039091169061080a908c908c908c908c908c908c908c908c9060240161225f565b60408051601f198184030181529190526020810180516001600160e01b031663ac9a252160e01b179052611794565b9050886001600160a01b0316816001600160a01b03167fc5a8d7a1d56dd3c513572f5994d9fac3d3a6e1434214939a043b794323f5765f8a8a8a8a8a8a8a60405161088a979695949392919061241a565b60405180910390a398975050505050505050565b6000546001600160a01b031633146108c85760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0382166109175760405162461bcd60e51b815260206004820152601660248201527553484f59553a20494e56414c49445f4144445245535360501b60448201526064016105a1565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461096c5760405162461bcd60e51b81526004016105a1906124cf565b805161097f9060069060208401906119d4565b5050565b61098e858483611897565b6040516394d008ef60e01b81526001600160a01b038616906394d008ef906109be90879087908790600401612306565b600060405180830381600087803b1580156109d857600080fd5b505af11580156109ec573d6000803e3d6000fd5b505050505050505050565b60068054610a04906125b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a30906125b7565b8015610a7d5780601f10610a5257610100808354040283529160200191610a7d565b820191906000526020600020905b815481529060010190602001808311610a6057829003601f168201915b505050505081565b610a90868583611897565b60405163731133e960e01b81526001600160a01b0387169063731133e990610ac2908890889088908890600401612336565b600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b50505050505050505050565b6002546000908190610b1090600190612559565b90505b610b5260028281548110610b3757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031684611973565b15610b61576001915050610b73565b80610b6b816125a0565b915050610b13565b919050565b6003546000908190610b8c90600190612559565b90505b610bb360038281548110610b3757634e487b7160e01b600052603260045260246000fd5b15610bc2576001915050610b73565b80610bcc816125a0565b915050610b8f565b6000546001600160a01b03163314610bfe5760405162461bcd60e51b81526004016105a1906124cf565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081527f90dccdf0d0809c3f945a409a3ce4652bf2c9b283e5aad88b3e36361433132cbb906020015b60405180910390a150565b600180546000918291610c959190612559565b90505b610cbc60018281548110610b3757634e487b7160e01b600052603260045260246000fd5b15610ccb576001915050610b73565b80610cd5816125a0565b915050610c98565b6000546001600160a01b03163314610d075760405162461bcd60e51b81526004016105a1906124cf565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8698a9880993ca12864a4d6e8bff70e3e073d4104aa0f9a8fdb2b74576922ab90602001610c77565b6000546001600160a01b03163314610daf5760405162461bcd60e51b81526004016105a1906124cf565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610e235760405162461bcd60e51b81526004016105a1906124cf565b603260ff82161115610e6c5760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016105a1565b6005805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b03163314610eb65760405162461bcd60e51b81526004016105a1906124cf565b805161097f9060079060208401906119d4565b6040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b158015610f0b57600080fd5b505afa158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190611c17565b6001600160a01b031614610f695760405162461bcd60e51b81526004016105a1906124a5565b610f74838383611897565b505050565b6000808052600a6020526000805160206126528339815191525460ff1680610fb05750336000908152600a602052604090205460ff165b610fcc5760405162461bcd60e51b81526004016105a1906124a5565b600085858585604051602401610fe594939291906122bd565b60408051601f198184030181529190526020810180516001600160e01b031663613d25bb60e01b1790526003805491925061105f9161102690600190612559565b8154811061104457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031682611794565b9150826001600160a01b0316866001600160a01b0316836001600160a01b03167fb17d2759d3d0f9f291f22b908114ad38cb6e664c1355972dc09eeed60c23020088886040516110b0929190612480565b60405180910390a450949350505050565b6000808052600a6020526000805160206126528339815191525460ff16806110f85750336000908152600a602052604090205460ff165b6111145760405162461bcd60e51b81526004016105a1906124a5565b866111575760405162461bcd60e51b815260206004820152601360248201527253484f59553a20494e56414c49445f4e414d4560681b60448201526064016105a1565b8461119c5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d4d6535093d3605a1b60448201526064016105a1565b6001805461123491906111b0908290612559565b815481106111ce57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b0390911690611205908c908c908c908c908c908c908c908c906024016121f4565b60408051601f198184030181529190526020810180516001600160e01b0316634f65e6d160e11b179052611794565b9050886001600160a01b0316816001600160a01b03167f4b593938d27e3a08db017a6f1815ab371dc97836b53114a3d5d52fecc663c5b48a8a8a8a8a8a8a60405161088a97969594939291906123b7565b60078054610a04906125b7565b6000546001600160a01b031633146112bc5760405162461bcd60e51b81526004016105a1906124cf565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f7906d96d0db1eb8f6805ac6930c6abd633b14b59c0b239412e1fd979ca12546690602001610c77565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561135157600080fd5b505afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138991906120c4565b11610f695760405162461bcd60e51b81526004016105a1906124a5565b6000546001600160a01b031633146113d05760405162461bcd60e51b81526004016105a1906124cf565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c9e0a997b60cd0855450b5761db24330074e914ceab5b053193b28d6a3e456390602001610c77565b6000808052600a6020526000805160206126528339815191525460ff16806114855750336000908152600a602052604090205460ff165b6114a15760405162461bcd60e51b81526004016105a1906124a5565b6002805461153491906114b690600190612559565b815481106114d457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b039091169061150590899089908990899089906024016121a2565b60408051601f198184030181529190526020810180516001600160e01b031663bff5e79d60e01b179052611794565b9050856001600160a01b0316816001600160a01b03167f5c113900031172d40b0061b68858275d56528342e41925faad4c305a04438bf58787878760405161157f949392919061236d565b60405180910390a395945050505050565b6000546001600160a01b031633146115ba5760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0381166116105760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e540000000060448201526064016105a1565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461165c5760405162461bcd60e51b81526004016105a1906124cf565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fca237d3f5dd115a560a2d7ddcc75a87200fca9a3b55e7f78330108c92b87a99a90602001610c77565b6000546001600160a01b031633146116d45760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0381166117395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0925050600083511115611890576000826001600160a01b0316846040516118059190612186565b6000604051808303816000865af19150503d8060008114611842576040519150601f19603f3d011682016040523d82523d6000602084013e611847565b606091505b505090508061188e5760405162461bcd60e51b815260206004820152601360248201527253484f59553a2043414c4c5f4641494c55524560681b60448201526064016105a1565b505b5092915050565b6001600160a01b0383166000908152600c602090815260408083208584529091528120805490826118c7836125f2565b91905055905060005b825181101561196c578281815181106118f957634e487b7160e01b600052603260045260246000fd5b602002602001015160405161190e9190612186565b604051809103902084866001600160a01b03167f8ef9f212aabac8e20a00892dc88a0afc9c9eb3522420eb21848d943a2dd377178560405161195291815260200190565b60405180910390a480611964816125f2565b9150506118d0565b5050505050565b6000808360601b905060405169363d3d373d3d3d363d7360b01b815281600a8201526e5af43d82803e903d91602b57fd5bf360881b601e82015260408101602d600082873c600d810151600d83015114815183511416935050505092915050565b8280546119e0906125b7565b90600052602060002090601f016020900481019282611a025760008555611a48565b82601f10611a1b57805160ff1916838001178555611a48565b82800160010185558215611a48579182015b82811115611a48578251825591602001919060010190611a2d565b50611a54929150611a58565b5090565b5b80821115611a545760008155600101611a59565b600082601f830112611a7d578081fd5b81356020611a92611a8d83612535565b612504565b82815281810190858301855b85811015611ac757611ab5898684358b0101611b31565b84529284019290840190600101611a9e565b5090979650505050505050565b600082601f830112611ae4578081fd5b81356020611af4611a8d83612535565b80838252828201915082860187848660051b8901011115611b13578586fd5b855b85811015611ac757813584529284019290840190600101611b15565b600082601f830112611b41578081fd5b813567ffffffffffffffff811115611b5b57611b5b612623565b611b6e601f8201601f1916602001612504565b818152846020838601011115611b82578283fd5b816020850160208301379081016020019190915292915050565b60008083601f840112611bad578182fd5b50813567ffffffffffffffff811115611bc4578182fd5b602083019150836020828501011115611bdc57600080fd5b9250929050565b803560ff81168114610b7357600080fd5b600060208284031215611c05578081fd5b8135611c1081612639565b9392505050565b600060208284031215611c28578081fd5b8151611c1081612639565b600080600080600060a08688031215611c4a578081fd5b8535611c5581612639565b94506020860135611c6581612639565b935060408601359250606086013567ffffffffffffffff80821115611c88578283fd5b611c9489838a01611b31565b93506080880135915080821115611ca9578283fd5b50611cb688828901611a6d565b9150509295509295909350565b60008060008060008060c08789031215611cdb578081fd5b8635611ce681612639565b95506020870135611cf681612639565b94506040870135935060608701359250608087013567ffffffffffffffff80821115611d20578283fd5b611d2c8a838b01611b31565b935060a0890135915080821115611d41578283fd5b50611d4e89828a01611a6d565b9150509295509295509295565b600080600080600060a08688031215611d72578081fd5b8535611d7d81612639565b9450602086013567ffffffffffffffff80821115611d99578283fd5b611da589838a01611ad4565b95506040880135915080821115611dba578283fd5b50611dc788828901611ad4565b9350506060860135611dd881612639565b9150611de660808701611be3565b90509295509295909350565b60008060408385031215611e04578182fd5b8235611e0f81612639565b915060208301358015158114611e23578182fd5b809150509250929050565b60008060008060008060008060c0898b031215611e49578586fd5b8835611e5481612639565b9750602089013567ffffffffffffffff80821115611e70578788fd5b611e7c8c838d01611b9c565b909950975060408b0135915080821115611e94578384fd5b611ea08c838d01611b9c565b909750955060608b0135915080821115611eb8578384fd5b50611ec58b828c01611ad4565b9350506080890135611ed681612639565b9150611ee460a08a01611be3565b90509295985092959890939650565b60008060008060008060008060c0898b031215611f0e578182fd5b8835611f1981612639565b9750602089013567ffffffffffffffff80821115611f35578384fd5b611f418c838d01611b9c565b909950975060408b0135915080821115611f59578384fd5b50611f668b828c01611b9c565b909650945050606089013592506080890135611ed681612639565b60008060008060808587031215611f96578182fd5b8435611fa181612639565b9350602085013567ffffffffffffffff80821115611fbd578384fd5b611fc988838901611b31565b94506040870135915080821115611fde578384fd5b50611feb87828801611b31565b9250506060850135611ffc81612639565b939692955090935050565b60008060408385031215612019578182fd5b823561202481612639565b946020939093013593505050565b600080600060608486031215612046578081fd5b833561205181612639565b925060208401359150604084013567ffffffffffffffff811115612073578182fd5b61207f86828701611a6d565b9150509250925092565b60006020828403121561209a578081fd5b813567ffffffffffffffff8111156120b0578182fd5b6120bc84828501611b31565b949350505050565b6000602082840312156120d5578081fd5b5051919050565b6000602082840312156120ed578081fd5b611c1082611be3565b6000815180845260208085019450808401835b8381101561212557815187529582019590820190600101612109565b509495945050505050565b60008151808452612148816020860160208601612570565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251612198818460208701612570565b9190910192915050565b600060018060a01b03808816835260a060208401526121c460a08401886120f6565b83810360408501526121d681886120f6565b959091166060840152505060ff919091166080909101529392505050565b600060018060a01b03808b16835260c0602084015261221760c084018a8c61215c565b838103604085015261222a81898b61215c565b9050838103606085015261223e81886120f6565b959091166080840152505060ff9190911660a0909101529695505050505050565b600060018060a01b03808b16835260c0602084015261228260c084018a8c61215c565b838103604085015261229581898b61215c565b92505085606084015280851660808401525060ff831660a08301529998505050505050505050565b600060018060a01b038087168352608060208401526122df6080840187612130565b83810360408501526122f18187612130565b92505080841660608401525095945050505050565b600060018060a01b03851682528360208301526060604083015261232d6060830184612130565b95945050505050565b600060018060a01b0386168252846020830152836040830152608060608301526123636080830184612130565b9695505050505050565b60006080825261238060808301876120f6565b828103602084015261239281876120f6565b6001600160a01b03959095166040840152505060ff9190911660609091015292915050565b600060a082526123cb60a08301898b61215c565b82810360208401526123de81888a61215c565b905082810360408401526123f281876120f6565b6001600160a01b03959095166060840152505060ff9190911660809091015295945050505050565b600060a0825261242e60a08301898b61215c565b828103602084015261244181888a61215c565b604084019690965250506001600160a01b0392909216606083015260ff16608090910152949350505050565b600060208252611c106020830184612130565b6000604082526124936040830185612130565b828103602084015261232d8185612130565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561252d5761252d612623565b604052919050565b600067ffffffffffffffff82111561254f5761254f612623565b5060051b60200190565b60008282101561256b5761256b61260d565b500390565b60005b8381101561258b578181015183820152602001612573565b8381111561259a576000848401525b50505050565b6000816125af576125af61260d565b506000190190565b600181811c908216806125cb57607f821691505b602082108114156125ec57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126065761260661260d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461264e57600080fd5b5056fe13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e3a264697066735822122043b683ed59107ab952a8b9c4816b8776401fd60ef959658915cc1b532c76478c64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063c2b11e18116100b8578063d5f7e7561161007c578063d5f7e75614610518578063db5970171461052b578063e521cb921461053e578063e7ceca8114610551578063f2fde38b1461056457610227565b8063c2b11e18146104aa578063c6edbca4146104c7578063cb03111c146104cf578063d1640c9e146104e2578063d4bea1e91461050557610227565b8063999ba27c116100ff578063999ba27c14610414578063aec0b54314610437578063b3584b0d14610471578063bc96e8c714610484578063c032815f1461049757610227565b8063715018a6146103d557806374949588146103dd5780638518482e146103f05780638da5cb5b1461040357610227565b80633683a63d116101b35780634dd5ad0b116101825780634dd5ad0b146103815780634e3a599b1461038957806353ebf0221461039c5780635ef00369146103af578063706e1ce5146103c257610227565b80633683a63d14610323578063398d74361461033857806343ae710b1461034b57806345943ee11461035e57610227565b806324b72fd9116101fa57806324b72fd91461029e57806325ea8678146102b1578063262b9f63146102ea57806334375c90146102fd5780633501d8f41461031057610227565b806304895e021461022c5780630e309d871461024157806317e1f82e146102545780631f52ef6014610273575b600080fd5b61023f61023a366004611bf4565b610577565b005b61023f61024f366004611df2565b610622565b61025c60fa81565b60405160ff90911681526020015b60405180910390f35b610286610281366004611ef3565b6106c6565b6040516001600160a01b03909116815260200161026a565b61023f6102ac366004611df2565b61089e565b6102dc6102bf366004612007565b600c60209081526000928352604080842090915290825290205481565b60405190815260200161026a565b61023f6102f8366004612089565b610942565b600854610286906001600160a01b031681565b61023f61031e366004611c33565b610983565b61032b6109f7565b60405161026a919061246d565b61023f610346366004611cc3565b610a85565b600954610286906001600160a01b031681565b61037161036c366004611bf4565b610afc565b604051901515815260200161026a565b61025c603281565b610371610397366004611bf4565b610b78565b61023f6103aa366004611bf4565b610bd4565b6103716103bd366004611bf4565b610c82565b61023f6103d0366004611bf4565b610cdd565b61023f610d85565b61023f6103eb3660046120dc565b610df9565b61023f6103fe366004612089565b610e8c565b6000546001600160a01b0316610286565b610371610422366004611bf4565b600b6020526000908152604090205460ff1681565b6004546001600160a01b03811690600160a01b900460ff165b604080516001600160a01b03909316835260ff90911660208301520161026a565b61023f61047f366004612032565b610ec9565b610286610492366004611f81565b610f79565b6102866104a5366004611e2e565b6110c1565b6005546001600160a01b03811690600160a01b900460ff16610450565b61032b611285565b61023f6104dd366004611bf4565b611292565b6103716104f0366004611bf4565b600a6020526000908152604090205460ff1681565b61023f610513366004612032565b61130a565b61023f610526366004611bf4565b6113a6565b610286610539366004611d5b565b61144e565b61023f61054c366004611bf4565b611590565b61023f61055f366004611bf4565b611632565b61023f610572366004611bf4565b6116aa565b6000546001600160a01b031633146105aa5760405162461bcd60e51b81526004016105a1906124cf565b60405180910390fd5b6001600160a01b0381166106005760405162461bcd60e51b815260206004820152601860248201527f53484f59553a20494e56414c49445f524543495049454e54000000000000000060448201526064016105a1565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461064c5760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b03821661069b5760405162461bcd60e51b815260206004820152601660248201527553484f59553a20494e56414c49445f4144445245535360501b60448201526064016105a1565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b6000808052600a6020526000805160206126528339815191525460ff16806106fd5750336000908152600a602052604090205460ff165b6107195760405162461bcd60e51b81526004016105a1906124a5565b8661075c5760405162461bcd60e51b815260206004820152601360248201527253484f59553a20494e56414c49445f4e414d4560681b60448201526064016105a1565b846107a15760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d4d6535093d3605a1b60448201526064016105a1565b6001805461083991906107b5908290612559565b815481106107d357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b039091169061080a908c908c908c908c908c908c908c908c9060240161225f565b60408051601f198184030181529190526020810180516001600160e01b031663ac9a252160e01b179052611794565b9050886001600160a01b0316816001600160a01b03167fc5a8d7a1d56dd3c513572f5994d9fac3d3a6e1434214939a043b794323f5765f8a8a8a8a8a8a8a60405161088a979695949392919061241a565b60405180910390a398975050505050505050565b6000546001600160a01b031633146108c85760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0382166109175760405162461bcd60e51b815260206004820152601660248201527553484f59553a20494e56414c49445f4144445245535360501b60448201526064016105a1565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461096c5760405162461bcd60e51b81526004016105a1906124cf565b805161097f9060069060208401906119d4565b5050565b61098e858483611897565b6040516394d008ef60e01b81526001600160a01b038616906394d008ef906109be90879087908790600401612306565b600060405180830381600087803b1580156109d857600080fd5b505af11580156109ec573d6000803e3d6000fd5b505050505050505050565b60068054610a04906125b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610a30906125b7565b8015610a7d5780601f10610a5257610100808354040283529160200191610a7d565b820191906000526020600020905b815481529060010190602001808311610a6057829003601f168201915b505050505081565b610a90868583611897565b60405163731133e960e01b81526001600160a01b0387169063731133e990610ac2908890889088908890600401612336565b600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b50505050505050505050565b6002546000908190610b1090600190612559565b90505b610b5260028281548110610b3757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031684611973565b15610b61576001915050610b73565b80610b6b816125a0565b915050610b13565b919050565b6003546000908190610b8c90600190612559565b90505b610bb360038281548110610b3757634e487b7160e01b600052603260045260246000fd5b15610bc2576001915050610b73565b80610bcc816125a0565b915050610b8f565b6000546001600160a01b03163314610bfe5760405162461bcd60e51b81526004016105a1906124cf565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040519081527f90dccdf0d0809c3f945a409a3ce4652bf2c9b283e5aad88b3e36361433132cbb906020015b60405180910390a150565b600180546000918291610c959190612559565b90505b610cbc60018281548110610b3757634e487b7160e01b600052603260045260246000fd5b15610ccb576001915050610b73565b80610cd5816125a0565b915050610c98565b6000546001600160a01b03163314610d075760405162461bcd60e51b81526004016105a1906124cf565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8698a9880993ca12864a4d6e8bff70e3e073d4104aa0f9a8fdb2b74576922ab90602001610c77565b6000546001600160a01b03163314610daf5760405162461bcd60e51b81526004016105a1906124cf565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610e235760405162461bcd60e51b81526004016105a1906124cf565b603260ff82161115610e6c5760405162461bcd60e51b815260206004820152601260248201527153484f59553a20494e56414c49445f46454560701b60448201526064016105a1565b6005805460ff909216600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b03163314610eb65760405162461bcd60e51b81526004016105a1906124cf565b805161097f9060079060208401906119d4565b6040516331a9108f60e11b81526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b158015610f0b57600080fd5b505afa158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190611c17565b6001600160a01b031614610f695760405162461bcd60e51b81526004016105a1906124a5565b610f74838383611897565b505050565b6000808052600a6020526000805160206126528339815191525460ff1680610fb05750336000908152600a602052604090205460ff165b610fcc5760405162461bcd60e51b81526004016105a1906124a5565b600085858585604051602401610fe594939291906122bd565b60408051601f198184030181529190526020810180516001600160e01b031663613d25bb60e01b1790526003805491925061105f9161102690600190612559565b8154811061104457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031682611794565b9150826001600160a01b0316866001600160a01b0316836001600160a01b03167fb17d2759d3d0f9f291f22b908114ad38cb6e664c1355972dc09eeed60c23020088886040516110b0929190612480565b60405180910390a450949350505050565b6000808052600a6020526000805160206126528339815191525460ff16806110f85750336000908152600a602052604090205460ff165b6111145760405162461bcd60e51b81526004016105a1906124a5565b866111575760405162461bcd60e51b815260206004820152601360248201527253484f59553a20494e56414c49445f4e414d4560681b60448201526064016105a1565b8461119c5760405162461bcd60e51b815260206004820152601560248201527414d213d6554e881253959053125117d4d6535093d3605a1b60448201526064016105a1565b6001805461123491906111b0908290612559565b815481106111ce57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b0390911690611205908c908c908c908c908c908c908c908c906024016121f4565b60408051601f198184030181529190526020810180516001600160e01b0316634f65e6d160e11b179052611794565b9050886001600160a01b0316816001600160a01b03167f4b593938d27e3a08db017a6f1815ab371dc97836b53114a3d5d52fecc663c5b48a8a8a8a8a8a8a60405161088a97969594939291906123b7565b60078054610a04906125b7565b6000546001600160a01b031633146112bc5760405162461bcd60e51b81526004016105a1906124cf565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f7906d96d0db1eb8f6805ac6930c6abd633b14b59c0b239412e1fd979ca12546690602001610c77565b604051627eeac760e11b8152336004820152602481018390526000906001600160a01b0385169062fdd58e9060440160206040518083038186803b15801561135157600080fd5b505afa158015611365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138991906120c4565b11610f695760405162461bcd60e51b81526004016105a1906124a5565b6000546001600160a01b031633146113d05760405162461bcd60e51b81526004016105a1906124cf565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383169081179091556040519081527f1c9e0a997b60cd0855450b5761db24330074e914ceab5b053193b28d6a3e456390602001610c77565b6000808052600a6020526000805160206126528339815191525460ff16806114855750336000908152600a602052604090205460ff165b6114a15760405162461bcd60e51b81526004016105a1906124a5565b6002805461153491906114b690600190612559565b815481106114d457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160a01b039091169061150590899089908990899089906024016121a2565b60408051601f198184030181529190526020810180516001600160e01b031663bff5e79d60e01b179052611794565b9050856001600160a01b0316816001600160a01b03167f5c113900031172d40b0061b68858275d56528342e41925faad4c305a04438bf58787878760405161157f949392919061236d565b60405180910390a395945050505050565b6000546001600160a01b031633146115ba5760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0381166116105760405162461bcd60e51b815260206004820152601c60248201527f53484f59553a20494e56414c49445f4645455f524543495049454e540000000060448201526064016105a1565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461165c5760405162461bcd60e51b81526004016105a1906124cf565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fca237d3f5dd115a560a2d7ddcc75a87200fca9a3b55e7f78330108c92b87a99a90602001610c77565b6000546001600160a01b031633146116d45760405162461bcd60e51b81526004016105a1906124cf565b6001600160a01b0381166117395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0925050600083511115611890576000826001600160a01b0316846040516118059190612186565b6000604051808303816000865af19150503d8060008114611842576040519150601f19603f3d011682016040523d82523d6000602084013e611847565b606091505b505090508061188e5760405162461bcd60e51b815260206004820152601360248201527253484f59553a2043414c4c5f4641494c55524560681b60448201526064016105a1565b505b5092915050565b6001600160a01b0383166000908152600c602090815260408083208584529091528120805490826118c7836125f2565b91905055905060005b825181101561196c578281815181106118f957634e487b7160e01b600052603260045260246000fd5b602002602001015160405161190e9190612186565b604051809103902084866001600160a01b03167f8ef9f212aabac8e20a00892dc88a0afc9c9eb3522420eb21848d943a2dd377178560405161195291815260200190565b60405180910390a480611964816125f2565b9150506118d0565b5050505050565b6000808360601b905060405169363d3d373d3d3d363d7360b01b815281600a8201526e5af43d82803e903d91602b57fd5bf360881b601e82015260408101602d600082873c600d810151600d83015114815183511416935050505092915050565b8280546119e0906125b7565b90600052602060002090601f016020900481019282611a025760008555611a48565b82601f10611a1b57805160ff1916838001178555611a48565b82800160010185558215611a48579182015b82811115611a48578251825591602001919060010190611a2d565b50611a54929150611a58565b5090565b5b80821115611a545760008155600101611a59565b600082601f830112611a7d578081fd5b81356020611a92611a8d83612535565b612504565b82815281810190858301855b85811015611ac757611ab5898684358b0101611b31565b84529284019290840190600101611a9e565b5090979650505050505050565b600082601f830112611ae4578081fd5b81356020611af4611a8d83612535565b80838252828201915082860187848660051b8901011115611b13578586fd5b855b85811015611ac757813584529284019290840190600101611b15565b600082601f830112611b41578081fd5b813567ffffffffffffffff811115611b5b57611b5b612623565b611b6e601f8201601f1916602001612504565b818152846020838601011115611b82578283fd5b816020850160208301379081016020019190915292915050565b60008083601f840112611bad578182fd5b50813567ffffffffffffffff811115611bc4578182fd5b602083019150836020828501011115611bdc57600080fd5b9250929050565b803560ff81168114610b7357600080fd5b600060208284031215611c05578081fd5b8135611c1081612639565b9392505050565b600060208284031215611c28578081fd5b8151611c1081612639565b600080600080600060a08688031215611c4a578081fd5b8535611c5581612639565b94506020860135611c6581612639565b935060408601359250606086013567ffffffffffffffff80821115611c88578283fd5b611c9489838a01611b31565b93506080880135915080821115611ca9578283fd5b50611cb688828901611a6d565b9150509295509295909350565b60008060008060008060c08789031215611cdb578081fd5b8635611ce681612639565b95506020870135611cf681612639565b94506040870135935060608701359250608087013567ffffffffffffffff80821115611d20578283fd5b611d2c8a838b01611b31565b935060a0890135915080821115611d41578283fd5b50611d4e89828a01611a6d565b9150509295509295509295565b600080600080600060a08688031215611d72578081fd5b8535611d7d81612639565b9450602086013567ffffffffffffffff80821115611d99578283fd5b611da589838a01611ad4565b95506040880135915080821115611dba578283fd5b50611dc788828901611ad4565b9350506060860135611dd881612639565b9150611de660808701611be3565b90509295509295909350565b60008060408385031215611e04578182fd5b8235611e0f81612639565b915060208301358015158114611e23578182fd5b809150509250929050565b60008060008060008060008060c0898b031215611e49578586fd5b8835611e5481612639565b9750602089013567ffffffffffffffff80821115611e70578788fd5b611e7c8c838d01611b9c565b909950975060408b0135915080821115611e94578384fd5b611ea08c838d01611b9c565b909750955060608b0135915080821115611eb8578384fd5b50611ec58b828c01611ad4565b9350506080890135611ed681612639565b9150611ee460a08a01611be3565b90509295985092959890939650565b60008060008060008060008060c0898b031215611f0e578182fd5b8835611f1981612639565b9750602089013567ffffffffffffffff80821115611f35578384fd5b611f418c838d01611b9c565b909950975060408b0135915080821115611f59578384fd5b50611f668b828c01611b9c565b909650945050606089013592506080890135611ed681612639565b60008060008060808587031215611f96578182fd5b8435611fa181612639565b9350602085013567ffffffffffffffff80821115611fbd578384fd5b611fc988838901611b31565b94506040870135915080821115611fde578384fd5b50611feb87828801611b31565b9250506060850135611ffc81612639565b939692955090935050565b60008060408385031215612019578182fd5b823561202481612639565b946020939093013593505050565b600080600060608486031215612046578081fd5b833561205181612639565b925060208401359150604084013567ffffffffffffffff811115612073578182fd5b61207f86828701611a6d565b9150509250925092565b60006020828403121561209a578081fd5b813567ffffffffffffffff8111156120b0578182fd5b6120bc84828501611b31565b949350505050565b6000602082840312156120d5578081fd5b5051919050565b6000602082840312156120ed578081fd5b611c1082611be3565b6000815180845260208085019450808401835b8381101561212557815187529582019590820190600101612109565b509495945050505050565b60008151808452612148816020860160208601612570565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251612198818460208701612570565b9190910192915050565b600060018060a01b03808816835260a060208401526121c460a08401886120f6565b83810360408501526121d681886120f6565b959091166060840152505060ff919091166080909101529392505050565b600060018060a01b03808b16835260c0602084015261221760c084018a8c61215c565b838103604085015261222a81898b61215c565b9050838103606085015261223e81886120f6565b959091166080840152505060ff9190911660a0909101529695505050505050565b600060018060a01b03808b16835260c0602084015261228260c084018a8c61215c565b838103604085015261229581898b61215c565b92505085606084015280851660808401525060ff831660a08301529998505050505050505050565b600060018060a01b038087168352608060208401526122df6080840187612130565b83810360408501526122f18187612130565b92505080841660608401525095945050505050565b600060018060a01b03851682528360208301526060604083015261232d6060830184612130565b95945050505050565b600060018060a01b0386168252846020830152836040830152608060608301526123636080830184612130565b9695505050505050565b60006080825261238060808301876120f6565b828103602084015261239281876120f6565b6001600160a01b03959095166040840152505060ff9190911660609091015292915050565b600060a082526123cb60a08301898b61215c565b82810360208401526123de81888a61215c565b905082810360408401526123f281876120f6565b6001600160a01b03959095166060840152505060ff9190911660809091015295945050505050565b600060a0825261242e60a08301898b61215c565b828103602084015261244181888a61215c565b604084019690965250506001600160a01b0392909216606083015260ff16608090910152949350505050565b600060208252611c106020830184612130565b6000604082526124936040830185612130565b828103602084015261232d8185612130565b60208082526010908201526f29a427acaa9d102327a92124a22222a760811b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561252d5761252d612623565b604052919050565b600067ffffffffffffffff82111561254f5761254f612623565b5060051b60200190565b60008282101561256b5761256b61260d565b500390565b60005b8381101561258b578181015183820152602001612573565b8381111561259a576000848401525b50505050565b6000816125af576125af61260d565b506000190190565b600181811c908216806125cb57607f821691505b602082108114156125ec57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126065761260661260d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461264e57600080fd5b5056fe13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e3a264697066735822122043b683ed59107ab952a8b9c4816b8776401fd60ef959658915cc1b532c76478c64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4038,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_targets721",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4041,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_targets1155",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4044,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_targetsSocialToken",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4046,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_protocolFeeRecipient",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4048,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_protocolFee",
        "offset": 20,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 4050,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_operationalFeeRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4052,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_operationalFee",
        "offset": 20,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 4055,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "baseURI721",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4058,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "baseURI1155",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 4061,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "erc721Exchange",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4064,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "erc1155Exchange",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4069,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "isDeployerWhitelisted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4074,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "isStrategyWhitelisted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4080,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "tagNonces",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}