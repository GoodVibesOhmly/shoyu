/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_OPERATIONAL_FEE()": FunctionFragment;
    "MAX_ROYALTY_FEE()": FunctionFragment;
    "MINT_BATCH_1155_TYPEHASH()": FunctionFragment;
    "MINT_BATCH_721_TYPEHASH()": FunctionFragment;
    "MINT_SOCIAL_TOKEN_TYPEHASH()": FunctionFragment;
    "PARK_TOKEN_IDS_721_TYPEHASH()": FunctionFragment;
    "baseURI1155()": FunctionFragment;
    "baseURI721()": FunctionFragment;
    "deployNFT1155AndMintBatch(address,uint256[],uint256[],address,uint8)": FunctionFragment;
    "deployNFT721AndMintBatch(address,string,string,uint256[],address,uint8)": FunctionFragment;
    "deployNFT721AndPark(address,string,string,uint256,address,uint8)": FunctionFragment;
    "deploySocialToken(address,string,string,address,uint256)": FunctionFragment;
    "erc1155Exchange()": FunctionFragment;
    "erc721Exchange()": FunctionFragment;
    "isDeployerWhitelisted(address)": FunctionFragment;
    "isNFT1155(address)": FunctionFragment;
    "isNFT721(address)": FunctionFragment;
    "isSocialToken(address)": FunctionFragment;
    "isStrategyWhitelisted(address)": FunctionFragment;
    "mintBatch1155(address,address,uint256[],uint256[],bytes,uint8,bytes32,bytes32)": FunctionFragment;
    "mintBatch721(address,address,uint256[],bytes,uint8,bytes32,bytes32)": FunctionFragment;
    "mintSocialToken(address,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "operationalFeeInfo()": FunctionFragment;
    "parkTokenIds721(address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "protocolFeeInfo()": FunctionFragment;
    "setBaseURI1155(string)": FunctionFragment;
    "setBaseURI721(string)": FunctionFragment;
    "setDeployerWhitelisted(address,bool)": FunctionFragment;
    "setOperationalFee(uint8)": FunctionFragment;
    "setOperationalFeeRecipient(address)": FunctionFragment;
    "setProtocolFeeRecipient(address)": FunctionFragment;
    "setStrategyWhitelisted(address,bool)": FunctionFragment;
    "upgradeERC1155Exchange(address)": FunctionFragment;
    "upgradeERC721Exchange(address)": FunctionFragment;
    "upgradeNFT1155(address)": FunctionFragment;
    "upgradeNFT721(address)": FunctionFragment;
    "upgradeSocialToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OPERATIONAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROYALTY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_BATCH_1155_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_BATCH_721_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_SOCIAL_TOKEN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARK_TOKEN_IDS_721_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseURI1155",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseURI721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT1155AndMintBatch",
    values: [string, BigNumberish[], BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT721AndMintBatch",
    values: [string, string, string, BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT721AndPark",
    values: [string, string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySocialToken",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc1155Exchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721Exchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployerWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isNFT1155", values: [string]): string;
  encodeFunctionData(functionFragment: "isNFT721", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSocialToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch1155",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch721",
    values: [
      string,
      string,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSocialToken",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "operationalFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parkTokenIds721",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI1155",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI721",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeployerWhitelisted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationalFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyWhitelisted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeERC1155Exchange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeERC721Exchange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNFT1155",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNFT721",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSocialToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OPERATIONAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ROYALTY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_BATCH_1155_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_BATCH_721_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_SOCIAL_TOKEN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARK_TOKEN_IDS_721_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseURI1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployNFT1155AndMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNFT721AndMintBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNFT721AndPark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc1155Exchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721Exchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeployerWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNFT1155", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isNFT721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBatch1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBatch721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationalFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parkTokenIds721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseURI1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseURI721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeployerWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationalFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeERC1155Exchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeERC721Exchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeNFT1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeNFT721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSocialToken",
    data: BytesLike
  ): Result;

  events: {
    "DeployNFT1155AndMintBatch(address,address,uint256[],uint256[],address,uint8)": EventFragment;
    "DeployNFT721AndMintBatch(address,address,string,string,uint256[],address,uint8)": EventFragment;
    "DeployNFT721AndPark(address,address,string,string,uint256,address,uint8)": EventFragment;
    "DeploySocialToken(address,address,string,string,address,uint256)": EventFragment;
    "SetBaseURI1155(string)": EventFragment;
    "SetBaseURI721(string)": EventFragment;
    "SetDeployerWhitelisted(address,bool)": EventFragment;
    "SetOperationalFee(uint8)": EventFragment;
    "SetOperationalFeeRecipient(address)": EventFragment;
    "SetProtocolFeeRecipient(address)": EventFragment;
    "SetStrategyWhitelisted(address,bool)": EventFragment;
    "UpgradeERC1155Exchange(address)": EventFragment;
    "UpgradeERC721Exchange(address)": EventFragment;
    "UpgradeNFT1155(address)": EventFragment;
    "UpgradeNFT721(address)": EventFragment;
    "UpgradeSocialToken(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployNFT1155AndMintBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployNFT721AndMintBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployNFT721AndPark"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploySocialToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseURI1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseURI721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDeployerWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperationalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperationalFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategyWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeERC1155Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeERC721Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeNFT1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeNFT721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeSocialToken"): EventFragment;
}

export class ITokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenFactoryInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_OPERATIONAL_FEE(overrides?: CallOverrides): Promise<[number]>;

    MAX_ROYALTY_FEE(overrides?: CallOverrides): Promise<[number]>;

    MINT_BATCH_1155_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MINT_BATCH_721_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MINT_SOCIAL_TOKEN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PARK_TOKEN_IDS_721_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    baseURI1155(overrides?: CallOverrides): Promise<[string]>;

    baseURI721(overrides?: CallOverrides): Promise<[string]>;

    deployNFT1155AndMintBatch(
      owner: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployNFT721AndMintBatch(
      owner: string,
      name: string,
      symbol: string,
      tokenIds: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployNFT721AndPark(
      owner: string,
      name: string,
      symbol: string,
      toTokenId: BigNumberish,
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploySocialToken(
      owner: string,
      name: string,
      symbol: string,
      dividendToken: string,
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc1155Exchange(overrides?: CallOverrides): Promise<[string]>;

    erc721Exchange(overrides?: CallOverrides): Promise<[string]>;

    isDeployerWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNFT1155(
      query: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isNFT721(
      query: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isSocialToken(
      query: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isStrategyWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintBatch1155(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch721(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSocialToken(
      token: string,
      to: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    operationalFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; permil: number }>;

    parkTokenIds721(
      nft: string,
      toTokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; permil: number }>;

    setBaseURI1155(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI721(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeployerWhitelisted(
      deployer: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperationalFee(
      operationalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperationalFeeRecipient(
      operationalFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeRecipient(
      protocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyWhitelisted(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeERC1155Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeERC721Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeNFT1155(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeNFT721(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeSocialToken(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_OPERATIONAL_FEE(overrides?: CallOverrides): Promise<number>;

  MAX_ROYALTY_FEE(overrides?: CallOverrides): Promise<number>;

  MINT_BATCH_1155_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MINT_BATCH_721_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MINT_SOCIAL_TOKEN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PARK_TOKEN_IDS_721_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  baseURI1155(overrides?: CallOverrides): Promise<string>;

  baseURI721(overrides?: CallOverrides): Promise<string>;

  deployNFT1155AndMintBatch(
    owner: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    royaltyFeeRecipient: string,
    royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployNFT721AndMintBatch(
    owner: string,
    name: string,
    symbol: string,
    tokenIds: BigNumberish[],
    royaltyFeeRecipient: string,
    royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployNFT721AndPark(
    owner: string,
    name: string,
    symbol: string,
    toTokenId: BigNumberish,
    royaltyFeeRecipient: string,
    royaltyFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploySocialToken(
    owner: string,
    name: string,
    symbol: string,
    dividendToken: string,
    initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc1155Exchange(overrides?: CallOverrides): Promise<string>;

  erc721Exchange(overrides?: CallOverrides): Promise<string>;

  isDeployerWhitelisted(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNFT1155(query: string, overrides?: CallOverrides): Promise<boolean>;

  isNFT721(query: string, overrides?: CallOverrides): Promise<boolean>;

  isSocialToken(query: string, overrides?: CallOverrides): Promise<boolean>;

  isStrategyWhitelisted(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintBatch1155(
    nft: string,
    to: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch721(
    nft: string,
    to: string,
    tokenIds: BigNumberish[],
    data: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSocialToken(
    token: string,
    to: string,
    amount: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  operationalFeeInfo(
    overrides?: CallOverrides
  ): Promise<[string, number] & { recipient: string; permil: number }>;

  parkTokenIds721(
    nft: string,
    toTokenId: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolFeeInfo(
    overrides?: CallOverrides
  ): Promise<[string, number] & { recipient: string; permil: number }>;

  setBaseURI1155(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI721(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeployerWhitelisted(
    deployer: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperationalFee(
    operationalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperationalFeeRecipient(
    operationalFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeRecipient(
    protocolFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyWhitelisted(
    strategy: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeERC1155Exchange(
    exchange: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeERC721Exchange(
    exchange: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeNFT1155(
    newTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeNFT721(
    newTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeSocialToken(
    newTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_OPERATIONAL_FEE(overrides?: CallOverrides): Promise<number>;

    MAX_ROYALTY_FEE(overrides?: CallOverrides): Promise<number>;

    MINT_BATCH_1155_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MINT_BATCH_721_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MINT_SOCIAL_TOKEN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PARK_TOKEN_IDS_721_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    baseURI1155(overrides?: CallOverrides): Promise<string>;

    baseURI721(overrides?: CallOverrides): Promise<string>;

    deployNFT1155AndMintBatch(
      owner: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNFT721AndMintBatch(
      owner: string,
      name: string,
      symbol: string,
      tokenIds: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNFT721AndPark(
      owner: string,
      name: string,
      symbol: string,
      toTokenId: BigNumberish,
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deploySocialToken(
      owner: string,
      name: string,
      symbol: string,
      dividendToken: string,
      initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    erc1155Exchange(overrides?: CallOverrides): Promise<string>;

    erc721Exchange(overrides?: CallOverrides): Promise<string>;

    isDeployerWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNFT1155(query: string, overrides?: CallOverrides): Promise<boolean>;

    isNFT721(query: string, overrides?: CallOverrides): Promise<boolean>;

    isSocialToken(query: string, overrides?: CallOverrides): Promise<boolean>;

    isStrategyWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintBatch1155(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch721(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintSocialToken(
      token: string,
      to: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    operationalFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; permil: number }>;

    parkTokenIds721(
      nft: string,
      toTokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, number] & { recipient: string; permil: number }>;

    setBaseURI1155(uri: string, overrides?: CallOverrides): Promise<void>;

    setBaseURI721(uri: string, overrides?: CallOverrides): Promise<void>;

    setDeployerWhitelisted(
      deployer: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationalFee(
      operationalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationalFeeRecipient(
      operationalFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeRecipient(
      protocolFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyWhitelisted(
      strategy: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeERC1155Exchange(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeERC721Exchange(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeNFT1155(newTarget: string, overrides?: CallOverrides): Promise<void>;

    upgradeNFT721(newTarget: string, overrides?: CallOverrides): Promise<void>;

    upgradeSocialToken(
      newTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DeployNFT1155AndMintBatch(
      proxy?: string | null,
      owner?: string | null,
      tokenIds?: null,
      amounts?: null,
      royaltyFeeRecipient?: null,
      royaltyFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber[], string, number],
      {
        proxy: string;
        owner: string;
        tokenIds: BigNumber[];
        amounts: BigNumber[];
        royaltyFeeRecipient: string;
        royaltyFee: number;
      }
    >;

    DeployNFT721AndMintBatch(
      proxy?: string | null,
      owner?: string | null,
      name?: null,
      symbol?: null,
      tokenIds?: null,
      royaltyFeeRecipient?: null,
      royaltyFee?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber[], string, number],
      {
        proxy: string;
        owner: string;
        name: string;
        symbol: string;
        tokenIds: BigNumber[];
        royaltyFeeRecipient: string;
        royaltyFee: number;
      }
    >;

    DeployNFT721AndPark(
      proxy?: string | null,
      owner?: string | null,
      name?: null,
      symbol?: null,
      toTokenId?: null,
      royaltyFeeRecipient?: null,
      royaltyFee?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string, number],
      {
        proxy: string;
        owner: string;
        name: string;
        symbol: string;
        toTokenId: BigNumber;
        royaltyFeeRecipient: string;
        royaltyFee: number;
      }
    >;

    DeploySocialToken(
      proxy?: string | null,
      owner?: string | null,
      name?: null,
      symbol?: null,
      dividendToken?: string | null,
      initialSupply?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber],
      {
        proxy: string;
        owner: string;
        name: string;
        symbol: string;
        dividendToken: string;
        initialSupply: BigNumber;
      }
    >;

    SetBaseURI1155(uri?: null): TypedEventFilter<[string], { uri: string }>;

    SetBaseURI721(uri?: null): TypedEventFilter<[string], { uri: string }>;

    SetDeployerWhitelisted(
      deployer?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { deployer: string; whitelisted: boolean }
    >;

    SetOperationalFee(fee?: null): TypedEventFilter<[number], { fee: number }>;

    SetOperationalFeeRecipient(
      recipient?: null
    ): TypedEventFilter<[string], { recipient: string }>;

    SetProtocolFeeRecipient(
      recipient?: null
    ): TypedEventFilter<[string], { recipient: string }>;

    SetStrategyWhitelisted(
      strategy?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { strategy: string; whitelisted: boolean }
    >;

    UpgradeERC1155Exchange(
      exchange?: null
    ): TypedEventFilter<[string], { exchange: string }>;

    UpgradeERC721Exchange(
      exchange?: null
    ): TypedEventFilter<[string], { exchange: string }>;

    UpgradeNFT1155(
      newTarget?: null
    ): TypedEventFilter<[string], { newTarget: string }>;

    UpgradeNFT721(
      newTarget?: null
    ): TypedEventFilter<[string], { newTarget: string }>;

    UpgradeSocialToken(
      newTarget?: null
    ): TypedEventFilter<[string], { newTarget: string }>;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OPERATIONAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ROYALTY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_BATCH_1155_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_BATCH_721_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_SOCIAL_TOKEN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PARK_TOKEN_IDS_721_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI1155(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI721(overrides?: CallOverrides): Promise<BigNumber>;

    deployNFT1155AndMintBatch(
      owner: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployNFT721AndMintBatch(
      owner: string,
      name: string,
      symbol: string,
      tokenIds: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployNFT721AndPark(
      owner: string,
      name: string,
      symbol: string,
      toTokenId: BigNumberish,
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploySocialToken(
      owner: string,
      name: string,
      symbol: string,
      dividendToken: string,
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc1155Exchange(overrides?: CallOverrides): Promise<BigNumber>;

    erc721Exchange(overrides?: CallOverrides): Promise<BigNumber>;

    isDeployerWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNFT1155(query: string, overrides?: CallOverrides): Promise<BigNumber>;

    isNFT721(query: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSocialToken(query: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStrategyWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBatch1155(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch721(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSocialToken(
      token: string,
      to: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    operationalFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    parkTokenIds721(
      nft: string,
      toTokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseURI1155(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI721(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeployerWhitelisted(
      deployer: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperationalFee(
      operationalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperationalFeeRecipient(
      operationalFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeRecipient(
      protocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyWhitelisted(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeERC1155Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeERC721Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeNFT1155(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeNFT721(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeSocialToken(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OPERATIONAL_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ROYALTY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_BATCH_1155_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_BATCH_721_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_SOCIAL_TOKEN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PARK_TOKEN_IDS_721_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI1155(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployNFT1155AndMintBatch(
      owner: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployNFT721AndMintBatch(
      owner: string,
      name: string,
      symbol: string,
      tokenIds: BigNumberish[],
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployNFT721AndPark(
      owner: string,
      name: string,
      symbol: string,
      toTokenId: BigNumberish,
      royaltyFeeRecipient: string,
      royaltyFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploySocialToken(
      owner: string,
      name: string,
      symbol: string,
      dividendToken: string,
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc1155Exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721Exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeployerWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFT1155(
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFT721(
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSocialToken(
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStrategyWhitelisted(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBatch1155(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch721(
      nft: string,
      to: string,
      tokenIds: BigNumberish[],
      data: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSocialToken(
      token: string,
      to: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operationalFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parkTokenIds721(
      nft: string,
      toTokenId: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolFeeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseURI1155(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI721(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeployerWhitelisted(
      deployer: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperationalFee(
      operationalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperationalFeeRecipient(
      operationalFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeRecipient(
      protocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyWhitelisted(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeERC1155Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeERC721Exchange(
      exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeNFT1155(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeNFT721(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeSocialToken(
      newTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
