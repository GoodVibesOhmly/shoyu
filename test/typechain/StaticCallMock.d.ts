/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StaticCallMockInterface extends ethers.utils.Interface {
  functions: {
    "globalV()": FunctionFragment;
    "pureTest11(uint256)": FunctionFragment;
    "pureTest23(uint256,string)": FunctionFragment;
    "setX(uint256,uint256)": FunctionFragment;
    "setY(uint256,string)": FunctionFragment;
    "viewTest11(uint256)": FunctionFragment;
    "viewTest13(uint256)": FunctionFragment;
    "x(uint256)": FunctionFragment;
    "y(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "globalV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pureTest11",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pureTest23",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setX",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setY",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewTest11",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewTest13",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "x", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "y", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "globalV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pureTest11", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pureTest23", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewTest11", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewTest13", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;

  events: {};
}

export class StaticCallMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StaticCallMockInterface;

  functions: {
    globalV(overrides?: CallOverrides): Promise<[string]>;

    pureTest11(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pureTest23(
      id: BigNumberish,
      str: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    setX(
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setY(
      id: BigNumberish,
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewTest11(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewTest13(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    x(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    y(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  globalV(overrides?: CallOverrides): Promise<string>;

  pureTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  pureTest23(
    id: BigNumberish,
    str: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string]>;

  setX(
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setY(
    id: BigNumberish,
    str: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  viewTest13(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string]>;

  x(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  y(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    globalV(overrides?: CallOverrides): Promise<string>;

    pureTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pureTest23(
      id: BigNumberish,
      str: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    setX(
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setY(
      id: BigNumberish,
      str: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    viewTest13(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    x(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    y(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    globalV(overrides?: CallOverrides): Promise<BigNumber>;

    pureTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pureTest23(
      id: BigNumberish,
      str: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setX(
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setY(
      id: BigNumberish,
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewTest11(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    viewTest13(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    x(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    y(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    globalV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pureTest11(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pureTest23(
      id: BigNumberish,
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setX(
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setY(
      id: BigNumberish,
      str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewTest11(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewTest13(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    x(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    y(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
