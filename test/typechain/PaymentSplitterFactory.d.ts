/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PaymentSplitterFactoryInterface extends ethers.utils.Interface {
  functions: {
    "c_0x99326011(bytes32)": FunctionFragment;
    "c_0x9aa6d367(bytes32)": FunctionFragment;
    "deployPaymentSplitter(address,string,address[],uint256[])": FunctionFragment;
    "isPaymentSplitter(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "c_0x99326011",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "c_0x9aa6d367",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPaymentSplitter",
    values: [string, string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentSplitter",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "c_0x99326011",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c_0x9aa6d367",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPaymentSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentSplitter",
    data: BytesLike
  ): Result;

  events: {
    "DeployPaymentSplitter(address,string,address[],uint256[],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployPaymentSplitter"): EventFragment;
}

export class PaymentSplitterFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PaymentSplitterFactoryInterface;

  functions: {
    c_0x99326011(
      c__0x99326011: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    c_0x9aa6d367(
      c__0x9aa6d367: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    deployPaymentSplitter(
      owner: string,
      title: string,
      payees: string[],
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPaymentSplitter(
      query: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;
  };

  c_0x99326011(
    c__0x99326011: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  c_0x9aa6d367(
    c__0x9aa6d367: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  deployPaymentSplitter(
    owner: string,
    title: string,
    payees: string[],
    shares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPaymentSplitter(query: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    c_0x99326011(
      c__0x99326011: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    c_0x9aa6d367(
      c__0x9aa6d367: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPaymentSplitter(
      owner: string,
      title: string,
      payees: string[],
      shares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    isPaymentSplitter(
      query: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    DeployPaymentSplitter(
      owner?: string | null,
      title?: null,
      payees?: null,
      shares?: null,
      splitter?: null
    ): TypedEventFilter<
      [string, string, string[], BigNumber[], string],
      {
        owner: string;
        title: string;
        payees: string[];
        shares: BigNumber[];
        splitter: string;
      }
    >;
  };

  estimateGas: {
    c_0x99326011(
      c__0x99326011: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    c_0x9aa6d367(
      c__0x9aa6d367: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployPaymentSplitter(
      owner: string,
      title: string,
      payees: string[],
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPaymentSplitter(
      query: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    c_0x99326011(
      c__0x99326011: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    c_0x9aa6d367(
      c__0x9aa6d367: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployPaymentSplitter(
      owner: string,
      title: string,
      payees: string[],
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPaymentSplitter(
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
