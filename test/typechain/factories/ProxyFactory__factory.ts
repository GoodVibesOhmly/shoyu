/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ProxyFactory, ProxyFactoryInterface } from "../ProxyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x9aa6d367",
        type: "bytes32",
      },
    ],
    name: "c_0x9aa6d367",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630412356814602d575b600080fd5b60436004803603810190603f9190605b565b6045565b005b50565b600081359050605581608b565b92915050565b600060208284031215606c57600080fd5b60006078848285016048565b91505092915050565b6000819050919050565b6092816081565b8114609c57600080fd5b5056fea264697066735822122019048f4ee873ae660ea9356099b53e3e41fec6119bae01457ec118ebe1aa7a7a64736f6c63430008030033";

export class ProxyFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProxyFactory> {
    return super.deploy(overrides || {}) as Promise<ProxyFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ProxyFactory {
    return super.attach(address) as ProxyFactory;
  }
  connect(signer: Signer): ProxyFactory__factory {
    return super.connect(signer) as ProxyFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyFactoryInterface {
    return new utils.Interface(_abi) as ProxyFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyFactory {
    return new Contract(address, _abi, signerOrProvider) as ProxyFactory;
  }
}
