/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DesignatedSale,
  DesignatedSaleInterface,
} from "../DesignatedSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xb208f2ab",
        type: "bytes32",
      },
    ],
    name: "c_0xb208f2ab",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "canBid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "bidder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bidPrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "canClaim",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061081c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806340a37db4146100465780635f11a72b146100625780636511995114610092575b600080fd5b610060600480360381019061005b919061048e565b6100c2565b005b61007c600480360381019061007791906104f3565b6100c5565b60405161008991906105db565b60405180910390f35b6100ac60048036038101906100a791906104f3565b61015a565b6040516100b991906105db565b60405180910390f35b50565b60006100f37fd3effc8a83d31e5424b29527b34d3b2b97488988fa11518bcf1bced9494d669f60001b6100c2565b61011f7fcfc6ba865cb21e99e66750c168e5348e4296c6b804269b173a3413fd5f4500a660001b6100c2565b61014b7f8443e3c6ef1f9cf28394733d1ce470968ed600b3102ec72275d28052967dd1fa60001b6100c2565b60009050979650505050505050565b60006101887f8e6a1e0c39ea202761885ea4f68af55c78b1595ee914d3749f021c5ef76452be60001b6100c2565b6101b47f5522eaa5f54bc02d1455dc5cd5c06254eca6bd2c342ed48db79b1af623be6f9060001b6100c2565b6101e07fa2f812d61313f9825d205aaf941611bd928b68d3004971efeb8d2bcd65eff1d260001b6100c2565b600080888060200190518101906101f791906104b7565b915091506102277ffeb2fca11fc33b5b2ce8355e5d6236d59b1017f40d9733ba70999a740629fbb560001b6100c2565b6102537ffc837031d1e1351b54d7019d39a23b3b55c293b670baf0f24eca2d70a131bf4760001b6100c2565b61027f7f5b73ab9e7bf560a3fbdd6c08afa80fdf94938d9d0dee51716fc9806f9309a8dc60001b6100c2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906105f6565b60405180910390fd5b61031b7fdcccf5ca1d30fb9e73ff6b37c640d62f200f3ef235cf2050f3a127cc81d1427760001b6100c2565b6103477fe1a603ede49aa5a560aaa6ffc3f641677c85798e0bb1630980d2b2f91cf8c84460001b6100c2565b6103737f9f7089e55b00346bd352d653115963d3516c1adaad3d755844371fac76f4b5a060001b6100c2565b8682111580156103ae57508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b92505050979650505050505050565b60006103d06103cb8461063b565b610616565b9050828152602081018484840111156103e857600080fd5b6103f38482856106e1565b509392505050565b60008135905061040a8161078a565b92915050565b60008151905061041f816107a1565b92915050565b600081359050610434816107b8565b92915050565b600082601f83011261044b57600080fd5b813561045b8482602086016103bd565b91505092915050565b600081359050610473816107cf565b92915050565b600081519050610488816107cf565b92915050565b6000602082840312156104a057600080fd5b60006104ae84828501610425565b91505092915050565b600080604083850312156104ca57600080fd5b60006104d885828601610479565b92505060206104e985828601610410565b9150509250929050565b600080600080600080600060e0888a03121561050e57600080fd5b600061051c8a828b01610464565b975050602088013567ffffffffffffffff81111561053957600080fd5b6105458a828b0161043a565b96505060406105568a828b016103fb565b95505060606105678a828b01610464565b94505060806105788a828b016103fb565b93505060a06105898a828b01610464565b92505060c061059a8a828b01610464565b91505092959891949750929550565b6105b2816106a1565b82525050565b60006105c560178361066c565b91506105d082610761565b602082019050919050565b60006020820190506105f060008301846105a9565b92915050565b6000602082019050818103600083015261060f816105b8565b9050919050565b6000610620610631565b905061062c82826106f0565b919050565b6000604051905090565b600067ffffffffffffffff82111561065657610655610721565b5b61065f82610750565b9050602081019050919050565b600082825260208201905092915050565b6000610688826106b7565b9050919050565b600061069a826106b7565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6106f982610750565b810181811067ffffffffffffffff8211171561071857610717610721565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f53484f59553a20494e56414c49445f44455349474e4545000000000000000000600082015250565b6107938161067d565b811461079e57600080fd5b50565b6107aa8161068f565b81146107b557600080fd5b50565b6107c1816106ad565b81146107cc57600080fd5b50565b6107d8816106d7565b81146107e357600080fd5b5056fea26469706673582212209f2bd59920430bab7144a44df6dc645c50b7ecde12019f8d08277fc0a0d58f7164736f6c63430008030033";

export class DesignatedSale__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DesignatedSale> {
    return super.deploy(overrides || {}) as Promise<DesignatedSale>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DesignatedSale {
    return super.attach(address) as DesignatedSale;
  }
  connect(signer: Signer): DesignatedSale__factory {
    return super.connect(signer) as DesignatedSale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DesignatedSaleInterface {
    return new utils.Interface(_abi) as DesignatedSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DesignatedSale {
    return new Contract(address, _abi, signerOrProvider) as DesignatedSale;
  }
}
